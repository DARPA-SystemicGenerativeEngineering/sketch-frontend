pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct Participant
{
 int id;
}

Participant Participant_new (int id)
{
  Participant n = new Participant();
  n.id = id;
  return n;
}


harness void getParticipantView(int participants_sz, int ret, int flat_0, bit flat_1,
                                int [MAX_LEN]  participants_id)

 {
 Participant [MAX_LEN]  participants;
 for (int i = 0; i < MAX_LEN; ++i) {
  participants[i] = new Participant();
  participants[i].id = participants_id[i]; }
 
 if (true && (participants_sz >= 0 && participants_sz < MAX_LEN))
  {
  if (true)
   {
   assert participants_sz == 0 && postcondition(participants_sz, 0, participants_sz,
                                                participants_sz == 0, participants) ||
     !(participants_sz == 0) && postcondition(participants_sz, 1, participants_sz,
                                              participants_sz == 0, participants);
  }
   }
  }


bit postcondition(int participants_sz, int ret, int flat_0, bit flat_1, Participant [MAX_LEN]  participants) {
 Participant [MAX_LEN]  list1;
 int list1_sz;
 top_list1(participants, participants_sz, participants_sz, ret, flat_0, flat_1, participants,
           list1, list1_sz);
 Participant [MAX_LEN]  list2;
 int list2_sz;
 select_list2(list1, list1_sz, participants_sz, ret, flat_0, flat_1, participants,
              list2, list2_sz);
 return {| 
 ret == agg_agg3(list2, list2_sz) |}; }


void top_list1 (Participant [MAX_LEN] participants, int participants_sz, int participants_sz, int ret, int flat_0, bit flat_1, Participant [MAX_LEN] participants, ref Participant [MAX_LEN] list1, ref int list1_sz)
{
  list1_sz = {| participants_sz | ret | flat_0 |};
  list1 = participants[0::list1_sz];
}


void select_list2 (Participant [MAX_LEN] list1, int list1_sz, int participants_sz, int ret, int flat_0, bit flat_1, Participant [MAX_LEN] participants, ref Participant [MAX_LEN] list2, ref int list2_sz)
{
  list2_sz = 0;
  for (int i = 0; i < list1_sz; ++i)
  {
    if (select_list2_pred(list1[i], participants_sz, ret, flat_0, flat_1, participants))
    {
      list2[list2_sz] = list1[i];
      ++list2_sz;
    }
  }
}
generator bit select_list2_pred (Participant tuple, int participants_sz, int ret, int flat_0, bit flat_1, Participant [MAX_LEN] participants)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == ret;
      else if (operator0 == 6) pred0 = tuple.id == flat_0;
      else pred0 = tuple.id >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg3 (Participant [MAX_LEN] list2, int list2_sz)
{
  int count = list2_sz;
  int max_id = 0; int sum_id = 0; int min_id = 3; int avg_id = 0;
  for (int i = 0; i < list2_sz; ++i)
  {
    if (list2[i].id > max_id)
      max_id = list2[i].id;
    if (list2[i].id < min_id)
      min_id = list2[i].id;
    sum_id += list2[i].id;
  }
  avg_id = count==0?0: (sum_id / count); 
  return {| count | max_id | sum_id | min_id | avg_id |};
}

