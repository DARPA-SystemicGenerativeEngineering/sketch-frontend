pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct Notification
{
 int user;
}

Notification Notification_new (int user)
{
  Notification n = new Notification();
  n.user = user;
  return n;
}


harness void foo(int activeOnly, int issueNotifications_sz, int notifications_sz,
                 int i_1, bit loop_0_2, int flat_5, int notificationUser_4_8, bit flat_6_9,
                 int notification_3_7_user, int [MAX_LEN]  issueNotifications_user,
                 int [MAX_LEN]  notifications_user)

 {
 Notification notification_3_7 = new Notification();
 notification_3_7.user = notification_3_7_user;
 Notification [MAX_LEN]  issueNotifications;
 for (int i = 0; i < MAX_LEN; ++i) {
  issueNotifications[i] = new Notification();
  issueNotifications[i].user = issueNotifications_user[i]; }
 
 Notification [MAX_LEN]  notifications;
 for (int i = 0; i < MAX_LEN; ++i) {
  notifications[i] = new Notification();
  notifications[i].user = notifications_user[i]; }
 
 if (true && (issueNotifications_sz >= 0 && issueNotifications_sz < MAX_LEN) && (notifications_sz >=
                                                                                   0 &&
                                                                                   notifications_sz <
                                                                                   MAX_LEN))
  {
  if (i_1 < notifications_sz && invariant0(activeOnly, issueNotifications_sz, notifications_sz,
                                           i_1, loop_0_2, issueNotifications, notifications))
   {
    assert activeOnly > 0 && invariant0(activeOnly, issueNotifications_sz, notifications_sz,
                                       i_1 + 1, loop_0_2, append_3(issueNotifications,
                                                                   issueNotifications_sz,
                                                                   notifications[i_1],
                                                                   issueNotifications_sz),
                                       notifications) ||
    !(activeOnly > 0) && invariant0(
                                                                                activeOnly,
                                                                                issueNotifications_sz,
                                                                                notifications_sz,
                                                                                i_1 +
                                                                                  1,
                                                                                loop_0_2,
                                                                                issueNotifications,
                                                                                notifications);
  }
  
  if (!(i_1 < notifications_sz) && invariant0(activeOnly, issueNotifications_sz,
                                              notifications_sz, i_1, loop_0_2, issueNotifications,
                                              notifications))
   {
   assert postcondition(activeOnly, issueNotifications_sz, notifications_sz, i_1,
                        loop_0_2, flat_5, notificationUser_4_8, flat_6_9, notification_3_7,
                        issueNotifications, notifications); }
  
  if (true)
   {
   assert invariant0(activeOnly, 0, notifications_sz, 0, false, issueNotifications,
                     notifications); }
   }
  }


bit invariant0(int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1,
               bit loop_0_2, Notification [MAX_LEN]  issueNotifications, Notification [MAX_LEN]  notifications) {
 if (pred1(activeOnly, activeOnly, notifications_sz, i_1, loop_0_2) && pred2(i_1,
                                                                             activeOnly,
                                                                             notifications_sz,
                                                                             i_1,
                                                                             loop_0_2))
  {
  Notification [MAX_LEN]  list3;
  int list3_sz;
  top_list3(notifications, notifications_sz, activeOnly, issueNotifications_sz, notifications_sz,
            i_1, loop_0_2, issueNotifications, notifications, list3, list3_sz);
  Notification [MAX_LEN]  list4;
  int list4_sz;
  select_list4(list3, list3_sz, activeOnly, issueNotifications_sz, notifications_sz,
               i_1, loop_0_2, issueNotifications, notifications, list4, list4_sz);
  Notification [MAX_LEN]  list5;
  int list5_sz;
  project_list5(list4, list4_sz, list5, list5_sz);
  return {| 
  equals_list6(issueNotifications, issueNotifications_sz, list5, list5_sz) |}; }
  else return 0; }


Notification [MAX_LEN] append_0 (Notification [MAX_LEN] list, int list_sz, Notification e, ref int outputList_sz)
{
  Notification [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Notification [MAX_LEN] append_1 (Notification [MAX_LEN] list, int list_sz, Notification e, ref int outputList_sz)
{
  Notification [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Notification [MAX_LEN] append_2 (Notification [MAX_LEN] list, int list_sz, Notification e, ref int outputList_sz)
{
  Notification [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Notification [MAX_LEN] append_3 (Notification [MAX_LEN] list, int list_sz, Notification e, ref int outputList_sz)
{
  Notification [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


bit postcondition(int activeOnly, int issueNotifications_sz, int notifications_sz,
                  int i_1, bit loop_0_2, int flat_5, int notificationUser_4_8, bit flat_6_9,
                  Notification notification_3_7, Notification [MAX_LEN]  issueNotifications,
                  Notification [MAX_LEN]  notifications) {
 Notification [MAX_LEN]  list7;
 int list7_sz;
 top_list7(notifications, notifications_sz, activeOnly, issueNotifications_sz, notifications_sz,
           i_1, loop_0_2, flat_5, notificationUser_4_8, flat_6_9, notification_3_7,
           issueNotifications, notifications, list7, list7_sz);
 Notification [MAX_LEN]  list8;
 int list8_sz;
 select_list8(list7, list7_sz, activeOnly, issueNotifications_sz, notifications_sz,
              i_1, loop_0_2, flat_5, notificationUser_4_8, flat_6_9, notification_3_7,
              issueNotifications, notifications, list8, list8_sz);
 Notification [MAX_LEN]  list9;
 int list9_sz;
 project_list9(list8, list8_sz, list9, list9_sz);
 return {| 
 equals_list10(issueNotifications, issueNotifications_sz, list9, list9_sz) |}; }


generator bit pred1 (int activeOnly, int activeOnly, int notifications_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| notifications_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return activeOnly > rightOperand;
  else if (operator == 2) return activeOnly <= rightOperand;
  else if (operator == 3) return activeOnly < rightOperand;
  else if (operator == 4) return activeOnly == rightOperand;
  else return activeOnly >= rightOperand;
}


generator bit pred2 (int i_1, int activeOnly, int notifications_sz, int i_1, bit loop_0_2)
{
  int rightOperand = {| activeOnly | notifications_sz |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_1 > rightOperand;
  else if (operator == 2) return i_1 <= rightOperand;
  else if (operator == 3) return i_1 < rightOperand;
  else if (operator == 4) return i_1 == rightOperand;
  else return i_1 >= rightOperand;
}


void top_list3 (Notification [MAX_LEN] notifications, int notifications_sz, int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1, bit loop_0_2, Notification [MAX_LEN] issueNotifications, Notification [MAX_LEN] notifications, ref Notification [MAX_LEN] list3, ref int list3_sz)
{
  list3_sz = {| activeOnly | issueNotifications_sz | notifications_sz | i_1 |};
  list3 = notifications[0::list3_sz];
}


void select_list4 (Notification [MAX_LEN] list3, int list3_sz, int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1, bit loop_0_2, Notification [MAX_LEN] issueNotifications, Notification [MAX_LEN] notifications, ref Notification [MAX_LEN] list4, ref int list4_sz)
{
  list4_sz = 0;
  for (int i = 0; i < list3_sz; ++i)
  {
    if (select_list4_pred(list3[i], activeOnly, issueNotifications_sz, notifications_sz, i_1, loop_0_2, issueNotifications, notifications))
    {
      list4[list4_sz] = list3[i];
      ++list4_sz;
    }
  }
}
generator bit select_list4_pred (Notification tuple, int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1, bit loop_0_2, Notification [MAX_LEN] issueNotifications, Notification [MAX_LEN] notifications)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.user > ??(2);
      else if (operator0 == 2) pred0 = tuple.user <= ??(2);
      else if (operator0 == 3) pred0 = tuple.user < ??(2);
      else if (operator0 == 4) pred0 = tuple.user == ??(2);
      else if (operator0 == 5) pred0 = tuple.user == activeOnly;
      else if (operator0 == 6) pred0 = tuple.user == i_1;
      else if (operator0 == 7) pred0 = activeOnly > ??(2);
      else pred0 = tuple.user >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


void project_list5 (Notification [MAX_LEN] list4, int list4_sz, ref Notification [MAX_LEN] list5, ref int list5_sz)
{
  list5_sz = list4_sz;
  list5 = list4;
}


bit equals_list6 (Notification [MAX_LEN] issueNotifications, int issueNotifications_sz, ref Notification [MAX_LEN] list5, ref int list5_sz)
{
  if (issueNotifications_sz != list5_sz) return 0;
  for (int i = 0; i < issueNotifications_sz; ++i)
  {
    if (issueNotifications[i].user != list5[i].user)
      return 0;
  }
  return 1;
}


void top_list7 (Notification [MAX_LEN] notifications, int notifications_sz, int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1, bit loop_0_2, int flat_5, int notificationUser_4_8, bit flat_6_9, Notification notification_3_7, Notification [MAX_LEN] issueNotifications, Notification [MAX_LEN] notifications, ref Notification [MAX_LEN] list7, ref int list7_sz)
{
  list7_sz = {| activeOnly | issueNotifications_sz | notifications_sz | i_1 | flat_5 | notificationUser_4_8 |};
  list7 = notifications[0::list7_sz];
}


void select_list8 (Notification [MAX_LEN] list7, int list7_sz, int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1, bit loop_0_2, int flat_5, int notificationUser_4_8, bit flat_6_9, Notification notification_3_7, Notification [MAX_LEN] issueNotifications, Notification [MAX_LEN] notifications, ref Notification [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = 0;
  for (int i = 0; i < list7_sz; ++i)
  {
    if (select_list8_pred(list7[i], activeOnly, issueNotifications_sz, notifications_sz, i_1, loop_0_2, flat_5, notificationUser_4_8, flat_6_9, notification_3_7, issueNotifications, notifications))
    {
      list8[list8_sz] = list7[i];
      ++list8_sz;
    }
  }
}
generator bit select_list8_pred (Notification tuple, int activeOnly, int issueNotifications_sz, int notifications_sz, int i_1, bit loop_0_2, int flat_5, int notificationUser_4_8, bit flat_6_9, Notification notification_3_7, Notification [MAX_LEN] issueNotifications, Notification [MAX_LEN] notifications)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.user > ??(2);
      else if (operator0 == 2) pred0 = tuple.user <= ??(2);
      else if (operator0 == 3) pred0 = tuple.user < ??(2);
      else if (operator0 == 4) pred0 = tuple.user == ??(2);
      else if (operator0 == 5) pred0 = tuple.user == activeOnly;
      else if (operator0 == 6) pred0 = tuple.user == i_1;
      else if (operator0 == 7) pred0 = tuple.user == flat_5;
      else if (operator0 == 8) pred0 = tuple.user == notificationUser_4_8;
      else if (operator0 == 9) pred0 = tuple.user == notification_3_7.user;
      else if (operator0 == 10) pred0 = activeOnly > ??(2);
      else pred0 = tuple.user >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


void project_list9 (Notification [MAX_LEN] list8, int list8_sz, ref Notification [MAX_LEN] list9, ref int list9_sz)
{
  list9_sz = list8_sz;
  list9 = list8;
}


bit equals_list10 (Notification [MAX_LEN] issueNotifications, int issueNotifications_sz, ref Notification [MAX_LEN] list9, ref int list9_sz)
{
  if (issueNotifications_sz != list9_sz) return 0;
  for (int i = 0; i < issueNotifications_sz; ++i)
  {
    if (issueNotifications[i].user != list9[i].user)
      return 0;
  }
  return 1;
}

