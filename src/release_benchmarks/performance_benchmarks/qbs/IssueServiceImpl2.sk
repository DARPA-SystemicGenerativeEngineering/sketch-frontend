pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct Version
{
 int id;
}

Version Version_new (int id)
{
  Version n = new Version();
  n.id = id;
  return n;
}


harness void getIssueVersionIds(int issueId, int versionIds_sz, int versions_sz,
                                int i_2, bit loop_0_3, int flat_1_4, int version_5_6_id,
                                int [MAX_LEN]  versionIds_id, int [MAX_LEN]  versions_id)

 {
 Version version_5_6 = new Version();
 version_5_6.id = version_5_6_id;
 Version [MAX_LEN]  versionIds;
 for (int i = 0; i < MAX_LEN; ++i) {
  versionIds[i] = new Version();
  versionIds[i].id = versionIds_id[i]; }
 
 Version [MAX_LEN]  versions;
 for (int i = 0; i < MAX_LEN; ++i) {
  versions[i] = new Version();
  versions[i].id = versions_id[i]; }
 
 if (true && (versionIds_sz >= 0 && versionIds_sz < MAX_LEN) && (versions_sz >= 0 &&
                                                                   versions_sz <
                                                                   MAX_LEN))
  {
  if (i_2 < versions_sz && invariant0(issueId, versionIds_sz, versions_sz, i_2, loop_0_3,
                                      versionIds, versions))
   {
   assert invariant0(issueId, versionIds_sz, versions_sz, i_2 + 1, loop_0_3, append_1(
                                                                               versionIds,
                                                                               versionIds_sz,
                                                                               versions[i_2],
                                                                               versionIds_sz),
                     versions); }
  
  if (!(i_2 < versions_sz) && invariant0(issueId, versionIds_sz, versions_sz, i_2,
                                         loop_0_3, versionIds, versions))
   {
   assert postcondition(issueId, versionIds_sz, versions_sz, i_2, loop_0_3, flat_1_4,
                        version_5_6, versionIds, versions); }
  
  if (true)
   {
   assert invariant0(issueId, 0, versions_sz, 0, false, versionIds, versions); }
   }
  }


bit invariant0(int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3,
               Version [MAX_LEN]  versionIds, Version [MAX_LEN]  versions) {
 if (pred1(issueId, issueId, versions_sz, i_2, loop_0_3) && pred2(i_2, issueId, versions_sz,
                                                                  i_2, loop_0_3))
  {
  Version [MAX_LEN]  list3;
  int list3_sz;
  top_list3(versions, versions_sz, issueId, versionIds_sz, versions_sz, i_2, loop_0_3,
            versionIds, versions, list3, list3_sz);
  Version [MAX_LEN]  list4;
  int list4_sz;
  select_list4(list3, list3_sz, issueId, versionIds_sz, versions_sz, i_2, loop_0_3,
               versionIds, versions, list4, list4_sz);
  Version [MAX_LEN]  list5;
  int list5_sz;
  project_list5(list4, list4_sz, list5, list5_sz);
  return {| 
  equals_list6(versionIds, versionIds_sz, list5, list5_sz) |}; }
  else return 0; }


Version [MAX_LEN] append_0 (Version [MAX_LEN] list, int list_sz, Version e, ref int outputList_sz)
{
  Version [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


Version [MAX_LEN] append_1 (Version [MAX_LEN] list, int list_sz, Version e, ref int outputList_sz)
{
  Version [MAX_LEN] out;
  out[0::list_sz] = list[0::list_sz];
  out[list_sz] = e;
  outputList_sz = list_sz + 1;
  return out;
}


bit postcondition(int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3,
                  int flat_1_4, Version version_5_6, Version [MAX_LEN]  versionIds,
                  Version [MAX_LEN]  versions) {
 Version [MAX_LEN]  list7;
 int list7_sz;
 top_list7(versions, versions_sz, issueId, versionIds_sz, versions_sz, i_2, loop_0_3,
           flat_1_4, version_5_6, versionIds, versions, list7, list7_sz);
 Version [MAX_LEN]  list8;
 int list8_sz;
 select_list8(list7, list7_sz, issueId, versionIds_sz, versions_sz, i_2, loop_0_3,
              flat_1_4, version_5_6, versionIds, versions, list8, list8_sz);
 Version [MAX_LEN]  list9;
 int list9_sz;
 project_list9(list8, list8_sz, list9, list9_sz);
 return {| 
 equals_list10(versionIds, versionIds_sz, list9, list9_sz) |}; }


generator bit pred1 (int issueId, int issueId, int versions_sz, int i_2, bit loop_0_3)
{
  int rightOperand = {| versions_sz | i_2 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return issueId > rightOperand;
  else if (operator == 2) return issueId <= rightOperand;
  else if (operator == 3) return issueId < rightOperand;
  else if (operator == 4) return issueId == rightOperand;
  else return issueId >= rightOperand;
}


generator bit pred2 (int i_2, int issueId, int versions_sz, int i_2, bit loop_0_3)
{
  int rightOperand = {| issueId | versions_sz |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_2 > rightOperand;
  else if (operator == 2) return i_2 <= rightOperand;
  else if (operator == 3) return i_2 < rightOperand;
  else if (operator == 4) return i_2 == rightOperand;
  else return i_2 >= rightOperand;
}


void top_list3 (Version [MAX_LEN] versions, int versions_sz, int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3, Version [MAX_LEN] versionIds, Version [MAX_LEN] versions, ref Version [MAX_LEN] list3, ref int list3_sz)
{
  list3_sz = {| issueId | versionIds_sz | versions_sz | i_2 |};
  list3 = versions[0::list3_sz];
}


void select_list4 (Version [MAX_LEN] list3, int list3_sz, int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3, Version [MAX_LEN] versionIds, Version [MAX_LEN] versions, ref Version [MAX_LEN] list4, ref int list4_sz)
{
  list4_sz = 0;
  for (int i = 0; i < list3_sz; ++i)
  {
    if (select_list4_pred(list3[i], issueId, versionIds_sz, versions_sz, i_2, loop_0_3, versionIds, versions))
    {
      list4[list4_sz] = list3[i];
      ++list4_sz;
    }
  }
}
generator bit select_list4_pred (Version tuple, int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3, Version [MAX_LEN] versionIds, Version [MAX_LEN] versions)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == issueId;
      else if (operator0 == 6) pred0 = tuple.id == i_2;
      else pred0 = tuple.id >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


void project_list5 (Version [MAX_LEN] list4, int list4_sz, ref Version [MAX_LEN] list5, ref int list5_sz)
{
  list5_sz = list4_sz;
  list5 = list4;
}


bit equals_list6 (Version [MAX_LEN] versionIds, int versionIds_sz, ref Version [MAX_LEN] list5, ref int list5_sz)
{
  if (versionIds_sz != list5_sz) return 0;
  for (int i = 0; i < versionIds_sz; ++i)
  {
    if (versionIds[i].id != list5[i].id)
      return 0;
  }
  return 1;
}


void top_list7 (Version [MAX_LEN] versions, int versions_sz, int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3, int flat_1_4, Version version_5_6, Version [MAX_LEN] versionIds, Version [MAX_LEN] versions, ref Version [MAX_LEN] list7, ref int list7_sz)
{
  list7_sz = {| issueId | versionIds_sz | versions_sz | i_2 | flat_1_4 |};
  list7 = versions[0::list7_sz];
}


void select_list8 (Version [MAX_LEN] list7, int list7_sz, int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3, int flat_1_4, Version version_5_6, Version [MAX_LEN] versionIds, Version [MAX_LEN] versions, ref Version [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = 0;
  for (int i = 0; i < list7_sz; ++i)
  {
    if (select_list8_pred(list7[i], issueId, versionIds_sz, versions_sz, i_2, loop_0_3, flat_1_4, version_5_6, versionIds, versions))
    {
      list8[list8_sz] = list7[i];
      ++list8_sz;
    }
  }
}
generator bit select_list8_pred (Version tuple, int issueId, int versionIds_sz, int versions_sz, int i_2, bit loop_0_3, int flat_1_4, Version version_5_6, Version [MAX_LEN] versionIds, Version [MAX_LEN] versions)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.id > ??(2);
      else if (operator0 == 2) pred0 = tuple.id <= ??(2);
      else if (operator0 == 3) pred0 = tuple.id < ??(2);
      else if (operator0 == 4) pred0 = tuple.id == ??(2);
      else if (operator0 == 5) pred0 = tuple.id == issueId;
      else if (operator0 == 6) pred0 = tuple.id == i_2;
      else if (operator0 == 7) pred0 = tuple.id == flat_1_4;
      else if (operator0 == 8) pred0 = tuple.id == version_5_6.id;
      else pred0 = tuple.id >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


void project_list9 (Version [MAX_LEN] list8, int list8_sz, ref Version [MAX_LEN] list9, ref int list9_sz)
{
  list9_sz = list8_sz;
  list9 = list8;
}


bit equals_list10 (Version [MAX_LEN] versionIds, int versionIds_sz, ref Version [MAX_LEN] list9, ref int list9_sz)
{
  if (versionIds_sz != list9_sz) return 0;
  for (int i = 0; i < versionIds_sz; ++i)
  {
    if (versionIds[i].id != list9[i].id)
      return 0;
  }
  return 1;
}

