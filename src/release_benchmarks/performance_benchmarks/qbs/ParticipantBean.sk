pragma options "--bnd-unroll-amnt 10 --bnd-inbits 2 --beopt:simiters 10";
#define MAX_LEN 4

struct ConcreteTaskDescriptor
{
 int login;
}

ConcreteTaskDescriptor ConcreteTaskDescriptor_new (int login)
{
  ConcreteTaskDescriptor n = new ConcreteTaskDescriptor();
  n.login = login;
  return n;
}


harness void checkTasks(int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2,
                        int flat_4, int flat_5_8, bit flat_6_9, int ctd_3_7_login,
                        int [MAX_LEN]  ctds_login)

 {
 ConcreteTaskDescriptor ctd_3_7 = new ConcreteTaskDescriptor();
 ctd_3_7.login = ctd_3_7_login;
 ConcreteTaskDescriptor [MAX_LEN]  ctds;
 for (int i = 0; i < MAX_LEN; ++i) {
  ctds[i] = new ConcreteTaskDescriptor();
  ctds[i].login = ctds_login[i]; }
 
 if (true && (ctds_sz >= 0 && ctds_sz < MAX_LEN))
  {
  if (i_1 < ctds_sz && invariant0(userLogin, ctds_sz, allowed, i_1, loop_0_2, ctds))
   {
   assert ctds[i_1].login == userLogin && invariant0(userLogin, ctds_sz, allowed +
                                                       1, i_1 + 1, loop_0_2, ctds) ||
     !(ctds[i_1].login == userLogin) && invariant0(userLogin, ctds_sz, allowed, i_1 +
                                                     1, loop_0_2, ctds); }
  
  if (!(i_1 < ctds_sz) && invariant0(userLogin, ctds_sz, allowed, i_1, loop_0_2,
                                     ctds))
   {
   assert postcondition(userLogin, ctds_sz, allowed, i_1, loop_0_2, flat_4, flat_5_8,
                        flat_6_9, ctd_3_7, ctds); }
  
  if (true)
   {
   assert invariant0(userLogin, ctds_sz, 0, 0, false, ctds); }
   }
  }


bit invariant0(int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, ConcreteTaskDescriptor [MAX_LEN]  ctds) {
 if (pred1(userLogin, userLogin, ctds_sz, allowed, i_1, loop_0_2) && pred2(allowed,
                                                                           userLogin,
                                                                           ctds_sz,
                                                                           allowed,
                                                                           i_1, loop_0_2) &&
       pred3(i_1, userLogin, ctds_sz, allowed, i_1, loop_0_2))
  {
  ConcreteTaskDescriptor [MAX_LEN]  list4;
  int list4_sz;
  top_list4(ctds, ctds_sz, userLogin, ctds_sz, allowed, i_1, loop_0_2, ctds, list4,
            list4_sz);
  ConcreteTaskDescriptor [MAX_LEN]  list5;
  int list5_sz;
  select_list5(list4, list4_sz, userLogin, ctds_sz, allowed, i_1, loop_0_2, ctds,
               list5, list5_sz);
  return {| 
  allowed == agg_agg6(list5, list5_sz) |}; }
  else return 0; }


bit postcondition(int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2,
                  int flat_4, int flat_5_8, bit flat_6_9, ConcreteTaskDescriptor ctd_3_7,
                  ConcreteTaskDescriptor [MAX_LEN]  ctds) {
 ConcreteTaskDescriptor [MAX_LEN]  list7;
 int list7_sz;
 top_list7(ctds, ctds_sz, userLogin, ctds_sz, allowed, i_1, loop_0_2, flat_4, flat_5_8,
           flat_6_9, ctd_3_7, ctds, list7, list7_sz);
 ConcreteTaskDescriptor [MAX_LEN]  list8;
 int list8_sz;
 select_list8(list7, list7_sz, userLogin, ctds_sz, allowed, i_1, loop_0_2, flat_4,
              flat_5_8, flat_6_9, ctd_3_7, ctds, list8, list8_sz);
 return {| 
 allowed == agg_agg9(list8, list8_sz) |}; }


generator bit pred1 (int userLogin, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2)
{
  int rightOperand = {| ctds_sz | allowed | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return userLogin > rightOperand;
  else if (operator == 2) return userLogin <= rightOperand;
  else if (operator == 3) return userLogin < rightOperand;
  else if (operator == 4) return userLogin == rightOperand;
  else return userLogin >= rightOperand;
}


generator bit pred2 (int allowed, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2)
{
  int rightOperand = {| userLogin | ctds_sz | i_1 |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return allowed > rightOperand;
  else if (operator == 2) return allowed <= rightOperand;
  else if (operator == 3) return allowed < rightOperand;
  else if (operator == 4) return allowed == rightOperand;
  else return allowed >= rightOperand;
}


generator bit pred3 (int i_1, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2)
{
  int rightOperand = {| userLogin | ctds_sz | allowed |};
  int operator = ??;
  if (operator == 0) return 1;
  else if (operator == 1) return i_1 > rightOperand;
  else if (operator == 2) return i_1 <= rightOperand;
  else if (operator == 3) return i_1 < rightOperand;
  else if (operator == 4) return i_1 == rightOperand;
  else return i_1 >= rightOperand;
}


void top_list4 (ConcreteTaskDescriptor [MAX_LEN] ctds, int ctds_sz, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, ConcreteTaskDescriptor [MAX_LEN] ctds, ref ConcreteTaskDescriptor [MAX_LEN] list4, ref int list4_sz)
{
  list4_sz = {| userLogin | ctds_sz | allowed | i_1 |};
  list4 = ctds[0::list4_sz];
}


void select_list5 (ConcreteTaskDescriptor [MAX_LEN] list4, int list4_sz, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, ConcreteTaskDescriptor [MAX_LEN] ctds, ref ConcreteTaskDescriptor [MAX_LEN] list5, ref int list5_sz)
{
  list5_sz = 0;
  for (int i = 0; i < list4_sz; ++i)
  {
    if (select_list5_pred(list4[i], userLogin, ctds_sz, allowed, i_1, loop_0_2, ctds))
    {
      list5[list5_sz] = list4[i];
      ++list5_sz;
    }
  }
}
generator bit select_list5_pred (ConcreteTaskDescriptor tuple, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, ConcreteTaskDescriptor [MAX_LEN] ctds)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.login > ??(2);
      else if (operator0 == 2) pred0 = tuple.login <= ??(2);
      else if (operator0 == 3) pred0 = tuple.login < ??(2);
      else if (operator0 == 4) pred0 = tuple.login == ??(2);
      else if (operator0 == 5) pred0 = tuple.login == userLogin;
      else if (operator0 == 6) pred0 = tuple.login == allowed;
      else if (operator0 == 7) pred0 = tuple.login == i_1;
      else pred0 = tuple.login >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg6 (ConcreteTaskDescriptor [MAX_LEN] list5, int list5_sz)
{
  int count = list5_sz;
  int max_login = 0; int sum_login = 0; int min_login = 3; int avg_login = 0;
  for (int i = 0; i < list5_sz; ++i)
  {
    if (list5[i].login > max_login)
      max_login = list5[i].login;
    if (list5[i].login < min_login)
      min_login = list5[i].login;
    sum_login += list5[i].login;
  }
  avg_login = count==0?0: (sum_login / count); 
  return {| count | max_login | sum_login | min_login | avg_login |};
}


void top_list7 (ConcreteTaskDescriptor [MAX_LEN] ctds, int ctds_sz, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9, ConcreteTaskDescriptor ctd_3_7, ConcreteTaskDescriptor [MAX_LEN] ctds, ref ConcreteTaskDescriptor [MAX_LEN] list7, ref int list7_sz)
{
  list7_sz = {| userLogin | ctds_sz | allowed | i_1 | flat_4 | flat_5_8 |};
  list7 = ctds[0::list7_sz];
}


void select_list8 (ConcreteTaskDescriptor [MAX_LEN] list7, int list7_sz, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9, ConcreteTaskDescriptor ctd_3_7, ConcreteTaskDescriptor [MAX_LEN] ctds, ref ConcreteTaskDescriptor [MAX_LEN] list8, ref int list8_sz)
{
  list8_sz = 0;
  for (int i = 0; i < list7_sz; ++i)
  {
    if (select_list8_pred(list7[i], userLogin, ctds_sz, allowed, i_1, loop_0_2, flat_4, flat_5_8, flat_6_9, ctd_3_7, ctds))
    {
      list8[list8_sz] = list7[i];
      ++list8_sz;
    }
  }
}
generator bit select_list8_pred (ConcreteTaskDescriptor tuple, int userLogin, int ctds_sz, int allowed, int i_1, bit loop_0_2, int flat_4, int flat_5_8, bit flat_6_9, ConcreteTaskDescriptor ctd_3_7, ConcreteTaskDescriptor [MAX_LEN] ctds)
{
  if (tuple == null) return 0;
  else
  {
    bit out = 1;
    repeat (2)
    {
      bit pred0;
      int operator0 = ??;
      if (operator0 == 0) pred0 = 1;
      else if (operator0 == 1) pred0 = tuple.login > ??(2);
      else if (operator0 == 2) pred0 = tuple.login <= ??(2);
      else if (operator0 == 3) pred0 = tuple.login < ??(2);
      else if (operator0 == 4) pred0 = tuple.login == ??(2);
      else if (operator0 == 5) pred0 = tuple.login == userLogin;
      else if (operator0 == 6) pred0 = tuple.login == allowed;
      else if (operator0 == 7) pred0 = tuple.login == i_1;
      else if (operator0 == 8) pred0 = tuple.login == flat_4;
      else if (operator0 == 9) pred0 = tuple.login == flat_5_8;
      else if (operator0 == 10) pred0 = tuple.login == ctd_3_7.login;
      else pred0 = tuple.login >= ??(2);
      out = out && {| pred0 |};
    }
    return out;
  }
}


int agg_agg9 (ConcreteTaskDescriptor [MAX_LEN] list8, int list8_sz)
{
  int count = list8_sz;
  int max_login = 0; int sum_login = 0; int min_login = 3; int avg_login = 0;
  for (int i = 0; i < list8_sz; ++i)
  {
    if (list8[i].login > max_login)
      max_login = list8[i].login;
    if (list8[i].login < min_login)
      min_login = list8[i].login;
    sum_login += list8[i].login;
  }
  avg_login = count==0?0: (sum_login / count); 
  return {| count | max_login | sum_login | min_login | avg_login |};
}

