# 1 "<stdin>"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "<stdin>"
miniTest1.c::#include "miniTest1.h"
miniTest1.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest1.c:: {
miniTest1.c:: _out_0 = ((in[1] & 0) | (in[3] & 1));
miniTest1.c:: };
miniTest1.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest1.c:: _out_0 = in[3];
miniTest10.c::#include "miniTest10.h"
miniTest10.c::void foo(unsigned char* in, unsigned char& _out_0) {
miniTest10.c:: _out_0 = in[null];
miniTest10.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest10.c:: {
miniTest10.c:: unsigned char _frv_0;
miniTest10.c:: {
miniTest10.c:: unsigned char in[4] = in;
miniTest10.c:: {
miniTest10.c:: _out_0 = in[3];
miniTest10.c:: };
miniTest10.c:: _frv_0 = _out_0;
miniTest10.c:: };
miniTest10.c:: _out_0 = (_frv_0 ^ in[2]);
miniTest10.c:: };
miniTest10.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest10.c:: _out_0 = (in[2] ^ in[3]);
miniTest11.c::#include "miniTest11.h"
miniTest11.c::void moo(unsigned char* in, unsigned char* _out_0) {
miniTest11.c:: unsigned char tmp[2];
miniTest11.c:: tmp[0] = in[0];
miniTest11.c:: tmp[1] = in[2];
miniTest11.c:: _out_0 = tmp;
miniTest11.c::void foo(unsigned char* in, unsigned char& _out_0) {
miniTest11.c:: unsigned char _frv_0[2];
miniTest11.c:: moo(in, _frv_0);
miniTest11.c:: unsigned char tmp[2];
miniTest11.c:: tmp = _frv_0;
miniTest11.c:: _out_0 = tmp[1];
miniTest11.c:: ;
miniTest11.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest11.c:: unsigned char _frv_0;
miniTest11.c:: foo(in, _frv_0);
miniTest11.c:: _out_0 = _frv_0;
miniTest11.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest11.c:: _out_0 = in[2];
miniTest12.c::#include "miniTest12.h"
miniTest12.c::void foo(unsigned char* in, unsigned int& k, unsigned char& _out_0) {
miniTest12.c:: if ((k > 0)) {
miniTest12.c:: {
miniTest12.c:: unsigned char _frv_0;
miniTest12.c:: unsigned int _frv_1;
miniTest12.c:: _frv_1 = (k - 1);
miniTest12.c:: foo(in, _frv_1, _frv_0);
miniTest12.c:: _out_0 = _frv_0;
miniTest12.c:: };
miniTest12.c:: } else {
miniTest12.c:: {
miniTest12.c:: _out_0 = in[2];
miniTest12.c:: ;
miniTest12.c:: };
miniTest12.c:: }
miniTest12.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest12.c:: unsigned char _frv_0;
miniTest12.c:: unsigned int _frv_1;
miniTest12.c:: _frv_1 = 4;
miniTest12.c:: foo(in, _frv_1, _frv_0);
miniTest12.c:: _out_0 = _frv_0;
miniTest12.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest12.c:: _out_0 = in[2];
miniTest13.c::#include "miniTest13.h"
miniTest13.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest13.c:: {
miniTest13.c:: unsigned int i1;
miniTest13.c:: i1 = 2;
miniTest13.c:: unsigned int i2;
miniTest13.c:: i2 = 2;
miniTest13.c:: _out_0 = (in[(i1 * i2)] ^ in[i1]);
miniTest13.c:: };
miniTest13.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest13.c:: _out_0 = (in[4] ^ in[2]);
miniTest14.c::#include "miniTest14.h"
miniTest14.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest14.c:: {
miniTest14.c:: unsigned char t;
miniTest14.c:: t = 0;
miniTest14.c:: unsigned int i;
miniTest14.c:: i = 0;
miniTest14.c:: int __sa0 = 3;
miniTest14.c:: for (int __sa1 = 0; __sa1 < __sa0; ++__sa1) {
miniTest14.c:: t = in[i];
miniTest14.c:: i = (i + 1);
miniTest14.c:: };
miniTest14.c:: _out_0 = t;
miniTest14.c:: };
miniTest14.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest14.c:: _out_0 = in[2];
miniTest15.c::#include "miniTest15.h"
miniTest15.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest15.c:: {
miniTest15.c:: unsigned char tmp[2];
miniTest15.c:: tmp = 0;
miniTest15.c:: tmp[0] = 1;
miniTest15.c:: tmp[1] = 1;
miniTest15.c:: _out_0 = in[((unsigned int)(tmp))];
miniTest15.c:: };
miniTest15.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest15.c:: _out_0 = in[3];
miniTest16.c::#include "miniTest16.h"
miniTest16.c::void foo(unsigned char* in, unsigned char* _out_0) {
miniTest16.c:: _out_0 = in;
miniTest16.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest16.c:: in[0] = 0;
miniTest16.c:: unsigned char _frv_0[4];
miniTest16.c:: foo(in, _frv_0);
miniTest16.c:: _out_0 = _frv_0;
miniTest16.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest16.c:: in[0] = 0;
miniTest16.c:: _out_0 = in;
miniTest17.c::#include "miniTest17.h"
miniTest17.c::void foo(unsigned char* in, unsigned char* _out_0) {
miniTest17.c:: _out_0 = in;
miniTest17.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest17.c:: unsigned char _frv_0[10];
miniTest17.c:: foo(in, _frv_0);
miniTest17.c:: _out_0 = ((int[])(_frv_0));
miniTest17.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest17.c:: unsigned char tmp[5];
miniTest17.c:: tmp = 0;
miniTest17.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest17.c:: {
miniTest17.c:: tmp[i] = in[i];
miniTest17.c:: };
miniTest17.c:: };
miniTest17.c:: _out_0 = tmp;
miniTest18.c::#include "miniTest18.h"
miniTest18.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest18.c:: {
miniTest18.c:: unsigned char tmp[5];
miniTest18.c:: tmp = {0,1,0,0,0};
miniTest18.c:: unsigned char tmp2[2];
miniTest18.c:: tmp2 = {0,0};
miniTest18.c:: unsigned char __sa0[5];
miniTest18.c:: __sa0 = (tmp << ((unsigned int)(tmp2)));
miniTest18.c:: _out_0 = in[((unsigned int)(__sa0))];
miniTest18.c:: };
miniTest18.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest18.c:: _out_0 = in[2];
miniTest19.c::#include "miniTest19.h"
miniTest19.c::void foo(unsigned char* in, unsigned char* _out_0) {
miniTest19.c:: _out_0 = in;
miniTest19.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest19.c:: unsigned char _frv_0[4];
miniTest19.c:: unsigned char _frv_1[4];
miniTest19.c:: _frv_1 = 1;
miniTest19.c:: foo(_frv_1, _frv_0);
miniTest19.c:: _out_0 = (in ^ _frv_0);
miniTest19.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest19.c:: _out_0 = (in ^ 1);
miniTest2.c::#include "miniTest2.h"
miniTest2.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest2.c:: {
miniTest2.c:: unsigned char tmp[4];
miniTest2.c:: tmp = in;
miniTest2.c:: tmp[2] = 1;
miniTest2.c:: tmp[3] = 0;
miniTest2.c:: _out_0 = tmp[1];
miniTest2.c:: };
miniTest2.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest2.c:: _out_0 = in[1];
miniTest20.c::#include "miniTest20.h"
miniTest20.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest20.c:: {
miniTest20.c:: unsigned int fu[4] = {2,3,4,0};
miniTest20.c:: unsigned int idx1;
miniTest20.c:: idx1 = 2;
miniTest20.c:: unsigned int idx;
miniTest20.c:: idx = {2,3,4,0}[idx1];
miniTest20.c:: _out_0 = in[idx];
miniTest20.c:: };
miniTest20.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest20.c:: _out_0 = in[4];
miniTest21.c::#include "miniTest21.h"
miniTest21.c::void reverseSketch(unsigned char* in, unsigned char* in2, unsigned char& _out_0) {
miniTest21.c:: {
miniTest21.c:: unsigned int fu[8];
miniTest21.c:: unsigned int i = 0;
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[0] = 2;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[1] = 1;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[2] = 1;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[3] = 0;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[4] = 1;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[5] = 2;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[6] = 2;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: {
miniTest21.c:: {
miniTest21.c:: fu[7] = 0;
miniTest21.c:: };
miniTest21.c:: };
miniTest21.c:: unsigned int idx1;
miniTest21.c:: idx1 = ((unsigned int)(in));
miniTest21.c:: unsigned int idx;
miniTest21.c:: idx = fu[idx1];
miniTest21.c:: _out_0 = in2[idx];
miniTest21.c:: };
miniTest21.c::void reverse(unsigned char* in, unsigned char* in2, unsigned char& _out_0) {
miniTest21.c:: unsigned int fu[8] = {2,1,1,0,1,2,2,0};
miniTest21.c:: unsigned int idx1;
miniTest21.c:: idx1 = ((unsigned int)(in));
miniTest21.c:: unsigned int idx;
miniTest21.c:: idx = fu[idx1];
miniTest21.c:: _out_0 = in2[idx];
miniTest22.c::#include "miniTest22.h"
miniTest22.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest22.c:: {
miniTest22.c:: unsigned int x;
miniTest22.c:: if (1) {
miniTest22.c:: {
miniTest22.c:: x = 2;
miniTest22.c:: };
miniTest22.c:: } else {
miniTest22.c:: {
miniTest22.c:: x = 1;
miniTest22.c:: };
miniTest22.c:: }
miniTest22.c:: _out_0 = in[x];
miniTest22.c:: };
miniTest22.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest22.c:: _out_0 = in[2];
miniTest23.c::#include "miniTest23.h"
miniTest23.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest23.c:: unsigned int p[3] = {2,1,3};
miniTest23.c:: unsigned char out[3];
miniTest23.c:: for (unsigned int i = 0; (i < 3); ++i) {
miniTest23.c:: out[i] = in[(p[i] - 1)];
miniTest23.c:: };
miniTest23.c:: _out_0 = out;
miniTest23.c::void miniTestSK(unsigned char* x, unsigned char* _out_0) {
miniTest23.c:: {
miniTest23.c:: unsigned int tt;
miniTest23.c:: tt = 1;
miniTest23.c:: unsigned char __sa0[3];
miniTest23.c:: __sa0 = (x >> tt);
miniTest23.c:: unsigned char tmp2[3];
miniTest23.c:: tmp2 = ((__sa0 & {0,1,1}) | ((x << tt) & ~{0,1,1}));
miniTest23.c:: unsigned char tmp[3];
miniTest23.c:: tmp = ((tmp2 & {1,1,0}) | (x & ~{1,1,0}));
miniTest23.c:: _out_0 = tmp;
miniTest23.c:: };
miniTest24.c::#include "miniTest24.h"
miniTest24.c::void testSK(unsigned char* in, unsigned char& _out_0) {
miniTest24.c:: {
miniTest24.c:: unsigned int x;
miniTest24.c:: x = 3;
miniTest24.c:: unsigned int y;
miniTest24.c:: y = 2;
miniTest24.c:: if ((x > 2)) {
miniTest24.c:: {
miniTest24.c:: _out_0 = in[3];
miniTest24.c:: };
miniTest24.c:: } else {
miniTest24.c:: {
miniTest24.c:: _out_0 = in[(y * 2)];
miniTest24.c:: };
miniTest24.c:: }
miniTest24.c:: };
miniTest24.c::void test(unsigned char* in, unsigned char& _out_0) {
miniTest24.c:: _out_0 = in[3];
miniTest25.c::#include "miniTest25.h"
miniTest25.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest25.c:: in[0] = 1;
miniTest25.c:: _out_0 = (in ^ (in << 1));
miniTest25.c::void fu(unsigned char* x, unsigned char* _out_0) {
miniTest25.c:: x[0] = 1;
miniTest25.c:: _out_0 = x;
miniTest25.c::void miniTestSK(unsigned char* x, unsigned char* _out_0) {
miniTest25.c:: unsigned char _frv_0[3];
miniTest25.c:: fu(x, _frv_0);
miniTest25.c:: x = _frv_0;
miniTest25.c:: _out_0 = (x ^ (x << 1));
miniTest26.c::#include "miniTest26.h"
miniTest26.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest26.c:: unsigned char one[2] = {0,0};
miniTest26.c:: one[0] = 1;
miniTest26.c:: _out_0 = (in ^ one);
miniTest26.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest26.c:: {
miniTest26.c:: unsigned char one[2] = {0,0};
miniTest26.c:: one[0] = 1;
miniTest26.c:: _out_0 = (in ^ one);
miniTest26.c:: };
miniTest28.c::#include "miniTest28.h"
miniTest28.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest28.c:: unsigned char one[2] = {0,0};
miniTest28.c:: one[0] = 1;
miniTest28.c:: _out_0 = (in ^ one);
miniTest28.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest28.c:: {
miniTest28.c:: unsigned char tmp[2] = {0,0};
miniTest28.c:: tmp[1] = 1;
miniTest28.c:: unsigned char one[2];
miniTest28.c:: one = tmp;
miniTest28.c:: one[1] = 0;
miniTest28.c:: one[0] = 1;
miniTest28.c:: _out_0 = (in ^ one);
miniTest28.c:: };
miniTest29.c::#include "miniTest29.h"
miniTest29.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest29.c:: unsigned char one[2] = {0,0};
miniTest29.c:: one[0] = 1;
miniTest29.c:: unsigned char __sa0[3];
miniTest29.c:: __sa0 = (in >> 1);
miniTest29.c:: _out_0 = (__sa0 ^ one);
miniTest29.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest29.c:: {
miniTest29.c:: unsigned char __sa1[3];
miniTest29.c:: __sa1 = (in >> 1);
miniTest29.c:: unsigned char tmp[3];
miniTest29.c:: tmp = __sa1;
miniTest29.c:: unsigned char one[2] = {0,0};
miniTest29.c:: unsigned int _2L11 = 1;
miniTest29.c:: if ((_2L11 > 0)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 1;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 1)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 0;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 2)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 0;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 3)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 0;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 4)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 0;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 5)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 0;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 6)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 0;
miniTest29.c:: };
miniTest29.c:: if ((_2L11 > 7)) {
miniTest29.c:: {
miniTest29.c:: one[0] = 1;
miniTest29.c:: };
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: }
miniTest29.c:: _out_0 = (tmp ^ one);
miniTest29.c:: };
miniTest3.c::#include "miniTest3.h"
miniTest3.c::void simple(unsigned char* in, unsigned char* _out_0) {
miniTest3.c:: unsigned char i1[4];
miniTest3.c:: unsigned char x;
miniTest3.c:: x = 1;
miniTest3.c:: if (in[0]) {
miniTest3.c:: {
miniTest3.c:: x = 0;
miniTest3.c:: };
miniTest3.c:: }
miniTest3.c:: i1 = x;
miniTest3.c:: _out_0 = i1;
miniTest3.c::void simpler(unsigned char* in, unsigned char* _out_0) {
miniTest3.c:: _out_0 = !in[0];
miniTest30.c::#include "miniTest30.h"
miniTest30.c::void foo(unsigned int& i, unsigned int& j, unsigned int& _out_0) {
miniTest30.c:: _out_0 = ((i * 2) + j);
miniTest30.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest30.c:: unsigned int i;
miniTest30.c:: i = 0;
miniTest30.c:: unsigned int j;
miniTest30.c:: j = 1;
miniTest30.c:: unsigned int _frv_0;
miniTest30.c:: foo(j, i, _frv_0);
miniTest30.c:: _out_0 = in[_frv_0];
miniTest30.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest30.c:: {
miniTest30.c:: _out_0 = in[2];
miniTest30.c:: };
miniTest31.c::#include "miniTest31.h"
miniTest31.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest31.c:: unsigned char x;
miniTest31.c:: if (!in[0]) {
miniTest31.c:: {
miniTest31.c:: x = 1;
miniTest31.c:: };
miniTest31.c:: } else {
miniTest31.c:: {
miniTest31.c:: x = in[2];
miniTest31.c:: };
miniTest31.c:: }
miniTest31.c:: _out_0 = in[x];
miniTest31.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest31.c:: {
miniTest31.c:: unsigned char x;
miniTest31.c:: if (in[0]) {
miniTest31.c:: {
miniTest31.c:: x = in[2];
miniTest31.c:: };
miniTest31.c:: } else {
miniTest31.c:: {
miniTest31.c:: x = 1;
miniTest31.c:: };
miniTest31.c:: }
miniTest31.c:: _out_0 = in[x];
miniTest31.c:: };
miniTest32.c::#include "miniTest32.h"
miniTest32.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest32.c:: _out_0 = in[!in[0]];
miniTest32.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest32.c:: {
miniTest32.c:: unsigned char x;
miniTest32.c:: if (in[0]) {
miniTest32.c:: {
miniTest32.c:: x = in[1];
miniTest32.c:: };
miniTest32.c:: } else {
miniTest32.c:: {
miniTest32.c:: x = 1;
miniTest32.c:: };
miniTest32.c:: }
miniTest32.c:: _out_0 = in[x];
miniTest32.c:: };
miniTest33.c::#include "miniTest33.h"
miniTest33.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest33.c:: in[2] = 1;
miniTest33.c:: _out_0 = in;
miniTest33.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest33.c:: {
miniTest33.c:: in[2] = 1;
miniTest33.c:: _out_0 = in;
miniTest33.c:: };
miniTest34.c::#include "miniTest34.h"
miniTest34.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest34.c:: _out_0 = in[2];
miniTest34.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest34.c:: {
miniTest34.c:: unsigned int fu[3] = {0,1,3};
miniTest34.c:: fu[2] = 2;
miniTest34.c:: _out_0 = in[fu[2]];
miniTest34.c:: };
miniTest35.c::#include "miniTest35.h"
miniTest35.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest35.c:: _out_0 = in[2];
miniTest35.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest35.c:: {
miniTest35.c:: unsigned int fu[3] = {0,1,3};
miniTest35.c:: fu[2] = 2;
miniTest35.c:: _out_0 = in[fu[2]];
miniTest35.c:: };
miniTest36.c::#include "miniTest36.h"
miniTest36.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest36.c:: _out_0 = in[2];
miniTest36.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest36.c:: {
miniTest36.c:: unsigned int fu[3] = {0,1,3};
miniTest36.c:: fu[2] = 2;
miniTest36.c:: _out_0 = in[fu[2]];
miniTest36.c:: };
miniTest37.c::#include "miniTest37.h"
miniTest37.c::void miniTest(unsigned char* in, unsigned char& _out_0) {
miniTest37.c:: _out_0 = in[2];
miniTest37.c::void miniTestSK(unsigned char* in, unsigned char& _out_0) {
miniTest37.c:: {
miniTest37.c:: unsigned int fu[2] = {0,1};
miniTest37.c:: fu[0] = 2;
miniTest37.c:: _out_0 = in[fu[0]];
miniTest37.c:: };
miniTest38.c::#include "miniTest38.h"
miniTest38.c::void miniTest(unsigned char* in, unsigned char* in2, unsigned char* _out_0) {
miniTest38.c:: unsigned int i;
miniTest38.c:: i = ((unsigned int)(in2));
miniTest38.c:: in[i] = 1;
miniTest38.c:: _out_0 = in;
miniTest38.c::void miniTestSK(unsigned char* in, unsigned char* in2, unsigned char* _out_0) {
miniTest38.c:: {
miniTest38.c:: unsigned int i;
miniTest38.c:: i = ((unsigned int)(in2));
miniTest38.c:: in[i] = 1;
miniTest38.c:: _out_0 = in;
miniTest38.c:: };
miniTest39.c::#include "miniTest39.h"
miniTest39.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest39.c:: unsigned char mu[4] = {1,1,0,0};
miniTest39.c:: _out_0 = (in ^ mu);
miniTest39.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest39.c:: {
miniTest39.c:: unsigned char mu[4] = {0,0,0,1};
miniTest39.c:: unsigned int i;
miniTest39.c:: i = 0;
miniTest39.c:: int __sa2 = 2;
miniTest39.c:: for (int __sa3 = 0; __sa3 < __sa2; ++__sa3) {
miniTest39.c:: mu[i] = 1;
miniTest39.c:: i = (i + 1);
miniTest39.c:: };
miniTest39.c:: int __sa4 = 2;
miniTest39.c:: for (int __sa5 = 0; __sa5 < __sa4; ++__sa5) {
miniTest39.c:: mu[i] = 0;
miniTest39.c:: i = (i + 1);
miniTest39.c:: };
miniTest39.c:: _out_0 = (in ^ mu);
miniTest39.c:: };
miniTest4.c::#include "miniTest4.h"
miniTest4.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest4.c:: {
miniTest4.c:: unsigned char tmp[4];
miniTest4.c:: tmp = (in << 2);
miniTest4.c:: _out_0 = tmp[0];
miniTest4.c:: };
miniTest4.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest4.c:: _out_0 = in[2];
miniTest40.c::#include "miniTest40.h"
miniTest40.c::void transpose(unsigned char* input, unsigned char* _out_0) {
miniTest40.c:: unsigned char output[4];
miniTest40.c:: output = 0;
miniTest40.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest40.c:: {
miniTest40.c:: output[i] = input[i];
miniTest40.c:: };
miniTest40.c:: };
miniTest40.c:: _out_0 = output;
miniTest40.c::void tiledTranspose(unsigned char* input, unsigned char* _out_0) {
miniTest40.c:: {
miniTest40.c:: unsigned char output[4];
miniTest40.c:: output = 0;
miniTest40.c:: unsigned int i;
miniTest40.c:: i = 0;
miniTest40.c:: unsigned int _2L6 = 2;
miniTest40.c:: if ((_2L6 > 0)) {
miniTest40.c:: {
miniTest40.c:: unsigned int j;
miniTest40.c:: j = 0;
miniTest40.c:: if (1) {
miniTest40.c:: {
miniTest40.c:: output[0] = input[0];
miniTest40.c:: j = 1;
miniTest40.c:: output[1] = input[1];
miniTest40.c:: j = 2;
miniTest40.c:: };
miniTest40.c:: }
miniTest40.c:: i = 2;
miniTest40.c:: };
miniTest40.c:: if ((_2L6 > 1)) {
miniTest40.c:: {
miniTest40.c:: unsigned int j;
miniTest40.c:: j = 0;
miniTest40.c:: if (1) {
miniTest40.c:: {
miniTest40.c:: output[2] = input[2];
miniTest40.c:: j = 1;
miniTest40.c:: output[3] = input[3];
miniTest40.c:: j = 2;
miniTest40.c:: };
miniTest40.c:: }
miniTest40.c:: i = 4;
miniTest40.c:: };
miniTest40.c:: }
miniTest40.c:: }
miniTest40.c:: _out_0 = output;
miniTest40.c:: };
miniTest41.c::#include "miniTest41.h"
miniTest41.c::void transpose(unsigned char* input, unsigned char* _out_0) {
miniTest41.c:: unsigned char output[4];
miniTest41.c:: output = 0;
miniTest41.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest41.c:: {
miniTest41.c:: output[i] = input[i];
miniTest41.c:: };
miniTest41.c:: };
miniTest41.c:: _out_0 = output;
miniTest41.c::void tiledTranspose(unsigned char* input, unsigned char* _out_0) {
miniTest41.c:: {
miniTest41.c:: unsigned char output[4];
miniTest41.c:: output = 0;
miniTest41.c:: unsigned int i;
miniTest41.c:: i = 0;
miniTest41.c:: unsigned int it;
miniTest41.c:: it = 3;
miniTest41.c:: int __sa4 = 2;
miniTest41.c:: for (int __sa5 = 0; __sa5 < __sa4; ++__sa5) {
miniTest41.c:: unsigned int j;
miniTest41.c:: j = 0;
miniTest41.c:: int __sa6 = it;
miniTest41.c:: for (int __sa7 = 0; __sa7 < __sa6; ++__sa7) {
miniTest41.c:: output[(i + j)] = input[(i + j)];
miniTest41.c:: j = (j + 1);
miniTest41.c:: };
miniTest41.c:: i = (i + 2);
miniTest41.c:: };
miniTest41.c:: _out_0 = output;
miniTest41.c:: };
miniTest42.c::#include "miniTest42.h"
miniTest42.c::void sort(unsigned char* input, unsigned char* _out_0) {
miniTest42.c:: if (input[0]) {
miniTest42.c:: {
miniTest42.c:: input[2] = 1;
miniTest42.c:: };
miniTest42.c:: } else {
miniTest42.c:: {
miniTest42.c:: input[1] = 1;
miniTest42.c:: };
miniTest42.c:: }
miniTest42.c:: _out_0 = input;
miniTest42.c::void mergeSort(unsigned char* input, unsigned char* _out_0) {
miniTest42.c:: unsigned int k;
miniTest42.c:: k = 0;
miniTest42.c:: if (input[0]) {
miniTest42.c:: {
miniTest42.c:: k = (k + 1);
miniTest42.c:: };
miniTest42.c:: }
miniTest42.c:: k = (k + 1);
miniTest42.c:: input[k] = 1;
miniTest42.c:: _out_0 = input;
miniTest43.c::#include "miniTest43.h"
miniTest43.c::void leq(unsigned char& x, unsigned char& y, unsigned char& _out_0) {
miniTest43.c:: _out_0 = (!x || y);
miniTest43.c::void sort(unsigned char* input, unsigned char* _out_0) {
miniTest43.c:: unsigned char output[2];
miniTest43.c:: output = 0;
miniTest43.c:: unsigned char done[2];
miniTest43.c:: done = 0;
miniTest43.c:: unsigned int k;
miniTest43.c:: k = 0;
miniTest43.c:: for (unsigned int i = 0; (i < 2); ++i) {
miniTest43.c:: {
miniTest43.c:: unsigned char cur;
miniTest43.c:: cur = 1;
miniTest43.c:: for (unsigned int j = 0; (j < 2); ++j) {
miniTest43.c:: {
miniTest43.c:: unsigned char _frv_0;
miniTest43.c:: unsigned char _frv_1;
miniTest43.c:: _frv_1 = input[j];
miniTest43.c:: leq(_frv_1, cur, _frv_0);
miniTest43.c:: if ((_frv_0 && !done[j])) {
miniTest43.c:: {
miniTest43.c:: k = j;
miniTest43.c:: cur = input[j];
miniTest43.c:: };
miniTest43.c:: }
miniTest43.c:: };
miniTest43.c:: };
miniTest43.c:: output[i] = cur;
miniTest43.c:: done[k] = 1;
miniTest43.c:: };
miniTest43.c:: };
miniTest43.c:: _out_0 = output;
miniTest43.c::void mergeSort(unsigned char* input, unsigned char* _out_0) {
miniTest43.c:: unsigned char output[2];
miniTest43.c:: output = 1;
miniTest43.c:: if ((input[0] && input[1])) {
miniTest43.c:: {
miniTest43.c:: output[0] = 1;
miniTest43.c:: output[1] = 1;
miniTest43.c:: };
miniTest43.c:: }
miniTest43.c:: ;
miniTest43.c:: if ((!input[0] && input[1])) {
miniTest43.c:: {
miniTest43.c:: output[0] = 0;
miniTest43.c:: output[1] = 1;
miniTest43.c:: };
miniTest43.c:: }
miniTest43.c:: ;
miniTest43.c:: if ((input[0] && !input[1])) {
miniTest43.c:: {
miniTest43.c:: output[0] = 0;
miniTest43.c:: output[1] = 1;
miniTest43.c:: };
miniTest43.c:: }
miniTest43.c:: ;
miniTest43.c:: if ((!input[0] && !input[1])) {
miniTest43.c:: {
miniTest43.c:: output[0] = 0;
miniTest43.c:: output[1] = 0;
miniTest43.c:: };
miniTest43.c:: }
miniTest43.c:: ;
miniTest43.c:: _out_0 = output;
miniTest44.c::#include "miniTest44.h"
miniTest44.c::void leq(unsigned char& x, unsigned char& y, unsigned char& _out_0) {
miniTest44.c:: _out_0 = (!x || y);
miniTest44.c::void sort(unsigned char* input, unsigned char* _out_0) {
miniTest44.c:: unsigned char output[2];
miniTest44.c:: output = 1;
miniTest44.c:: if ((input[0] && input[1])) {
miniTest44.c:: {
miniTest44.c:: output[0] = 1;
miniTest44.c:: output[1] = 1;
miniTest44.c:: };
miniTest44.c:: }
miniTest44.c:: ;
miniTest44.c:: if ((!input[0] && input[1])) {
miniTest44.c:: {
miniTest44.c:: output[0] = 0;
miniTest44.c:: output[1] = 1;
miniTest44.c:: };
miniTest44.c:: }
miniTest44.c:: ;
miniTest44.c:: if ((input[0] && !input[1])) {
miniTest44.c:: {
miniTest44.c:: output[0] = 0;
miniTest44.c:: output[1] = 1;
miniTest44.c:: };
miniTest44.c:: }
miniTest44.c:: ;
miniTest44.c:: if ((!input[0] && !input[1])) {
miniTest44.c:: {
miniTest44.c:: output[0] = 0;
miniTest44.c:: output[1] = 0;
miniTest44.c:: };
miniTest44.c:: }
miniTest44.c:: ;
miniTest44.c:: _out_0 = output;
miniTest44.c::void mergeSort(unsigned char* input, unsigned char* _out_0) {
miniTest44.c:: unsigned char output[2];
miniTest44.c:: output = 1;
miniTest44.c:: unsigned int k;
miniTest44.c:: k = 0;
miniTest44.c:: for (unsigned int i = 0; (i < 2); ++i) {
miniTest44.c:: {
miniTest44.c:: if (!input[i]) {
miniTest44.c:: {
miniTest44.c:: output[k] = 0;
miniTest44.c:: k = (k + 1);
miniTest44.c:: };
miniTest44.c:: }
miniTest44.c:: };
miniTest44.c:: };
miniTest44.c:: _out_0 = output;
miniTest45.c::#include "miniTest45.h"
miniTest45.c::void leq(unsigned char& x, unsigned char& y, unsigned char& _out_0) {
miniTest45.c:: _out_0 = (!x || y);
miniTest45.c::void mergeSort(unsigned char* input, unsigned char& _out_0) {
miniTest45.c:: unsigned char output;
miniTest45.c:: output = 1;
miniTest45.c:: unsigned char done[3];
miniTest45.c:: done = 0;
miniTest45.c:: unsigned int k;
miniTest45.c:: k = 0;
miniTest45.c:: if (!input[2]) {
miniTest45.c:: {
miniTest45.c:: k = 2;
miniTest45.c:: };
miniTest45.c:: } else {
miniTest45.c:: {
miniTest45.c:: if (!input[1]) {
miniTest45.c:: {
miniTest45.c:: k = 1;
miniTest45.c:: };
miniTest45.c:: } else {
miniTest45.c:: {
miniTest45.c:: if (!input[0]) {
miniTest45.c:: {
miniTest45.c:: k = 0;
miniTest45.c:: };
miniTest45.c:: } else {
miniTest45.c:: {
miniTest45.c:: k = 2;
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: done[k] = 1;
miniTest45.c:: {
miniTest45.c:: unsigned char cur;
miniTest45.c:: cur = 1;
miniTest45.c:: for (unsigned int j = 0; (j < 3); ++j) {
miniTest45.c:: {
miniTest45.c:: unsigned char _frv_0;
miniTest45.c:: unsigned char _frv_1;
miniTest45.c:: _frv_1 = input[j];
miniTest45.c:: leq(_frv_1, cur, _frv_0);
miniTest45.c:: if ((_frv_0 && !done[j])) {
miniTest45.c:: {
miniTest45.c:: cur = input[j];
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: };
miniTest45.c:: };
miniTest45.c:: output = cur;
miniTest45.c:: };
miniTest45.c:: _out_0 = output;
miniTest45.c::void sort(unsigned char* input, unsigned char& _out_0) {
miniTest45.c:: unsigned char output;
miniTest45.c:: output = 1;
miniTest45.c:: if (((input[0] && input[1]) && input[2])) {
miniTest45.c:: {
miniTest45.c:: output = 1;
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: ;
miniTest45.c:: if (((((!input[0] && input[1]) && input[2]) || ((input[0] && !input[1]) && input[2])) || ((input[0] && input[1]) && !input[2]))) {
miniTest45.c:: {
miniTest45.c:: output = 1;
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: ;
miniTest45.c:: if (((((input[0] && !input[1]) && !input[2]) || ((!input[0] && input[1]) && !input[2])) || ((!input[0] && !input[1]) && input[2]))) {
miniTest45.c:: {
miniTest45.c:: output = 0;
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: ;
miniTest45.c:: if (((!input[0] && !input[1]) && !input[2])) {
miniTest45.c:: {
miniTest45.c:: output = 0;
miniTest45.c:: };
miniTest45.c:: }
miniTest45.c:: ;
miniTest45.c:: _out_0 = output;
miniTest46.c::#include "miniTest46.h"
miniTest46.c::void leq(unsigned char& x, unsigned char& y, unsigned char& _out_0) {
miniTest46.c:: _out_0 = (!x || y);
miniTest46.c::void mergeSort(unsigned char* input, unsigned char& _out_0) {
miniTest46.c:: unsigned char output;
miniTest46.c:: output = 1;
miniTest46.c:: unsigned int k;
miniTest46.c:: k = 0;
miniTest46.c:: {
miniTest46.c:: if (!input[0]) {
miniTest46.c:: {
miniTest46.c:: k = (k + 1);
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: };
miniTest46.c:: {
miniTest46.c:: if (!input[1]) {
miniTest46.c:: {
miniTest46.c:: if ((k > 0)) {
miniTest46.c:: {
miniTest46.c:: output = 0;
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: k = (k + 1);
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: };
miniTest46.c:: {
miniTest46.c:: if (!input[2]) {
miniTest46.c:: {
miniTest46.c:: if (((k > 0) && (k < 2))) {
miniTest46.c:: {
miniTest46.c:: output = 0;
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: k = (k + 1);
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: };
miniTest46.c:: _out_0 = output;
miniTest46.c::void sort(unsigned char* input, unsigned char& _out_0) {
miniTest46.c:: unsigned char output;
miniTest46.c:: output = 1;
miniTest46.c:: if (((input[0] && input[1]) && input[2])) {
miniTest46.c:: {
miniTest46.c:: output = 1;
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: ;
miniTest46.c:: if (((((!input[0] && input[1]) && input[2]) || ((input[0] && !input[1]) && input[2])) || ((input[0] && input[1]) && !input[2]))) {
miniTest46.c:: {
miniTest46.c:: output = 1;
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: ;
miniTest46.c:: if (((((input[0] && !input[1]) && !input[2]) || ((!input[0] && input[1]) && !input[2])) || ((!input[0] && !input[1]) && input[2]))) {
miniTest46.c:: {
miniTest46.c:: output = 0;
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: ;
miniTest46.c:: if (((!input[0] && !input[1]) && !input[2])) {
miniTest46.c:: {
miniTest46.c:: output = 0;
miniTest46.c:: };
miniTest46.c:: }
miniTest46.c:: ;
miniTest46.c:: _out_0 = output;
miniTest47.c::#include "miniTest47.h"
miniTest47.c::void sort(unsigned char* input, unsigned char& _out_0) {
miniTest47.c:: unsigned char k;
miniTest47.c:: k = 1;
miniTest47.c:: if (input[0]) {
miniTest47.c:: k = 0;
miniTest47.c:: }
miniTest47.c:: k = (k & input[0]);
miniTest47.c:: unsigned int x;
miniTest47.c:: x = 3;
miniTest47.c:: if (k) {
miniTest47.c:: x = 2;
miniTest47.c:: }
miniTest47.c:: _out_0 = input[x];
miniTest47.c::void MergeSort(unsigned char* input, unsigned char& _out_0) {
miniTest47.c:: _out_0 = input[3];
miniTest48.c::#include "miniTest48.h"
miniTest48.c::void leq(unsigned char& x, unsigned char& y, unsigned char& _out_0) {
miniTest48.c:: _out_0 = (!x || y);
miniTest48.c::void sort(unsigned char* input, unsigned char* _out_0) {
miniTest48.c:: unsigned char output[4];
miniTest48.c:: output = 0;
miniTest48.c:: unsigned char done[4];
miniTest48.c:: done = 0;
miniTest48.c:: unsigned int k;
miniTest48.c:: k = 0;
miniTest48.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest48.c:: {
miniTest48.c:: unsigned char cur;
miniTest48.c:: cur = 1;
miniTest48.c:: for (unsigned int j = 0; (j < 4); ++j) {
miniTest48.c:: {
miniTest48.c:: unsigned char _frv_0;
miniTest48.c:: unsigned char _frv_1;
miniTest48.c:: _frv_1 = input[j];
miniTest48.c:: leq(_frv_1, cur, _frv_0);
miniTest48.c:: if ((_frv_0 && !done[j])) {
miniTest48.c:: {
miniTest48.c:: k = j;
miniTest48.c:: cur = input[j];
miniTest48.c:: };
miniTest48.c:: }
miniTest48.c:: };
miniTest48.c:: };
miniTest48.c:: output[i] = cur;
miniTest48.c:: done[k] = 1;
miniTest48.c:: };
miniTest48.c:: };
miniTest48.c:: _out_0 = output;
miniTest48.c::void MergeSort(unsigned char* input, unsigned char* _out_0) {
miniTest48.c:: {
miniTest48.c:: unsigned char output[4];
miniTest48.c:: unsigned char __sa0[4];
miniTest48.c:: __sa0 = (input >> 0);
miniTest48.c:: output = ((__sa0 & {1,1,1,0}) | ((input << 0) & ~{1,1,1,0}));
miniTest48.c:: unsigned char _frv_0[4];
miniTest48.c:: sort(output, _frv_0);
miniTest48.c:: _out_0 = _frv_0;
miniTest48.c:: };
miniTest49.c::#include "miniTest49.h"
miniTest49.c::void intToBit(unsigned int& v, unsigned char* _out_0) {
miniTest49.c:: unsigned char output[4];
miniTest49.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest49.c:: {
miniTest49.c:: output[i] = ((v % 2) > 0);
miniTest49.c:: v = (v / 2);
miniTest49.c:: };
miniTest49.c:: };
miniTest49.c:: _out_0 = output;
miniTest49.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest49.c:: {
miniTest49.c:: unsigned char tmp[4];
miniTest49.c:: tmp = {1,1,0,0};
miniTest49.c:: _out_0 = (in + tmp);
miniTest49.c:: };
miniTest49.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest49.c:: unsigned int tmp[16] = {3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2};
miniTest49.c:: unsigned char _frv_0[4];
miniTest49.c:: unsigned int _frv_1;
miniTest49.c:: _frv_1 = tmp[((unsigned int)(in))];
miniTest49.c:: intToBit(_frv_1, _frv_0);
miniTest49.c:: _out_0 = _frv_0;
miniTest5.c::#include "miniTest5.h"
miniTest5.c::void foo(unsigned char* ina, unsigned char& _out_0) {
miniTest5.c:: _out_0 = ina[null];
miniTest5.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest5.c:: {
miniTest5.c:: unsigned char _frv_0;
miniTest5.c:: {
miniTest5.c:: unsigned char ina[4] = in;
miniTest5.c:: {
miniTest5.c:: _out_0 = ina[3];
miniTest5.c:: };
miniTest5.c:: _frv_0 = _out_0;
miniTest5.c:: };
miniTest5.c:: unsigned char _frv_1;
miniTest5.c:: {
miniTest5.c:: unsigned char ina[4] = in;
miniTest5.c:: {
miniTest5.c:: _out_0 = ina[2];
miniTest5.c:: };
miniTest5.c:: _frv_1 = _out_0;
miniTest5.c:: };
miniTest5.c:: _out_0 = (_frv_0 ^ _frv_1);
miniTest5.c:: };
miniTest5.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest5.c:: _out_0 = (in[2] ^ in[3]);
miniTest50.c::#include "miniTest50.h"
miniTest50.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest50.c:: {
miniTest50.c:: unsigned int t;
miniTest50.c:: t = 0;
miniTest50.c:: if (in[0]) {
miniTest50.c:: {
miniTest50.c:: t = 7;
miniTest50.c:: };
miniTest50.c:: } else {
miniTest50.c:: {
miniTest50.c:: t = 6;
miniTest50.c:: };
miniTest50.c:: }
miniTest50.c:: _out_0 = in[(t % 5)];
miniTest50.c:: };
miniTest50.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest50.c:: unsigned int t;
miniTest50.c:: t = 0;
miniTest50.c:: if (in[0]) {
miniTest50.c:: {
miniTest50.c:: t = 5;
miniTest50.c:: };
miniTest50.c:: } else {
miniTest50.c:: {
miniTest50.c:: t = 4;
miniTest50.c:: };
miniTest50.c:: }
miniTest50.c:: _out_0 = in[(t % 3)];
miniTest51.c::#include "miniTest51.h"
miniTest51.c::void reverseSketch(unsigned char* in, unsigned char* in2, unsigned char& _out_0) {
miniTest51.c:: {
miniTest51.c:: unsigned int fu[8];
miniTest51.c:: unsigned int i = 0;
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[0] = 0;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[1] = 1;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[2] = 2;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[3] = 2;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[4] = 2;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[5] = 2;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[6] = 2;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: {
miniTest51.c:: {
miniTest51.c:: fu[7] = 2;
miniTest51.c:: };
miniTest51.c:: };
miniTest51.c:: unsigned int idx1;
miniTest51.c:: idx1 = ((unsigned int)(in));
miniTest51.c:: unsigned int idx;
miniTest51.c:: idx = fu[idx1];
miniTest51.c:: _out_0 = in2[idx];
miniTest51.c:: };
miniTest51.c::void reverse(unsigned char* in, unsigned char* in2, unsigned char& _out_0) {
miniTest51.c:: unsigned int idx1;
miniTest51.c:: idx1 = ((unsigned int)(in));
miniTest51.c:: unsigned int idx;
miniTest51.c:: idx = idx1;
miniTest51.c:: if ((idx1 > 2)) {
miniTest51.c:: {
miniTest51.c:: idx = 2;
miniTest51.c:: };
miniTest51.c:: }
miniTest51.c:: _out_0 = in2[idx];
miniTest52.c::#include "miniTest52.h"
miniTest52.c::void intToBit(unsigned int& v, unsigned char* _out_0) {
miniTest52.c:: unsigned char output[4];
miniTest52.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest52.c:: {
miniTest52.c:: output[i] = ((v % 2) > 0);
miniTest52.c:: v = (v / 2);
miniTest52.c:: };
miniTest52.c:: };
miniTest52.c:: _out_0 = output;
miniTest52.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest52.c:: {
miniTest52.c:: unsigned char out[4];
miniTest52.c:: unsigned char Ta[64];
miniTest52.c:: Ta = {1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,1,1,1,1,0,1};
miniTest52.c:: unsigned char Tb[64];
miniTest52.c:: Tb = {0,0,1,1,1,1,0,1,0,1,0,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,1,1,1,0,1,1};
miniTest52.c:: unsigned char a[4];
miniTest52.c:: unsigned char b[4];
miniTest52.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest52.c:: {
miniTest52.c:: a[i] = in[i];
miniTest52.c:: b[i] = in[(4 + i)];
miniTest52.c:: };
miniTest52.c:: };
miniTest52.c:: unsigned int inva;
miniTest52.c:: inva = ((unsigned int)(a));
miniTest52.c:: unsigned int invb;
miniTest52.c:: invb = ((unsigned int)(b));
miniTest52.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest52.c:: {
miniTest52.c:: out[i] = (Ta[((inva * 4) + i)] ^ Tb[((invb * 4) + i)]);
miniTest52.c:: };
miniTest52.c:: };
miniTest52.c:: _out_0 = out;
miniTest52.c:: };
miniTest52.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest52.c:: unsigned int tmp[16] = {3,4,5,6,7,8,9,10,11,12,13,14,15,0,1,2};
miniTest52.c:: unsigned char a[4];
miniTest52.c:: unsigned char b[4];
miniTest52.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest52.c:: {
miniTest52.c:: a[i] = in[i];
miniTest52.c:: b[i] = in[(4 + i)];
miniTest52.c:: };
miniTest52.c:: };
miniTest52.c:: unsigned char _frv_0[4];
miniTest52.c:: unsigned int _frv_1;
miniTest52.c:: _frv_1 = tmp[((unsigned int)(a))];
miniTest52.c:: intToBit(_frv_1, _frv_0);
miniTest52.c:: unsigned char out[4];
miniTest52.c:: out = _frv_0;
miniTest52.c:: unsigned char _frv_2[4];
miniTest52.c:: unsigned int _frv_3;
miniTest52.c:: _frv_3 = tmp[((unsigned int)(b))];
miniTest52.c:: intToBit(_frv_3, _frv_2);
miniTest52.c:: unsigned char __sa0[4];
miniTest52.c:: __sa0 = (out >> 1);
miniTest52.c:: _out_0 = (__sa0 ^ _frv_2);
miniTest53.c::#include "miniTest53.h"
miniTest53.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest53.c:: unsigned char tmp[3] = {0,1,1};
miniTest53.c:: _out_0 = (in ^ tmp);
miniTest53.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest53.c:: {
miniTest53.c:: unsigned char tmp[3] = {0,0,0};
miniTest53.c:: unsigned char two[2];
miniTest53.c:: two = {1,1};
miniTest53.c:: unsigned char __sa0[2];
miniTest53.c:: __sa0 = two;
miniTest53.c:: tmp[1::2] = __sa0;
miniTest53.c:: _out_0 = (in ^ tmp);
miniTest53.c:: };
miniTest54.c::#include "miniTest54.h"
miniTest54.c::void tableSum(unsigned char* in1, unsigned char* in2, unsigned char* _out_0) {
miniTest54.c:: {
miniTest54.c:: unsigned int exp;
miniTest54.c:: exp = 16;
miniTest54.c:: unsigned char tmp[512];
miniTest54.c:: tmp = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
miniTest54.c:: unsigned char output[32];
miniTest54.c:: unsigned char input[4];
miniTest54.c:: unsigned char __sa0[2];
miniTest54.c:: __sa0 = in1;
miniTest54.c:: input[0::2] = __sa0;
miniTest54.c:: unsigned char __sa1[2];
miniTest54.c:: __sa1 = in2;
miniTest54.c:: input[2::2] = __sa1;
miniTest54.c:: unsigned int idx;
miniTest54.c:: idx = ((unsigned int)(input));
miniTest54.c:: unsigned char __sa2[32];
miniTest54.c:: __sa2 = tmp[(idx * 32)::32];
miniTest54.c:: output = __sa2;
miniTest54.c:: _out_0 = output;
miniTest54.c:: };
miniTest54.c::void sum(unsigned char* in1, unsigned char* in2, unsigned char* _out_0) {
miniTest54.c:: _out_0 = (in1 + in2);
miniTest55.c::#include "miniTest55.h"
miniTest55.c::void miniTest(unsigned char* in, unsigned char* _out_0) {
miniTest55.c:: unsigned char tmp[3] = {0,1,0};
miniTest55.c:: _out_0 = (in ^ tmp);
miniTest55.c::void miniTestSK(unsigned char* in, unsigned char* _out_0) {
miniTest55.c:: {
miniTest55.c:: unsigned char tmp[3] = {0,0,0};
miniTest55.c:: unsigned char two[5];
miniTest55.c:: two = {1,0,1,1,1};
miniTest55.c:: unsigned char __sa0[2];
miniTest55.c:: __sa0 = two[0::2];
miniTest55.c:: unsigned char __sa1[2];
miniTest55.c:: __sa1 = __sa0;
miniTest55.c:: tmp[1::2] = __sa1;
miniTest55.c:: _out_0 = (in ^ tmp);
miniTest55.c:: };
miniTest56.c::#include "miniTest56.h"
miniTest56.c::void isIT(unsigned char* in, unsigned char& _out_0) {
miniTest56.c:: unsigned char ret;
miniTest56.c:: ret = 1;
miniTest56.c:: for (unsigned int i = 0; (i < 32); i++) {
miniTest56.c:: ret = (ret & !in[i]);
miniTest56.c:: };
miniTest56.c:: _out_0 = ret;
miniTest56.c::void normalRoundsk(unsigned char* in, unsigned char* _out_0) {
miniTest56.c:: {
miniTest56.c:: unsigned char output[32];
miniTest56.c:: output = 0;
miniTest56.c:: unsigned char _frv_0;
miniTest56.c:: isIT(in, _frv_0);
miniTest56.c:: if (_frv_0) {
miniTest56.c:: {
miniTest56.c:: output = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
miniTest56.c:: };
miniTest56.c:: }
miniTest56.c:: _out_0 = output;
miniTest56.c:: };
miniTest56.c::void normalRound(unsigned char* in, unsigned char* _out_0) {
miniTest56.c:: unsigned char output[32];
miniTest56.c:: output = 0;
miniTest56.c:: unsigned char _frv_0;
miniTest56.c:: isIT(in, _frv_0);
miniTest56.c:: if (_frv_0) {
miniTest56.c:: {
miniTest56.c:: output = 1;
miniTest56.c:: };
miniTest56.c:: }
miniTest56.c:: _out_0 = output;
miniTest6.c::#include "miniTest6.h"
miniTest6.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest6.c:: {
miniTest6.c:: _out_0 = ((in + {0,1,0,0}) + in);
miniTest6.c:: };
miniTest6.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest6.c:: unsigned char tmp[4] = {0,1,0,0};
miniTest6.c:: _out_0 = ((in + tmp) + in);
miniTest7.c::#include "miniTest7.h"
miniTest7.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest7.c:: {
miniTest7.c:: unsigned char tmp1[4] = {0,0,1,0};
miniTest7.c:: _out_0 = ((in + {1,0,1,0}) + {0,0,1,0});
miniTest7.c:: };
miniTest7.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest7.c:: unsigned char tmp1[4] = {0,1,1,0};
miniTest7.c:: unsigned char tmp2[4] = {1,1,0,0};
miniTest7.c:: _out_0 = ((in + tmp1) + tmp2);
miniTest7small.c::#include "miniTest7small.h"
miniTest7small.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest7small.c:: {
miniTest7small.c:: unsigned char tmp1[2] = {1,0};
miniTest7small.c:: _out_0 = (in + ({1,1} ^ {1,0}));
miniTest7small.c:: };
miniTest7small.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest7small.c:: unsigned char tmp1[2] = {1,0};
miniTest7small.c:: unsigned char tmp2[2] = {1,1};
miniTest7small.c:: _out_0 = (in + (tmp1 ^ tmp2));
miniTest8.c::#include "miniTest8.h"
miniTest8.c::void mult(unsigned char* in1, unsigned char* in2, unsigned char* _out_0) {
miniTest8.c:: unsigned char result[4];
miniTest8.c:: result = 0;
miniTest8.c:: for (unsigned int i = 0; (i < 4); ++i) {
miniTest8.c:: {
miniTest8.c:: if ((in2[i] == 1)) {
miniTest8.c:: {
miniTest8.c:: result = (result + in1);
miniTest8.c:: };
miniTest8.c:: }
miniTest8.c:: unsigned char __sa0[4];
miniTest8.c:: __sa0 = (in1 >> 1);
miniTest8.c:: in1 = __sa0;
miniTest8.c:: };
miniTest8.c:: };
miniTest8.c:: _out_0 = result;
miniTest8.c::void reverseSketch(unsigned char* in, unsigned char* _out_0) {
miniTest8.c:: {
miniTest8.c:: unsigned char tmp[4];
miniTest8.c:: tmp = {1,1,0,0};
miniTest8.c:: unsigned char _frv_0[4];
miniTest8.c:: mult(in, tmp, _frv_0);
miniTest8.c:: _out_0 = _frv_0;
miniTest8.c:: };
miniTest8.c::void reverse(unsigned char* in, unsigned char* _out_0) {
miniTest8.c:: _out_0 = ((in + in) + in);
miniTest9.c::#include "miniTest9.h"
miniTest9.c::void reverseSketch(unsigned char* in, unsigned char& _out_0) {
miniTest9.c:: {
miniTest9.c:: unsigned char __sa0[4];
miniTest9.c:: __sa0 = (in >> 1);
miniTest9.c:: in = __sa0;
miniTest9.c:: in = (in << 1);
miniTest9.c:: unsigned char __sa1[4];
miniTest9.c:: __sa1 = (in >> 1);
miniTest9.c:: in = __sa1;
miniTest9.c:: _out_0 = in[3];
miniTest9.c:: };
miniTest9.c::void reverse(unsigned char* in, unsigned char& _out_0) {
miniTest9.c:: _out_0 = in[2];
