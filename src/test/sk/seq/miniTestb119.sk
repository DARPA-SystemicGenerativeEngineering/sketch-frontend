int W = 8;
bit[W] compressSketch(bit[W] x, bit[W] mask) implements compress
{
    int s = 1;
	int n = 1;
	x = x & mask;
	bit[W] inter_mask;
	inter_mask = getMask(x,n);
	for(n=1;(int)inter_mask != 0;n++)
	{
		inter_mask = getMask(x, n);
		x = maskedShift(x, inter_mask, s);
		mask = (inter_mask >> s)|(mask&!inter_mask);
		s *= 2;
	}
      	return x;
}


bit[W] getMask(bit[W] x, int n)
{
	bit[W] mk=0;
	bit[W] mp=0;
	bit[W] mv=0;
	int i;
	mk = (!x) << 1;
	for (int i = 0;i<n;i++)
	{
		mp = xor_sketch(mk);
		mk = mk & !mp;
	}
	mv = mp & x;
	return mv;
}

bit[W] maskedShift(bit[W] in, bit[W] mask, int s)
{
        bit[W] t;
        t = in & mask;
        t = (in ^ t) | t >> s;
        return t;
}

bit[W] xor_sketch(bit[W] x) 
{
        bit[W] y=0;
	x = x ^ (x << 1);
	x = x ^ (x << 2);
	x = x ^ (x << 4);
        return x;
}

bit[W] compress(bit[W] x, bit[W] mask)
{
        int i=0;
        bit[W] out = 0;
        for(int j=0; j<W; ++j)
        {
                if(mask[j])
                {
                        out[i] = x[j]; i = i+1;
                }
        }
        return out;
}

