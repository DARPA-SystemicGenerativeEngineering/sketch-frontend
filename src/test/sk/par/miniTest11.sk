struct Node{
	int val;
	Node next;
}

struct Queue{
	Node prevHead;
	Node tail;	
}


Queue newQueue(){
	Queue q = new Queue();
	q.prevHead = new Node();
	q.prevHead.next = null;
	q.tail = q.prevHead;	
	return q;
}


void enqueue(Queue q, int i){
	Node n = null;
	atomic{
		n = new Node();
	}
	n.val = i;
	n.next = null;
	Node ot = null;
	atomic{
		ot = q.tail;
		q.tail = n; 
	}
	ot.next = n;
}

int dequeue(Queue q){
	Node n = q.prevHead;
	if(n.next != null){
		q.prevHead = n.next;
		return q.prevHead.val;	
	}else{
		return -1;	
	}
}

bit test(bit in){	
	return 1;
}

bit testSK(bit in) implements test{
	Queue q = newQueue();
	enqueue(q, 5);
	fork(int i; 2){
		if(i==0){
				enqueue(q, 6);
		}else{
				enqueue(q, 7);
		}
	}
	int i1 = dequeue(q);
	int i2 = dequeue(q);
	int i3 = dequeue(q);
	assert i1 == 5 && ( (i2 == 6 && i3 == 7) || (i2 == 7 && i3 == 6));
	return 1;
}

