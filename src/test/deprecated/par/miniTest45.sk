// This currently fails, but it shouldn't.

// Return statements are translated so that a return can be called anywhere
// within any block, and the later code is protected appropriately.

int LEN = 2;

struct Queue {
    Node prevHead;
}

struct Node {
    Node next;
    bit taken;
}

generator Node dequeue (Queue q) { /* automatically rewritten */
    Node tmp = null;
    bit wasTaken = 1;

    for (int i = 0; i < LEN; ++i) {
        tmp = q.prevHead.next;
        if (null == tmp) {
            return null;
        }

        q.prevHead = tmp;
        atomic {
            wasTaken = tmp.taken;
            tmp.taken = 1;
        }
        if (0 == wasTaken) {
            return tmp;
        }
    }
    assert 0;
}

bit T () { return 1; }
bit main () implements T {
    Queue q = new Queue ();
    q.prevHead = new Node ();
    q.prevHead.taken = 1;

    q.prevHead.next = new Node ();
    q.prevHead.next.taken = 0;
    q.prevHead.next.next = null;

    fork (int i; 2) {
        dequeue (q);
    }

    return 1;
}
