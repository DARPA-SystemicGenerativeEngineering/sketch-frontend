struct Node{
	int val;
	Node next;
}

struct Queue{
	Node prevHead;
	Node tail;
}


generator Queue newQueue(){ /* automatically rewritten */
	Queue q = new Queue();
	q.prevHead = new Node();
	q.prevHead.next = null;
	q.tail = q.prevHead;
	return q;
}

generator Node baseQ(Queue q){ /* automatically rewritten */
	if(??){
		return q.tail;
	}else{
		return q.prevHead;
	}
	return null;
}

generator Node someNext(Node n){ /* automatically rewritten */
	if(??){
		return n;
	}else{
		Node t= someNext(n);
		return t.next;
	}
	return null;
}

generator Node gen(Queue q){ /* automatically rewritten */
	Node n = baseQ(q); // -> ( q.tail | q.prevHead );
	return someNext(n);	// ( q.tail | q.prevHead)(.next)*
}

generator void enqueue(Queue q, int i){ /* automatically rewritten */
	Node n =new Node();
	n.val = i;
	n.next = null;

	Node ot = null;
	reorder{
		ot.next = n;
		atomic{
			ot = gen(q);
			q.tail = n;
		}
	}
}

generator int dequeue(Queue q){ /* automatically rewritten */
	Node n = q.prevHead;
	if(n.next != null){
		q.prevHead = n.next;
		return q.prevHead.val;
	}else{
		return -1;
	}
}

bit test(bit in){
	return 1;
}

bit testSK(bit in) implements test{
	Queue q = newQueue();
	enqueue(q, 5);
	fork(int i; 2){
		if(i==0){
				enqueue(q, 6);
		}else{
				enqueue(q, 7);
		}
	}
	int i1 = dequeue(q);
	int i2 = dequeue(q);
	int i3 = dequeue(q);
	assert i1 == 5 && ( (i2 == 6 && i3 == 7) || (i2 == 7 && i3 == 6));
	return 1;
}

