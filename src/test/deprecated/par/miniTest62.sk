pragma options "--debug-verbosity 5";

generator bit await (barrier b, bit relPhase) { /* automatically rewritten */
    int lastCount;
    lastCount = 0;
    bit tmp;
    tmp = relPhase;

    tmp = !relPhase;

    atomic {
        lastCount = b.yetToArrive;
        b.yetToArrive = (b.yetToArrive)-(1);
    }
    if (false || !((lastCount+??) == ??)) {
        atomic((tmp)==(b.phase)) { }
    } else {
        b.yetToArrive = 3;
        b.phase = !(b.phase);
    }

    relPhase = tmp;

    return relPhase;
}

struct barrier {
    int yetToArrive;
    bit phase;
}

generator int leftNeighbor(int t) { return ((t)==(0) ? 2 : (t)-(1)); } /* automatically rewritten */

bit test() { return 1; }
bit sketch() implements test {
    bit[3][2] reached;
    reached = 0;
    barrier b;
    b = newBarrier();

    fork(int threadId; 3) {
        bit relPhase;
        relPhase = 0;
        for(int t=0;(t)<(2);++t) {
            atomic {
                if ((t)>(0))
                    assert (reached[(t)-(1)][leftNeighbor(threadId)]);
                reached[t][threadId] = 1;
            }
            relPhase = await(b, relPhase);
        }
    }
    return 1;
}

generator barrier newBarrier() { /* automatically rewritten */
  barrier b;
  b = new barrier();
  b.yetToArrive = 3;
  b.phase = ??;
  return b;
}
