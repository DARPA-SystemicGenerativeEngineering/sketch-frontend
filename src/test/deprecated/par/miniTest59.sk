struct Node {
    int key;
    Node next;
}

generator Node newNode (int key, Node next) { /* automatically rewritten */
    Node n = new Node ();
    n.key = key;
    n.next = next;
    return n;
}

generator Node genNode (Node n1, Node n2) { /* automatically rewritten */
    Node g = ?? ? n1 : n2;
    return ?? ? g : g.next;
}
bit genComparison (Node n1, Node n2) { /* automatically rewritten */
    Node g1 = genNode (n1, n2), g2 = genNode (n1, n2);
    return g1 != g2;
}

void find (Node head, int key, ref Node prev, ref Node cur) { /* automatically rewritten */
    prev = null;
    cur = head;
    lock (cur);
    while (cur.key < key) {
        if (genComparison (prev, null)) {
            unlock (genNode (prev, cur));
        }
        lock (cur.next);
        prev = cur;
        cur = cur.next;
    }
}

bit T () { return 1; }
bit main () implements T {
    Node head = newNode (-1, newNode (4, null));

    // add (1)
    Node p = null, c = head;
    find (head, 1, p, c);
    p.next = newNode (1, c);
    unlock (p);  unlock (c);

    // add (2)
    find (head, 2, p, c);
    p.next = newNode (2, c);
    unlock (p);  unlock (c);

    fork (int i; 2) {
        Node p = null, c = null;
        find (head, i+1, p, c);
        unlock (p);  unlock (c);
    }

    return 1;
}
