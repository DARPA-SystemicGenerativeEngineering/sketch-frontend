int N;

bit[2*N][2*N][2*N] MGinter(bit[N][N][N] in, bit half, bit fourth, bit eight){

	bit[2*N][2*N][2*N]  output=0;
	for(int i=0; i<2*N-1; ++i){
		for(int j=0; j<2*N-1; ++j){
		for(int k=0; k<2*N-1; ++k){
		 if( i%2==0 && j%2==0 && k%2==0) output[i][j][k] = in[i/2][j/2][k/2];
		 
		 if( i%2==1 && j%2==0 && k%2==0) output[i][j][k] = 
		 									half & (in[i/2][j/2][k/2] ^ in[i/2+1][j/2][k/2]);
		 if( i%2==0 && j%2==1 && k%2==0) output[i][j][k] = 
		 									half & (in[i/2][j/2][k/2] ^ in[i/2][j/2+1][k/2]);
		 if( i%2==0 && j%2==0 && k%2==1) output[i][j][k] = 
		 									half & (in[i/2][j/2][k/2] ^ in[i/2][j/2][k/2+1]);
		 
		 if( i%2==1 && j%2==1 && k%2==0) output[i][j][k] = 
		 									fourth & 
		 									(in[i/2][j/2][k/2] ^ in[i/2+1][j/2+1][k/2] ^
		 										in[i/2][j/2+1][k/2] ^ in[i/2+1][j/2][k/2]);
		 if( i%2==0 && j%2==1 && k%2==1) output[i][j][k] = 
		 									fourth & 
		 									(in[i/2][j/2][k/2] ^ in[i/2][j/2+1][k/2+1] ^
		 										in[i/2][j/2+1][k/2] ^ in[i/2][j/2][k/2+1]
		 									);
		 									
		 if( i%2==1 && j%2==0 && k%2==1) output[i][j][k] = 
		 									fourth & 
		 									(in[i/2][j/2][k/2] ^ in[i/2+1][j/2][k/2+1] ^
		 										in[i/2+1][j/2][k/2] ^ in[i/2][j/2][k/2+1]
		 									);
		 if( i%2==1 && j%2==1 && k%2==1) output[i][j][k] = 
		 									eight & 
		 									(in[i/2][j/2][k/2] ^ in[i/2+1][j/2][k/2] ^
		 										in[i/2][j/2+1][k/2] ^ in[i/2][j/2][k/2+1] ^
		 										in[i/2+1][j/2+1][k/2] ^ in[i/2][j/2+1][k/2+1] ^
		 										in[i/2+1][j/2][k/2+1] ^ in[i/2+1][j/2+1][k/2+1]
		 									);
		}
		}
	}
	return output;
}






bit[2*N][2*N][2*N] skMGinter(bit[N][N][N] in, bit half, bit fourth, bit eight)implements MGinter
{

	bit[2*N][2*N][2*N]  output=0;
	for(int i=??; i<N-??; ++i){
		for(int j=??; j<N-??; ++j){
			bit[N+1] z1 = 0;
			bit[N+1] z2 = 0;
			bit[N+1] z3 = 0;				
			for(int k=??; k<N+??; ++k){
				z1[k+??] = 0;
				z2[k+??] = 0;
				z3[k+??] = 0;
				if(??){
					z1[k+??] = z1[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z1[k+??] = z1[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z1[k+??] = z1[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z2[k+??] = z2[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z2[k+??] = z2[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z2[k+??] = z2[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z3[k+??] = z3[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z3[k+??] = z3[k+??] ^ in[k+??][j+??][i+??];
				}
				if(??){
					z3[k+??] = z3[k+??] ^ in[k+??][j+??][i+??];
				}
				z3[k+??] =  z3[k+??] ^ z1[k+??];
			}
			for(int k=??; k<N+??; ++k){
				output[k*2+??][j*2+??][i*2+??] = in[k+??][j+??][i+??]; //
				output[k*2+??][j*2+??][i*2+??] = 
				((half&??) | (fourth&??) | (eight&??)) & ( in[k+??][j+??][i+??] ^ in[k+??][j+??][i+??] );
			}
			for(int k=??; k<N+??; ++k){
				output[k*2+??][j*2+??][i*2+??] = ((half&??) | (fourth&??) | (eight&??)) & z1[k+??]; //
				output[k*2+??][j*2+??][i*2+??] = ((half&??) | (fourth&??) | (eight&??)) & (z1[k+??] ^ z1[k+??]);
			}
			for(int k=??; k<N+??; ++k){
				output[k*2+??][j*2+??][i*2+??] = ((half&??) | (fourth&??) | (eight&??)) & z2[k+??]; //
				output[k*2+??][j*2+??][i*2+??] = ((half&??) | (fourth&??) | (eight&??)) & (z2[k+??] ^ z2[k+??]);
			}
			for(int k=??; k<N+??; ++k){
				output[k*2+??][j*2+??][i*2+??] = ((half&??) | (fourth&??) | (eight&??)) & z3[k+??]; //
				output[k*2+??][j*2+??][i*2+??] = ((half&??) | (fourth&??) | (eight&??)) & (z3[k+??] ^ z3[k+??]);
			}
		}
	}
	return output;
}





