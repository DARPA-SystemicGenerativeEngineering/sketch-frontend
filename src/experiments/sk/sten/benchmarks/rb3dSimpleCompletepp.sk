int N;

float[N][N][N] rbGaussSeidel(float[N][N][N] in, float ce, float no, float so, float ea, float we, float up, float bot){

 float[N][N][N] tmp=0;
 float[N][N][N] output=0;
 if( N%2 == 0){

  for(int i=1; i<N-1; ++i){
   for(int j=1; j<N-1; ++j){
    for(int k=1; k<N-1; ++k){
     if(i%2==1 ^ j%2==1 ^ k%2==1 ){
      tmp[k][j][i] = ( ce*in[k][j][i]) + (
      no*in[k][j][i-1]) + (so*in[k][j][i+1]) + (ea*in[k][j+1][i]) + (we*in[k][j-1][i])+ (up*in[k+1][j][i])+ (bot*in[k-1][j][i]);
     }
    }
   }
  }

  for(int i=1; i<N-1; ++i){
   for(int j=1; j<N-1; ++j){
    for(int k=1; k<N-1; ++k){
     if(!(i%2==1 ^ j%2==1 ^ k%2==1 )){
      output[k][j][i] = ( ce*in[k][j][i]) + (
      no*tmp[k][j][i-1]) + (so*tmp[k][j][i+1]) + (ea*tmp[k][j+1][i]) + (we*tmp[k][j-1][i])+ (up*tmp[k+1][j][i])+ (bot*tmp[k-1][j][i]);
     }else{
      output[k][j][i] = tmp[k][j][i];
     }
    }
   }
  }
 }
 return output;
}





float[N][N][N] rbGaussSeidelSK(float[N][N][N] in, float ce, float no, float so, float ea, float we, float up, float bot) implements rbGaussSeidel{
 float[N][N][N] bigO=0;
 if( N%2 == 0){
  float[N][N][N] output=0;
  for(int i=??; i<N/2-??; ++i){
   for(int j=??; j<N/2-??; ++j){
    for(int k=??; k<N/2-??; ++k){

     {int tc = 2*k-1; int ta=2*j-0; int tb=2*i-0; output[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*in[tc][ta][tb-1] ) + (so*in[tc][ta][tb+1]) + (ea*in[tc][ta+1][tb]) + (we*in[tc][ta-1][tb] )+ (up*in[tc+1][ta][tb])+ (bot*in[tc-1][ta][tb]); };
     {int tc = 2*k-0; int ta=2*j-1; int tb=2*i-0; output[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*in[tc][ta][tb-1] ) + (so*in[tc][ta][tb+1]) + (ea*in[tc][ta+1][tb]) + (we*in[tc][ta-1][tb] )+ (up*in[tc+1][ta][tb])+ (bot*in[tc-1][ta][tb]); };
     {int tc = 2*k-0; int ta=2*j-0; int tb=2*i-1; output[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*in[tc][ta][tb-1] ) + (so*in[tc][ta][tb+1]) + (ea*in[tc][ta+1][tb]) + (we*in[tc][ta-1][tb] )+ (up*in[tc+1][ta][tb])+ (bot*in[tc-1][ta][tb]); };
     {int tc = 2*k-1; int ta=2*j-1; int tb=2*i-1; output[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*in[tc][ta][tb-1] ) + (so*in[tc][ta][tb+1]) + (ea*in[tc][ta+1][tb]) + (we*in[tc][ta-1][tb] )+ (up*in[tc+1][ta][tb])+ (bot*in[tc-1][ta][tb]); };
    }
   }
  }
  float[N][N][N] output2=output;
  for(int i=??; i<N/2-??; ++i){
   for(int j=??; j<N/2-??; ++j){
    for(int k=??; k<N/2-??; ++k){

     {int tc = 2*k-0; int ta=2*j-1; int tb=2*i-1; output2[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*output[tc][ta][tb-1] ) + (so*output[tc][ta][tb+1]) + (ea*output[tc][ta+1][tb]) + (we*output[tc][ta-1][tb] )+ (up*output[tc+1][ta][tb])+ (bot*output[tc-1][ta][tb]); };
     {int tc = 2*k-1; int ta=2*j-0; int tb=2*i-1; output2[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*output[tc][ta][tb-1] ) + (so*output[tc][ta][tb+1]) + (ea*output[tc][ta+1][tb]) + (we*output[tc][ta-1][tb] )+ (up*output[tc+1][ta][tb])+ (bot*output[tc-1][ta][tb]); };
     {int tc = 2*k-1; int ta=2*j-1; int tb=2*i-0; output2[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*output[tc][ta][tb-1] ) + (so*output[tc][ta][tb+1]) + (ea*output[tc][ta+1][tb]) + (we*output[tc][ta-1][tb] )+ (up*output[tc+1][ta][tb])+ (bot*output[tc-1][ta][tb]); };
     {int tc = 2*k-0; int ta=2*j-0; int tb=2*i-0; output2[tc][ta][tb] = ( ce*in[tc][ta][tb]) + ( no*output[tc][ta][tb-1] ) + (so*output[tc][ta][tb+1]) + (ea*output[tc][ta+1][tb]) + (we*output[tc][ta-1][tb] )+ (up*output[tc+1][ta][tb])+ (bot*output[tc-1][ta][tb]); };
    }
   }
  }

  bigO = output2;
 }
 return bigO;
}
