int N;

bit[N][N] rbGaussSeidel(bit[N][N] in, bit[N][N] f,  bit ce, bit no, bit so, bit ea, bit we){

	bit[N][N]  tmp=0;
	bit[N][N]  output=0;
	//red
	for(int i=1; i<N-1; ++i){
		for(int j=1; j<N-1; ++j){
			if(i%2 == j%2){
				tmp[j][i] = (f[j][i] ) ^ ( ce&in[j][i]) ^ (
				no&in[j][i-1]) ^ (so&in[j][i+1]) ^ (ea&in[j+1][i]) ^ (we&in[j-1][i]);
			} 		
		}		
	}
	//black
	for(int i=1; i<N-1; ++i){
		for(int j=1; j<N-1; ++j){
			if(!(i%2 == j%2)){
				output[j][i] = ( f[j][i] ) ^ ( ce&in[j][i]) ^ (
				no&tmp[j][i-1]) ^ (so&tmp[j][i+1]) ^ (ea&tmp[j+1][i]) ^ (we&tmp[j-1][i] );
			}else{
				output[j][i] = tmp[j][i];
			}
		}		
	}
	return output;
}


#define F(dst, a, b, ar ) { int ta=a; int tb=b; dst[ta][tb] = f[ta][tb] ^ ( ce&in[ta][tb]) ^ (	no&ar[ta][tb-1] ) ^ (so&ar[ta][tb+1]) ^ (ea&ar[ta+1][tb]) ^ (we&ar[ta-1][tb] ); }


bit[N][N] rbGaussSeidelSK(bit[N][N] in, bit[N][N] f,  bit ce, bit no, bit so, bit ea, bit we) implements rbGaussSeidel{
	bit[N][N]  bigO=0;
	if( N%2 == 0){
		bit[N][N]  output=0;
		for(int i=??; i<N/2-??; ++i){
			for(int j=??; j<N/2-??; ++j){
				//First the reds
				F(output, 2*j-??, 2*i-??, in);
				F(output, 2*j-??, 2*i-??, in);
			}
		}

		for(int i=??; i<N/2-??; ++i){
			for(int j=??; j<N/2-??; ++j){
				//Then the blacks
				F(output, 2*j-??, 2*i-??, output);
				F(output, 2*j-??, 2*i-??, output);
			}
		}

		bigO = output;
	}else{
		bit[N][N]  output=0;
		bit[N][N]  tmp=0;
		for(int i=1; i<N-1; ++i){
			for(int j=1; j<N-1; ++j){
				if(i%2 == j%2){
					tmp[j][i] = (f[j][i] ) ^ ( ce&in[j][i]) ^ (
					no&in[j][i-1]) ^ (so&in[j][i+1]) ^ (ea&in[j+1][i]) ^ (we&in[j-1][i]);
				} 		
			}		
		}
		//black
		for(int i=1; i<N-1; ++i){
			for(int j=1; j<N-1; ++j){
				if(!(i%2 == j%2)){
					output[j][i] = ( f[j][i] ) ^ ( ce&in[j][i]) ^ (
					no&tmp[j][i-1]) ^ (so&tmp[j][i+1]) ^ (ea&tmp[j+1][i]) ^ (we&tmp[j-1][i] );
				}else{
					output[j][i] = tmp[j][i];
				}
			}		
		}
		bigO = output;
	}
	return bigO;
}
