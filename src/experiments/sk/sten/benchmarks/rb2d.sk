int N;

bit[N][N] rbGaussSeidel(bit[N][N] in, bit[N][N] f,  bit ce, bit no, bit so, bit ea, bit we){

	bit[N][N]  tmp=0;
	bit[N][N]  output=0;
	//red
	for(int i=1; i<N-1; ++i){
		for(int j=1; j<N-1; ++j){
			if(i%2 == j%2){
				tmp[i][j] = (f[i][j] ) ^ ( ce&in[i][j]) ^ (
				no&in[i-1][j]) ^ (so&in[i+1][j]) ^ (ea&in[i][j+1]) ^ (we&in[i][j-1]);
			} 		
		}		
	}
	//black
	for(int i=1; i<N-1; ++i){
		for(int j=1; j<N-1; ++j){
			if(!(i%2 == j%2)){
				output[i][j] = ( f[i][j] ) ^ ( ce&in[i][j]) ^ (
				no&tmp[i-1][j]) ^ (so&tmp[i+1][j]) ^ (ea&tmp[i][j+1]) ^ (we&tmp[i][j-1] );
			}else{
				output[i][j] = tmp[i][j];
			}
		}		
	}
	return output;
}


#define F(dst, a, b, ar ) { int ta; ta=a; int tb; tb=b; dst[a][b] = f[ta][tb] ^ ( ce&in[ta][tb]) ^ (	no&ar[ta-1][tb] ) ^ (so&ar[ta+1][tb]) ^ (ea&ar[ta][tb+1]) ^ (we&ar[ta][tb-1] ); }


bit[N][N] rbGaussSeidelSK(bit[N][N] in, bit[N][N] f,  bit ce, bit no, bit so, bit ea, bit we) implements rbGaussSeidel{

	bit[N][N]  O1=0;	
	for(int j=1; j<N/2; ++j){
			//First the reds
			F(O1, ??, 2*j-1, in);
			F(O1, ??, 2*j, in);
	}
	bit[N][N]  O2;
	O2=O1;
	if( N % 2 == 1){
			//First the reds
			F(O2, ??, N-??, in);
			F(O2, ??, N-??, in);
	}
	bit[N][N] O3;
	O3 = O2;
	for(int i=??; i<N/2; ++i){
		for(int j=??; j<N/2; ++j){
			//First the reds
			F(O3, 2*i-1, 2*j-1, in);
			F(O3, 2*i, 2*j, in);
			//Then the blacks
			F(O3, 2*i-1-2, 2*j, O3);
			F(O3, 2*i-2, 2*j-1, O3);
		}		
		if( N % 2 == 1){
			//First the reds
			F(O3, 2*i-1, N-??, in);
			//Then the blacks
			F(O3, 2*i-2, N-??, O3);				
		}
	}
	bit[N][N] O4;
	O4 = O3;
	if( N % 2 == 1){
		for(int j=1; j<N-1; ++j){
			if((N-??)%2 == j%2){
				F(O4, N-??, j, in);
			}else{
				F(O4, N-??, j, O4);
			}	
		}
	}
	bit[N][N] O5;
	O5 = O4;
	for(int j=1; j<N/2; ++j){
			//Then the blacks
			F(O5, N-??, 2*j-1, O5);
			F(O5, N-??, 2*j, O5);
	}	
	if( N % 2 == 1){
		//Then the blacks
		F(O5, N-??, N-??, O5);				
	}	
	return O5;
}







