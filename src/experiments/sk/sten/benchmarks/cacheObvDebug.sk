int N_0;
float[N_0][3] cacheObv1dSK(float[N_0] in_1) implements cacheObv1d
{
  float[N_0][3] out_4=0;
  if((N_0)>=(3))
  {
    for(int i_5=0;(i_5)<(N_0);++i_5)
    {
      out_4[0][i_5] = in_1[i_5];
    }
    float[N_0][3] out_6=out_4;
    for(int i_7=2;(i_7)<(N_0);++i_7)
    {
      for(int t_8=1;(t_8)<(i_7);++t_8)
      {
        out_6[t_8][(i_7)-(t_8)] = ((out_4[(t_8)-(1)][((i_7)-(t_8))-(1)])+(out_4[(t_8)-(1)][((i_7)-(t_8))+(1)]));
      }
    }
    float[N_0][3] outold_9=out_6;
    float[N_0][3] out_10=outold_9;
    for(int i_12=0;(i_12)<((N_0)+(1));++i_12)
    {
      for(int t_13=2;(t_13)<(i_12);++t_13)
      {
        out_10[t_13][(i_12)-(t_13)] = ((outold_9[(t_13)-(1)][((i_12)-(t_13))-(1)])+(outold_9[(t_13)-(1)][((i_12)-(t_13))+(1)]));
      }
    }
    out_4 = out_10;
  }
  else
  {
    float[N_0][3] out_14=0;
    for(int i_15=0;(i_15)<(N_0);++i_15)
    {
      out_14[0][i_15] = in_1[i_15];
    }
    for(int t_16=1;(t_16)<(3);++t_16)
    {
      out_14[t_16][0] = 0;
      out_14[t_16][(N_0)-(1)] = 0;
      for(int i_17=1;(i_17)<((N_0)-(1));++i_17)
      {
        out_14[t_16][i_17] = ((out_14[(t_16)-(1)][(i_17)-(1)])+(out_14[(t_16)-(1)][(i_17)+(1)]));
      }
    }
    out_4 = out_14;
  }
  return out_4;
}


float[N_0][3] cacheObv1d(float[N_0] in_1)
{
  float[N_0][3] out_4=0;
  for(int i_5=0;(i_5)<(N_0);++i_5)
  {
    out_4[0][i_5] = in_1[i_5];
  }
  for(int t_6=1;(t_6)<(3);++t_6)
  {
    out_4[t_6][0] = 0;
    out_4[t_6][(N_0)-(1)] = 0;
    for(int i_7=1;(i_7)<((N_0)-(1));++i_7)
    {
      out_4[t_6][i_7] = ((out_4[(t_6)-(1)][(i_7)-(1)])+(out_4[(t_6)-(1)][(i_7)+(1)]));
    }
  }
  return out_4;
}


