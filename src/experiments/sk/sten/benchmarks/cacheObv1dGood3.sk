int N;
int T=3;

float[N][T] timeSkew1d(float[N] in, float[N][T] f){

	float[N][T]	out = 0;
	
	for(int i=0; i<N; ++i){
		out[0][i] = in[i];
	}
	int t=1;
	loop(T-1){
		out[t][0] = 0;
		out[t][N-1] = 0;
		for(int i=1; i<N-1; ++i){
			out[t][i] = out[t-1][i-1] + out[t-1][i+1] + f[t][i];
			
		}
		t = t+1;
	}
	return out;	
}

generator int linexp(int i, int j, int k){ /* automatically rewritten */
	int rv = ??-2;
	if(??){ if(??){ rv = rv + i;  }else{ rv = rv - i; }}
	if(??){ if(??){ rv = rv + j;  }else{ rv = rv - j; }}
	if(??){ if(??){ rv = rv + k;  }else{ rv = rv - k; }}
	return rv;
}



float[N][T] timeSkew1dSK(float[N] in, float[N][T] f) implements timeSkew1d{	
	float[N][T]	out = 0;
	if(N>=3){
		int M = T;
		for(int i=0; i<N; ++i){
			out[0][i] = in[i];
		}
		for(int i=linexp(0, N, T); i<linexp(0, N, T); ++i){
			for(int t=linexp(i, N, T); t<linexp(i, N, T); ++t){
				out[t][i-t] = out[t-1][i-t-1] + out[t-1][i-t+1] + f[t][i-t];
			}
		}
		
		for(int i=linexp(0, N, T); i<linexp(0, N, T); ++i){
			for(int t=linexp(i, N, T); t<linexp(i, N, T); ++t){
				out[t][i-t] = out[t-1][i-t-1] + out[t-1][i-t+1] + f[t][i-t];
			}
		}
		for(int i=linexp(0, N, T); i<linexp(0, N, T); ++i){
			for(int t=linexp(i, N, T); t<linexp(i, N, T); ++t){
				out[t][i-t] = out[t-1][i-t-1] + out[t-1][i-t+1] + f[t][i-t];
			}
		}		
	}else{
		out = timeSkew1dSK(in, f);
	}
	return out;	
}