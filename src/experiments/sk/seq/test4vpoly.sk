
int WW = 6;
int W = WW/2;
int WWWW =  WW+WW;

bit [W+1] sub(bit[W+1] in1, bit[W+1] in2){
	bit [W+1] one = 0; one[0] = 1;
	bit[W+1] result=in1 + ((in2 ^ 1)+ one);
	return result;
}

bit[WWWW] minus(bit[WWWW] in){
	bit [WWWW] one = 0; one[0] = 1;
	return ((in ^ 1)+ one);
}


bit[WW+1] multiplyHalf (bit[W+1] in1, bit[W+1] in2) 
{	
	bit [W] one = 0; one[0] = 1;
	bit sgn1 = in1[W];
	if(sgn1){ in1 = ((in1 ^ 1)+ one); }
	bit sgn2 = in2[W];
	if(sgn2){ in2 = ((in2 ^ 1)+ one); ; }

	bit[WW+1] result = 0;
	bit[WW+1] in1w=in1;
		
	for(int i=0; i<W; ++i){
		if(in2[i]==1){
			result = result + in1w;
		}
		in1w = in1w << 1;
	}
	
	if(sgn1 ^ sgn2){
		result = ((result^1)+one);
	}	
	return result;
}

bit[WW+1] poly(int n, bit[W+1] x0,bit[W+1] x1,bit[W+1] x2,bit[W+1] x3) {
if (n<=0){
 return {*};
}else{
return   multiplyHalf(x0,(bit[W+1]) poly(n-1,x0,x1,x2,x3)) + 
		multiplyHalf(x1, (bit[W+1])poly(n-1,x0,x1,x2,x3)) + 
       multiplyHalf(x2, (bit[W+1])poly(n-1,x0,x1,x2,x3)) + 
       multiplyHalf(x3, (bit[W+1])poly(n-1,x0,x1,x2,x3)) + 
	{*};
}
}


bit [WWWW] sel(bit[WWWW] in1, bit[WWWW] in2){
	bit c = {*};
	return (in1 & c) | (in2 & !c);
}

bit[WW+1] poly2(int n, bit[W+1] x0,bit[W+1] x1,bit[W+1] x2,bit[W+1] x3) {
if (n<=0){
 return {*};
}else{
return  multiplyHalf( ((bit[W+1])(  sel(sel(x0,  minus(x0)), 0) 
		+ sel(sel(x1,  minus(x1)), 0)
		+ sel(sel(x2,  minus(x2)), 0)
		+ sel(sel(x3,  minus(x3)), 0))), (bit[W+1])poly(n-1, x0,x1, x2, x3));
}
}

bit[WW+1] sketch(bit[W] x0,bit[W] x1,bit[W] x2,bit[W] x3) implements spec{
	return poly2(2, x0, x1, x2, x3);
}


bit[WW+1] spec(bit[W] x0,bit[W] x1,bit[W] x2,bit[W] x3){
	return multiplyHalf(sub(x1,x0), sub(x3,x2));
}


