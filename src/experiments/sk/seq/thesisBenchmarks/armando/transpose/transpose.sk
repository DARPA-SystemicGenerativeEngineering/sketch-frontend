/**
 * @author Mark Murphy mjmurphy@eecs.berkeley.edu
 * modified by sketch developers (fixed transpose specification)
 */

int[16] transpose(int[16] mx) {
    int x, y;
    int[16] result = 0;
    for (x = 0; x < 4; x++)
        for (y = 0; y < 4; y++)
            result[4*x+y] = mx[4*y+x];
    return result;
}

/*
 * SHUFPS uses the immediate to as four 2-bit values, which index a
 * 128-bit register, which has 4 32-bit values packed in it. xmm1
 * and xmm2 are the input arguments; the output will have two of
 * xmm1's values, followed by two of xmm2's values.
 */
int[4] shufps(int[4] xmm1, int[4] xmm2, bit[8] imm8){
    int[4] ret;

    ret[0] = xmm1[(int)imm8[0::2]];
    ret[1] = xmm1[(int)imm8[2::2]];
    ret[2] = xmm2[(int)imm8[4::2]];
    ret[3] = xmm2[(int)imm8[6::2]];

    return ret;
}

int[16] sse_transpose(int[16] mx) implements transpose {
    int[16] p0 = 0;
    int[16] p1 = 0;

    // for faster sketch resolution, hardcode the loop ??'s to 4
    loop (??) {
        p0[??::4] = shufps(mx[??::4], mx[??::4], ??);
    }
    loop (??) {
        p1[??::4] = shufps(p0[??::4], p0[??::4], ??);
    }

    return p1;
}
