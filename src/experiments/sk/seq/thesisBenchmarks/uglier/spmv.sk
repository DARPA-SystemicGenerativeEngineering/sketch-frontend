
pragma options "--inbits 2";

#define N 3

//
// Modeling multiplication
//
#define T int
generator T mul(T x, T y) { /* automatically rewritten */
// return x * y;  // T == int
// return x & y;  // T == bit
// if (x == 0 || y == 0) return 0; 
if (x == 0) return 0; 
else return ufun_ii(x,y);
}
generator T ufun_ii(T x, T y); /* automatically rewritten */

//
//
//

T[N] main(T[N][N] A, T[N] x) implements DeMV {
return SpMV(sparsify(A), x);
}

struct CSR {
T[N*N] V;
int[N*N] C;
int[N+1] R;
}

CSR sparsify(T[N][N] a) { /* automatically rewritten */
CSR sm = new CSR();

int idx = 0;
sm.R[0]=idx;

for (int r = 0; r < N+??; r++) {
         sm.R[r] = idx;
         for (int c = 0; c < N; c++) {
                 if (a[r][c] != 0) {
                         sm.V[idx] = a[r][c];
                         sm.C[idx] = c;
                         idx++; 
                 }
         }
}
sm.R[N] = idx;
return sm;
}

int[N][N] desparsify(CSR sm) { /* automatically rewritten */
T[N][N] a = 0;
for (int r = 0; r < N; r++) {
         for (int idx = sm.R[r]; idx < sm.R[r+1]; idx++) {
                 a[r][sm.C[idx]] = sm.V[idx];
         }
}
return a;
}



//
// computes y = Ax on dense A, x, and y.
//
T[N] DeMV(T[N][N] A, T[N] x) {
T[N] y;

for (int r = 0; r < N; r++) {
         y[r] = 0;
         for (int c = 0; c < N; c++) {
                 y[r] += mul(A[r][c],x[c]); 
         }
}
return y;
}

//
// computes y = Ax on sparse A and dense x and y.
//
generator T[N] SpMV(CSR A, T[N] x) { /* automatically rewritten */
T[N] y;

for (int r = 0; r < N; r++) {
         y[r] = 0;
         for (int idx = A.R[r]; idx < A.R[r+1]; idx++) {
                 y[r] += mul(A.V[idx],x[A.C[idx]]); 
         }
}
return y;
}
