pragma options "--bnd-inbits 3 --bnd-cbits 3 --bnd-unroll-amnt 8 --bnd-inline-amnt 9 --beopt:-bndwrand 50  --bnd-arr-size 8 --beopt:simplifycex NOSIM";
include "generators.skh";


stencil float[N][T] cacheObv1d(int N, int T, float[N] in, float[N][T] f){
    float[N][T] out = 0.0;
    if(N>=1 && T >= 1){    
        for(int i=0; i<N; ++i){
            out[0][i] = in[i];
        }
        
        for(int t=1; t<T; ++t){
            out[t][0] = 0.0;
            out[t][N-1] = 0.0;
            for(int i=1; i<N-1; ++i){
                out[t][i] = out[t-1][i-1] + out[t-1][i+1] + f[t][i];
            }   
        }
    }
    return out; 
}

generator void stenGen(fun sten, int N, int T, ref float[N][T] arr){
    int ofst = ??;
    float[ofst][P] mbuf;
    spmd_fork(int p=0; p<P; ++p){
        int beg;
        int end;
        partition(p, P, N, beg, end);        
        int L = end-beg+2*ofst;
        float[L][T] larr;
        for(int i=beg-ofst; i<end+ofst; ++i){
            larr[1][i-(beg-ofst)] = arr[1][i];
        }
        generator float f(int x, int y){
            return larr[x][y];
        }
        for(int t=1; t<T; ++t){            
            for(int i= 0+ofst; i<L-ofst; ++i){
                assert t> 0 && t < T; assert i-t > 0 && i-t < N;
                larr[t][i] = sten(f, t, i);                
            } 
            Transfer(lars[ofst::ofst], p, p-1, lars[L+ofst::ofst]);
            Transfer(lars[L::ofst], p, p-1, lars[0::ofst]);            
        }
        for(int t=0; t<T; ++t){
            for(int i=beg-ofst; i<end+ofst; ++i){
                larr[t][i-(beg-ofst)] = arr[t][i];
            }
        }
    }
}


stencil float[N][T] cacheObv1dSK(int N, int T, float[N] in, float[N][T] f) implements cacheObv1d{ 
    float[N][T] fifo = 0.0;
    if(N>=3&& T >= 3 && N > T){
        for(int i=0; i<N; ++i){
            fifo[0][i] = in[i];
        }
        generator float sten(fun arrfun, int t, int i){
            return arrfun(t-1, i-1) + arrfun(t-1, i+1) + f[t][i];
        }
        stenGen(sten, N, T, fifo);
    }else{
        fifo = cacheObv1d(N, T, in, f);
    }
    return fifo; 
}