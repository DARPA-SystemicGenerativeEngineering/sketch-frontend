
pragma options "--bnd-inbits 2 --beopt:simiters 5";


int Oplus= 0;
int Ominus=1;
int Oneg = 2;
int Oand = 3;
int Oor = 4;
int Onot = 5;
int Ogt = 6;
int Olt = 7;

int size = 5;
struct sourceAST {@Immutable("")}
struct SNum extends sourceAST{int val;}
struct SVar extends sourceAST{ int str;}
struct STrue extends sourceAST{}
struct SFalse extends sourceAST{}
struct SAssign extends sourceAST{int str; sourceAST a;}
struct SLet extends sourceAST{int str; sourceAST a; sourceAST b;}
struct SPrim1 extends sourceAST{int op; sourceAST a;}
struct SPrim2 extends sourceAST{int op; sourceAST a; sourceAST b;}
struct SBetween extends sourceAST{sourceAST a;sourceAST b;sourceAST c;}

struct SIf extends sourceAST{sourceAST a; sourceAST b; sourceAST c;}




//CoreAST

struct coreAST{@Immutable("")}//11
struct CPrim2 extends coreAST{int op; coreAST a; coreAST b;}//12
struct CNum extends coreAST{int val;}//13
struct CVar extends coreAST{int str;}//14
struct CBool extends coreAST{bit val;}//15
struct CIf extends coreAST{coreAST a; coreAST b; coreAST c;}//16
struct CPrim1 extends coreAST{int op; coreAST a;}//17

struct CAssign extends coreAST{int str; coreAST a;}//18
struct CLet extends coreAST{int str; coreAST a; coreAST b;}//19





coreAST desugar(sourceAST s, int bnd){
	if(s == null){ return null; }
	if(bnd <= 0 ){ return null; }
		
	generator int getOp(int op){ return {| op |Oplus | Ominus | Oneg | Oand | Oor | Onot | Ogt | Olt |}; }  
	generator int getStr(){ return ??(3); }
	generator int getConst(int c){return {| c|??|};}
	
	//generator for coreAST
	generator coreAST getPart(coreAST c1, coreAST c2, coreAST c3, int bnd, int depth) {
		//assert bnd > 0;
		if(bnd<1) return null;
		
		coreAST var = new CVar(str=getStr());
		//coreAST c4 = new CPrim2(op = Oand, a = new CPrim2(op = Olt, a  = c3, b = new CVar(str = 1)), b = new CPrim2(op = Olt,a = new CVar(str = 1), b =  c2));
		
		
		if(  ?? || bnd <=1){
			return {| c1|c2|c3|var |};
		}
		else{
			if(bnd > 1){
				coreAST a = getPart(c1,c2,c3, bnd-1,depth/2);
				coreAST b = getPart(c1,c2,c3, bnd-1,depth/2);
				coreAST c = getPart(c1,c2,c3, bnd-1,depth/2);
				//return new CPrim2(op = getOp(1), a = a, b = b);
				return 	new ??(op=getOp(1), a = a, b =b, c= c,str = getStr(), val = getConst(1),val=??);
				/*//coreAST aOut = new CNum(val = getConst(1));
				//coreAST bOut = new CBool(val = ??);
				//coreAST cOut = new CVar(str = getStr());
				//coreAST dOut = new CPrim1(op = getOp(1), a = a);
				coreAST eOut = new CPrim2(op = getOp(1),a =a ,b=b);
				//coreAST fOut = new CIf(a=a,b=b,c=c);
				//coreAST gOut = new CAssign(str = getStr(), a = a);
				coreAST hOut = new CLet(str = getStr(),a =a, b=b);
				coreAST[2] out =  {eOut, hOut};
			return out[??];*/
			}
		}
		return null;
	}
	generator coreAST[3] run([int n], sourceAST[n] fields){
		coreAST[3] out;
		int i=0;
		repeat(n){
		/*for(int j = 0; j< size; j++){
			smtStore[j] = null;
		}*/
			//sourceAST c1 = interpretSourceAST(fields[i],0,bnd-2);
			
			out[i] = desugar(fields[i],bnd-1); ++i;
			/*if(c1!=null){
				for(int j = 0; j < size; j++){
					cmtStore[j] = null;
				}
				coreAST c3 = interpretCoreAST(out[i-1],0,bnd-1,bnd-1);
				assert(c3!=null);
				assert(equals(c1,c3));
			}*/
		}
		return out;
	} 
	switch(s){
		case SNum: return new CNum(val = s.val);
		case STrue: return new CBool(val =1);
		case SFalse: return new CBool(val =0);
		case SVar: return new CVar(str =s.str);
		case SAssign: return new CAssign(str = s.str, a = desugar(s.a,bnd-1));
		case SLet: return new CLet(str = s.str, a = desugar(s.a,bnd-1), b= desugar(s.b,bnd-1));
		case SPrim1: return new CPrim1(op = s.op, a = desugar(s.a,bnd-1));
		case SPrim2 : return new CPrim2(op = s.op ,a = desugar(s.a,bnd-1), b=desugar(s.b,bnd-1));
		//case SBetween:{ coreAST c = desugar(s.b, bnd-1); return new CPrim2(op = Oand, a = new CPrim2(op = Olt, a = desugar(s.a,bnd-1), b = c), b = new CPrim2(op = Olt, a = c, b = desugar(s.c, bnd-1)));}
		//case SBetween: return new CLet( str = 0, a = desugar(s.b, bnd-1), b=new CPrim2(op = Oand, a = new CPrim2(op = Olt, a = desugar(s.a,bnd-1), b = new CVar(str = 0)), b = new CPrim2(op = Olt, a = new CVar(str = 0), b = desugar(s.c,bnd-1))));
		case SIf: return new CIf(a = desugar(s.a,bnd-1) , b= desugar(s.b,bnd-1) , c =desugar(s.c,bnd-1));
	
		case SBetween:
		{
			coreAST[3] v = run( s.{sourceAST} );
			//int d,d1,d2,d3;
			int d1 = ??;
			int d2 = ??;
			int d3 = ??;
			coreAST a = getPart(v[0], v[1], v[2], 1,d1);
			coreAST b = getPart(v[0], v[1], v[2], 5,d2);
			coreAST c = getPart(v[0], v[1], v[2], 1,d3);
			int[1] op = s.{int};
			
			//return new ??(op=getOp(op[0]), a = a, b = b, c =c, str = getConst(op[0]), val = getConst(op[0]),val=??);	
			coreAST aOut = new CNum(val = getConst(op[0]));
			coreAST bOut = new CBool(val = ??);
			coreAST cOut = new CVar(str = getStr());
			coreAST dOut = new CPrim1(op = getOp(op[0]), a = a);
			coreAST eOut = new CPrim2(op = getOp(op[0]),a =a ,b=b);
			coreAST fOut = new CIf(a=a,b=b,c=c);
			coreAST gOut = new CAssign(str = getStr(), a = a);
			coreAST hOut = new CLet(str = getStr(),a =a, b=b);
			coreAST[8] out =  {aOut,bOut,cOut,dOut,eOut,fOut,gOut, hOut};
			return out[??(3)];
			
		}
	}
}
/*
void prelimCheck(coreAST c){
	switch(c){
		case CPrim1:
		{
			assert(c.op == Oneg || c.op == Onot);
			coreAST c_a = c.a;
			switch(c_a){
				case CBool: {assert(c.op == Onot);}
				case CNum: { assert(c.op == Oneg);}
				default:{}
			}
			
		}	
		case CPrim2:
		{
			assert(c.op != Oneg && c.op !=Onot);
			coreAST c_a = c.a;
			switch(c_a){
				case CNum: {
					assert(c.op != Oand || c.op != Oor);
					coreAST c_b = c.b;
					switch(c_b){
						case CBool: {assert false;	}
						default:{}
					}
				}	
				case CBool: {
					assert(c.op == Oand || c.op == Oor);
					coreAST c_b = c.b;
					switch(c_b){
						case CNum:{ assert false;	}
						default: {}
					}	
				}
				default: {}
			} 
				
		}
		case CIf:
		{
			coreAST c_a = c.a;
			switch(c_a){
				case CNum: {assert false;}
				default:{}	
			}
		}
		case CAssign: {assert c.a != null;}
		case CLet: {assert c.a!=null && c.b!=null;}
		default:{}
	}
	
}*/
sourceAST gBetween(sourceAST a, sourceAST b, sourceAST c){
	return new SBetween(a =a, b=b, c= c);
}
sourceAST gIf(sourceAST cond, sourceAST th, sourceAST el){
	return new SIf(a=cond, b=th, c=el);
}
sourceAST gOp([int n], int op, sourceAST[n] p){
	if(n==1){
		return new SPrim1( op= op, a = p[0]);
	}else{
		return new SPrim2(op=op, a=p[0], b=p[1]);
	}
} 

sourceAST gN(int n){
	return new SNum( val=n);
}

sourceAST gTrue(){
	return new STrue();
}
sourceAST gFalse(){
	return new SFalse();
}

coreAST cIf(coreAST cond, coreAST th, coreAST el){
	return new CIf( a=cond, b=th, c=el);
}


coreAST cOp([int n], int op, coreAST[n] p){
	if(n==1){
		return new CPrim1( op= op, a = p[0]);
	}else{
		return new CPrim2( op=op, a=p[0], b=p[1]);
	}
} 

coreAST cN(int n){
	return new CNum( val=n);
}
coreAST cLet(int str, coreAST a, coreAST b){
	return new CLet(str= str, a= a, b= b);
}
coreAST cVar(int str){
	return new CVar(str= str);
}

coreAST cBool(bit val){
	return new CBool(val = val);
}

sourceAST produce( int[40] encoding, ref int idx, int bnd, int sbnd){
	//if(idx >= 47) return null;
	if(bnd <=0  || sbnd ==0|| encoding[idx] ==0){ 
		idx++;
        if(encoding[idx]==0){ ++idx; return new SNum(val=encoding[idx++]); }
        if(encoding[idx]==1){++idx; return new SVar(str = encoding[idx++]);}
        if(encoding[idx]==2){ ++idx; return new STrue(); }else{ ++idx; return new SFalse(); }          
     }
     
   
   else if(encoding[idx]==1 ){
   	 idx++;
     if(encoding[idx]<=1){
        ++idx;
        return gOp(2, encoding[idx++],{ produce(encoding, idx, bnd-1,sbnd/2),produce(encoding, idx, bnd-1,sbnd/2)}); 
        
        
    }else
    if(encoding[idx]<=3){
    	++idx;
    	return gBetween(produce(encoding, idx, bnd-1,sbnd/2), produce(encoding, idx, bnd-1,sbnd/2), produce(encoding, idx, bnd-1,sbnd/2)); 
        
    }
   }
   else if(encoding[idx] ==2){
   	 ++idx;
    if(encoding[idx]<=1){
    	++idx;
    	 //return gOp(1, encoding[idx++],{ produce(encoding, idx, bnd-1,sbnd/2)}); 
    	return new SAssign(str = encoding[idx++],a= produce(encoding, idx, bnd-1,sbnd/2)); 
        
    }else
 	 if(encoding[idx]<=3){
    	++idx;
    	
    	return new SLet(str = encoding[idx++],a= produce(encoding, idx, bnd-1,sbnd/2),b = produce(encoding, idx, bnd-1,sbnd/2)); 
        
    }
   }
   else{
   		++idx;
   		return null;
   }
   /*
    else
    if(encoding[idx]==8){
        ++idx;
        return gIf(produce(encoding, idx, bnd-1,sbnd/2), produce(encoding, idx, bnd-1,sbnd/2), produce(encoding, idx, bnd-1,sbnd/2));
    }else
   if(encoding[idx] == 9){
        ++idx;
        return gBetween(produce(encoding, idx, bnd-1,sbnd/2), produce(encoding, idx, bnd-1,sbnd/2), produce(encoding, idx, bnd-1,sbnd/2)); 
    } else{
    	return null;
    }*/
}


sourceAST[size] smtStore;
sourceAST interpretSourceAST(sourceAST s, ref int idx, int bnd){
	//assert(bnd >0);
	if(s==null){
		return null;
	}
	if(bnd<0 ){
		return null;
	}
	switch(s){
		case SVar:
		{
		
			if (s.str >= idx) return s;
			sourceAST val = smtStore[s.str];
				
				if (val == null) return s;
				switch(val){
					case SNum: return val;
					case STrue: return val;
					case SFalse: return val;
					case SVar: return val;
					default: return null;
				
				}
				 
			
		
		}
		case SAssign:
		{
			if(bnd <1 ) return null;
			else{
			
			sourceAST s_a = interpretSourceAST(s.a, idx,  bnd-1);
			if(s.str<0 || s.str>= size) return null;
			if (idx <= s.str) idx = s.str+1;
			
			smtStore[s.str] = s_a;
			return s_a;
			
			}
		}
		case SPrim1:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oneg){
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd -1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: {return new SNum(val = (0-s_a.val));}
					default: {return null;}
				}
			}else
			if(s.op == Onot){
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue:{ return new SFalse();}
					case SFalse:{ return new STrue();}
					default: {return null;}
				}	
			}else{
				return null;
			}
			}
		}
		
		case SPrim2:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oplus){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum:{ a = s_a.val;}
					default:{ return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,bnd -1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				return new SNum(val = a+b);
			}else
			if(s.op == Ominus){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: {a = s_a.val;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				return new SNum(val = a-b);
			}else
			if(s.op == Oand){
				bit a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: {a = 1;}
					case SFalse: {a = 0;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx, bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case STrue:{ b = 1;}
					case SFalse:{ b = 0;}
					default: {return null;}
				}
				if (a&&b) return new STrue();
				else return new SFalse();
				
			}else
			if(s.op == Oor){
				bit a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case STrue: {a = 1;}
					case SFalse: {a = 0;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,  bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case STrue: {b = 1;}
					case SFalse:{ b = 0;}
					default: {return null;}
				}
				if(a||b) return new STrue();
				else return new SFalse();
				
			}else
			if(s.op == Ogt){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx, bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum: {a = s_a.val;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx, bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				if(a>b) return new STrue();
				else return new SFalse();
				
			}else
			if(s.op == Olt){
				int a, b;
				sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
				if(s_a==null) return null;
				switch(s_a){
					case SNum:{ a = s_a.val;}
					default: {return null;}
				}
				sourceAST s_b = interpretSourceAST(s.b,idx,bnd-1);
				if(s_b==null) return null;
				switch(s_b){
					case SNum: {b = s_b.val;}
					default: {return null;}
				}
				if(a<b) return new STrue();
				else return new SFalse();
				
			}else{
				return null;	
			}
			}				
		}
		case SBetween:
		{
			
			if(bnd <1 ) return null;
			else{
			int a, b, c;
			sourceAST s_a = interpretSourceAST(s.a,idx,  bnd-1);
			
			if(s_a==null) return null;
			switch(s_a){
				case SNum: {a = s_a.val;}
				default: {return null;}
			}
			sourceAST s_b = interpretSourceAST(s.b,idx,  bnd-1);
			if(s_b==null) return null;
			switch(s_b){
				case SNum:{ b = s_b.val;}
				default: {return null;}
			}
			sourceAST s_c = interpretSourceAST(s.c,idx, bnd-1);
			if(s_c==null) return null;
			switch(s_c){
				case SNum: {c = s_c.val;}
				default: {return null;}
			}
			if(a<b&&b<c) return new STrue();
			else return new SFalse();
			}
			
		}	
		case SIf:
		{
			if(bnd <1 ) return null;
			else{
			sourceAST c  = interpretSourceAST(s.a,idx, bnd-1);
			if(c==null) return null;
			switch(c){
				case STrue:{return interpretSourceAST(s.b,idx, bnd-1);}
				case SFalse: {return interpretSourceAST(s.c,idx,bnd-1);}
				default: {return null;}	
			}
			}
		}
		case SLet:
		{
		if(bnd <1) return null;
		else{
		
		sourceAST s_a = interpretSourceAST(s.a, idx, bnd-1);
		if(s.str<0 || s.str>=size) return null;
		if (idx <= s.str) idx = s.str+1;
		smtStore[s.str] = s_a;
		return interpretSourceAST(s.b, idx, bnd-1);
		}
		}
		default: {return s;}
		
		
		
	}
	
	
}

coreAST[size] cmtStore;
coreAST interpretCoreAST(coreAST s,ref int idx, int bnd){
	//assert(bnd >=0);
  // if(s == null) return null;
	if(bnd<0){
		return null;
	}
	switch(s){
		case CVar:
		{
			
			if (s.str >= idx) { return s;}
			
				coreAST val = cmtStore[s.str];
				if(val == null) {  return s;}
				switch(val){
					case CNum: return val;
					case CBool: return val;
					case CVar: return val;
					default: {  return null;}
				
				}
				 
			
		}
		case CAssign:
		{
		
		if(bnd <1){  return null;}
		else{
		
		coreAST s_a = interpretCoreAST(s.a, idx,  bnd-1);
		if(s.str<0 || s.str>= size) { return null;}
		if (idx <= s.str) idx = s.str+1;
		cmtStore[s.str] = s_a;
		return s_a;
		}
		}
		case CPrim1:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oneg){
				
				coreAST s_a = interpretCoreAST(s.a,idx, bnd-1);
				//if(s_a==null) return null;
				return new CNum(val = -((CNum)s_a).val);
				/*switch(s_a){
					case CNum: {return new CNum(val = (0-s_a.val));}
					default: {return null;}
				}*/
			}else
			if(s.op == Onot){
				coreAST s_a = interpretCoreAST(s.a,idx, bnd-1);
				//if(s_a==null) return null;
				return new CBool(val = !(((CBool)s_a).val));
				/*switch(s_a){
					case CBool:{ return new CBool( val = (!s_a.val));}
					default: {return null;}
				}	*/
			}else{
				return null;
			}
			}
		}
		
		case CPrim2:
		{
			if(bnd <1 ) return null;
			else{
			if(s.op == Oplus){
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,idx, bnd-1);
				//if(s_a==null) return null;
				a = ((CNum)s_a).val;
				/*switch(s_a){
					case CNum: {a = s_a.val;}
					default: {return null;}
				}*/
				coreAST s_b = interpretCoreAST(s.b,idx, bnd-1);
				b = ((CNum)s_b).val;
				//if(s_b==null) return null;
				/*switch(s_b){
					case CNum: {b = s_b.val;}
					default: {return null;}
				}*/
				return new CNum(val = a+b);
			}else
			if(s.op == Ominus){
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,idx,bnd-1);
				a = ((CNum)s_a).val;
				/*if(s_a==null) return null;
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {return null;}
				}*/
				coreAST s_b = interpretCoreAST(s.b,idx,bnd-1);
				b = ((CNum)s_b).val;
				/*if(s_b==null) return null;
				switch(s_b){
					case CNum: {b = s_b.val;}
					default: {return null;}
				}*/
				return new CNum(val = a-b);
			}else
			if(s.op == Oand){
				bit a, b;
				coreAST s_a = interpretCoreAST(s.a,idx,bnd-1);
				a = ((CBool)s_a).val;
				/*if(s_a==null) return null;
				switch(s_a){
					case CBool:{ a = s_a.val;}
					default:{ return null;}
				}*/
				coreAST s_b = interpretCoreAST(s.b,idx,bnd-1);
				b = ((CBool)s_b).val;
				/*if(s_b==null) return null;
				switch(s_b){
					case CBool:{ b = s_b.val;}
					default: {return null;}
				}*/
				return new CBool(val = a&&b);
			}else
			if(s.op == Oor){
				bit a, b;
				coreAST s_a = interpretCoreAST(s.a,idx,  bnd-1);
				a = ((CBool)s_a).val;
				/*if(s_a==null) return null;
				switch(s_a){
					case CBool: {a = s_a.val;}
					default: {return null;}
				}*/
				coreAST s_b = interpretCoreAST(s.b,idx,bnd-1);
				b = ((CBool)s_b).val;
				/*if(s_b==null) return null;
				switch(s_b){
					case CBool: {b = s_b.val;}
					default: {return null;}
				}*/
				return new CBool(val = a||b);
			}else
			if(s.op == Ogt){
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,idx,bnd-1);
				a = ((CNum)s_a).val;
				/*if(s_a==null) return null;
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {return null;}
				}*/
				coreAST s_b = interpretCoreAST(s.b,idx,bnd-1);
				b = ((CNum)s_b).val;
				/*if(s_b==null) return null;
				switch(s_b){
					case CNum:{ b = s_b.val;}
					default: {return null;}
				}*/
				return new CBool(val = a>b);
			}else
			if(s.op == Olt){
				int a, b;
				coreAST s_a = interpretCoreAST(s.a,idx,bnd-1);
				a = ((CNum)s_a).val;
				/*if(s_a==null) return null;
				switch(s_a){
					case CNum: {a = s_a.val;}
					default: {return null;}
				}*/
				coreAST s_b = interpretCoreAST(s.b,idx,bnd-1);
				b = ((CNum)s_b).val;
				/*if(s_b==null) return null;
				switch(s_b){
					case CNum:{ b = s_b.val;}
					default: {return null;}
				}*/
				return new CBool(val = a<b);
			}else{
				return null;	
			}	
			}			
		}
		case CLet:
		{
		
		if(bnd <1) return null;
		else{
		if(s.str<0 || s.str>= size) return null;
		if (idx <= s.str) idx = s.str+1;
		coreAST s_a = interpretCoreAST(s.a, idx,  bnd-1);
		cmtStore[s.str] = s_a;
		return interpretCoreAST(s.b, idx,  bnd-1 );
		}
		}
		case CIf:
		{
			if(bnd <1 ) return null;
			else {
			coreAST c  = interpretCoreAST(s.a,idx,bnd-1);
			//if(c==null) return null;
			if(((CBool)c).val == 1) return interpretCoreAST(s.b,idx, bnd-1);
			else return interpretCoreAST(s.c,idx, bnd-1);
			
			}
		}
		default: return s;
		
		
		
	}
	
	
}
bit equals(sourceAST c1 ,coreAST c2){
	if(c1== null) return true;
	if(c2 == null) return false;
	
	switch(c1){
		
		
		case SNum:
		{
			return c1.val == ((CNum)c2).val;
			/*switch(c2){
				case CNum: return c1.val == c2.val;
				default: return false;
			}*/
		}
		case STrue:
		{
			return ((CBool)c2).val ==1;
			/*switch(c2){
				case CBool:return c2.val==1;
				default: return false;
			}*/
		}
		case SFalse:
		{
			return ((CBool)c2).val ==0;
			/*switch(c2){
				case CBool: return c2.val==0;
				default: return false;
			}*/
		}
		//remove this case later
		case SVar:
		{
			return c1.str == ((CVar)c2).str;
			/*switch(c2){
				case CVar: return c1.str == c2.str;
				default: return false;
			}*/
		}
		
		default: return true;
	}
	
	
}
/*
harness void main3(){
	sourceAST s = new SBetween(a = new SAssign(str = 0, a = new SNum(val =1)),b = new SAssign(str= 0, a = new SPrim2(op = Oplus, a = new SVar(str = 0), b = new SNum(val = 1))),c = new SNum(val = 3));	
	sourceAST c1 = interpretSourceAST(s,0,3);
	
	
	coreAST c2  = desugar(s,4);
	
	for(int i = 0; i < size; i++){
		cmtStore[i] = null;
	}
	int i = 1;
	
	coreAST c3 = interpretCoreAST(c2,0,5,i+2);
	assert(c3!=null);
	assert(equals(c1,c3));
		
	
}*/
/*
harness void main2(int[50] arr, int sbnd){
	sbnd = sbnd*2;
	int idx =0;
	sourceAST s = produce( arr, idx,3, sbnd);
	
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
	
	sourceAST c1 = interpretSourceAST(s,0,3);
	
	if(c1 != null){
		coreAST c2  = desugar(s,4);
		
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		int i = 1;
		while(sbnd/2 >=1) {sbnd = sbnd/2; i++;}
		
		coreAST c3 = interpretCoreAST(c2,0,5,i+2);
		assert(c3!=null);
		assert(equals(c1,c3));
		
	}
	
}*/


/*
harness void main1( int[40] arr, int sbnd){
	
	int idx =0;
	sourceAST s = produce( arr, idx, 2, sbnd);
	
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
	
	sourceAST c1 = interpretSourceAST(s,0,2);
	
	if(c1 != null){
		coreAST c2  = desugar(s,3);
		
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		coreAST c3 = interpretCoreAST(c2,0,5);
		assert(c3!=null);
		assert(equals(c1,c3));
		
	
	}
}*/

harness void main0(int[40] arr, int sbnd){
	
	int idx=0;
	sourceAST s =  produce( arr, idx, 1, sbnd);
	
	for(int i = 0; i < size; i++){
		smtStore[i] = null;
	}
	
	sourceAST c1 = interpretSourceAST(s,0,1);
	
	if(c1 != null){
		coreAST c2  = desugar(s,2);
		
		for(int i = 0; i < size; i++){
			cmtStore[i] = null;
		}
		coreAST c3 = interpretCoreAST(c2,0,5);
		assert(c3!=null);
		assert(equals(c1,c3));
		
	
	}
}

