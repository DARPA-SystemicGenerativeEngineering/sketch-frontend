// x = x1*b + x0
// y = y1*b + y0
//
// x*y = (b*b)*x1*y1 + b*(x1*y0 + x0*y1) + x0*y0
//
// x*y = p(b)*x1*y1 + p(b)*a(x1, x0, y1, y0) * a(x1, x0, y1, y0) + p(b)*x0*y0
//
// x*y = (b*b +b)*x1*y1 + b*(x1 - x0)*(y1 - y0) + (b+1)*x0*y0
//
// p1, p2, a2, p3 are polynomials which the system has 
// to discover in order to resolve the sketch


int WW = 4;
int W = WW/2;
int WWWW =  WW+WW;



bit[W+1] poly1(bit[W] x0,bit[W] x1,bit[W] x2,bit[W] x3) {
	bit[8] choice=??;
	bit[W+1] sum=0;
	if(choice[0] && !choice[1]) sum=    sum+x0;
	if(choice[0] &&  choice[1]) sum=sub(sum,x0);
	if(choice[2] && !choice[3]) sum=    sum+x1;
	if(choice[2] &&  choice[3]) sum=sub(sum,x1);
	if(choice[4] && !choice[5]) sum=    sum+x2;
	if(choice[4] &&  choice[5]) sum=sub(sum,x2);
	if(choice[6] && !choice[7]) sum=    sum+x3;
	if(choice[6] &&  choice[7]) sum=sub(sum,x3);
	return sum;
}

int k = 0;  // this is used to verify mutliplication for some 
			// specific values of y.  Succeeds for k=0, fails for k=1

bit [WWWW] sel(bit[WWWW] in1, bit[WWWW] in2){
	bit c=??;
	return c ? in1 : in2;
}

bit [W+1] sub(bit[W+1] in1, bit[W+1] in2){
	bit [W+1] one = 0; one[0] = 1;
	bit[W+1] result=in1 + ((in2 ^ 1)+ one);
	return result;
}

bit[WWWW] minus(bit[WWWW] in){
	bit [WWWW] one = 0; one[0] = 1;
	return ((in ^ 1)+ one);
}

bit[WWWW] multiplyFull (bit[WW] in1, bit[WW] in2) {
	bit[WWWW] result = 0;
	bit[WWWW] in1w=0; for (int i=0; i < WW; i++) { in1w[i]=in1[i]; }

	for(int i=0; i<WW; ++i){
		if(in2[i]==1){
			result = result + in1w;
		}
		in1w = in1w >> 1;
	}
	return result;	
}

bit[WWWW] multiplyHalf (bit[W+1] in1, bit[W+1] in2) 
{	
	bit [W] one = 0; one[0] = 1;
	bit sgn1 = in1[W];
	if(sgn1){ in1 = ((in1 ^ 1)+ one); }
	bit sgn2 = in2[W];
	if(sgn2){ in2 = ((in2 ^ 1)+ one); ; }

	bit[WW+1] result = 0;
	bit[WW+1] in1w=in1;
		
	for(int i=0; i<W; ++i){
		if(in2[i]==1){
			result = result + in1w;
		}
		in1w = in1w >> 1;
	}
	
	bit[WWWW] ret = result;
	if(sgn1 ^ sgn2){
		ret = ((ret^1)+one);
	}
	return ret;
}




bit[WWWW] multiplyKaratsuba (bit[WW] x, bit[WW] y) implements multiplyFull
{  
	bit [W] one = 0; one[0] = 1;
	bit[W] x1, x2, y1, y2;
	bit[WWWW]  a=0, b=0, c=0, tmp21=0, res=0;
	
	x1=x[0::W];  x2=x[W::W];
	y1=y[0::W];  y2=y[W::W];
	
	a = multiplyHalf(x1, y1);
	b = multiplyHalf(x2, y2);
	c = multiplyHalf(poly1(x1,x2,y1,y2), poly1(x1,x2,y1,y2));
	
	res = 0;
	res = res + a;
	res = res + b >> (2*W);
	loop(??){
		bit[WWWW] t = sel(sel(a, b), c) >> W;
		res = res + sel(t, minus(t));
	}
	return res;
}
