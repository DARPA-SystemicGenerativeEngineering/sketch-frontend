pragma options "--bnd-unroll-amnt 16 --bnd-inbits 3";
#define MAX_LEN 16

struct WilosUser
{
  int roleId;
}

struct Role
{
  int roleId;
}

struct CrossProduct
{
  int roleId1;
  int roleId2;
}

bit CrossProduct_listEquals (CrossProduct [MAX_LEN] l1, int l1_sz, CrossProduct [MAX_LEN] l2, int l2_sz)
{
  if (l1_sz != l2_sz) return 0;
  for (int i = 0; i < l1_sz; ++i)
  {
    if (l1[i].roleId1 != l2[i].roleId1 || l1[i].roleId2 != l2[i].roleId2)
      return 0;
  }
  return 1;
}

CrossProduct [MAX_LEN] 
CrossProduct_listJoin (WilosUser [MAX_LEN] l1, int l1_sz, Role [MAX_LEN] l2, int l2_sz, 
                       fun pred, ref int out_sz)
{
  CrossProduct [MAX_LEN] out;
  out_sz = 0;
  for (int i = 0; i < l1_sz; ++i)
  {
    for (int j = 0; j < l2_sz; ++j)
    {
      WilosUser t1 = l1[i];
      Role t2 = l2[j];
      if (pred(t1, t2))
      {
        CrossProduct o = new CrossProduct();
        o.roleId1 = t1.roleId;
        o.roleId2 = t2.roleId;
        out[out_sz] = o;
        ++out_sz;
      }
    }
  }
  return out;
}

CrossProduct [MAX_LEN] 
CrossProduct_tupleJoin (WilosUser t, Role [MAX_LEN] l, int l_sz, fun pred, ref int out_sz)
{
  CrossProduct [MAX_LEN] out;
  out_sz = 0;
  for (int i = 0; i < l_sz; ++i)
  {
    Role t2 = l[i];
    if (pred(t, t2))
    {
      CrossProduct o = new CrossProduct();
      o.roleId1 = t.roleId;
      o.roleId2 = t2.roleId;
      out[out_sz] = o;
      ++out_sz;
    }
  }
  return out;
}

CrossProduct [MAX_LEN] CrossProduct_listConcat (CrossProduct [MAX_LEN] l1, int l1_sz, 
                                                CrossProduct [MAX_LEN] l2, int l2_sz)
{
  CrossProduct [MAX_LEN] out;
 
  out[0::l1_sz] = l1[0::l1_sz];
  out[l1_sz::l2_sz] = l2[0::l2_sz];
  return out;
}

CrossProduct [MAX_LEN] CrossProduct_append (CrossProduct [MAX_LEN] l, int l_sz, CrossProduct t)
{
  CrossProduct [MAX_LEN] out;
  
  out[0::l_sz] = l[0::l_sz];
  out[l_sz] = t;
  
  return out;
}

// tmp
WilosUser [MAX_LEN] WilosUser_append (WilosUser [MAX_LEN] l, int l_sz, WilosUser t)
{
  WilosUser [MAX_LEN] out;
  
  out[0::l_sz] = l[0::l_sz];
  out[l_sz] = t;
  
  return out;
}


CrossProduct CrossProduct_newTuple (WilosUser t1, Role t2)
{
  CrossProduct out = new CrossProduct();
  out.roleId1 = t1.roleId;
  out.roleId2 = t2.roleId;
  return out;
}


WilosUser [MAX_LEN] WilosUser_listTop2 (WilosUser [MAX_LEN] l, int l_sz, int i)
{
  if (i <= l_sz)
    return l[0::i];
  else
    return null;
}

Role [MAX_LEN] Role_listTop2 (Role [MAX_LEN] l, int l_sz, int i)
{
  if (i <= l_sz)
    return l[0::i];
  else
    return null;
}


WilosUser [MAX_LEN] 
WilosUser_listTop_1 (WilosUser [MAX_LEN] l, int l_sz, 
                   int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                   WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                   ref int out_sz)
{
  out_sz = WilosUser_topPred(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
  //out_sz = i;
  if (out_sz <= l_sz)
    return l[0::out_sz];
  else
    return null;
}

WilosUser [MAX_LEN] 
WilosUser_listTop_2 (WilosUser [MAX_LEN] l, int l_sz, 
                   int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                   WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                   ref int out_sz)
{
  out_sz = WilosUser_topPred(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
  if (out_sz <= l_sz)
    return l[0::out_sz];
  else
    return null;
}

generator int WilosUser_topPred (int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                                 WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
  //return i;
  return {| i | j | l1_sz | l2_sz |};
}

WilosUser [MAX_LEN]
WilosUser_listSelect_1 (WilosUser [MAX_LEN] l, int l_sz,
                        int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                        WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                        ref int out_sz)
{
  out_sz = 0;
  WilosUser [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    if (WilosUser_listSelectPred(l[i]))
    {
      out[out_sz] = l[i];
      ++out_sz;
    }
  }

  return out;
}

WilosUser [MAX_LEN]
WilosUser_listSelect_2 (WilosUser [MAX_LEN] l, int l_sz,
                        int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                        WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                        ref int out_sz)
{
  out_sz = 0;
  WilosUser [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    if (WilosUser_listSelectPred(l[i]))
    {
      out[out_sz] = l[i];
      ++out_sz;
    }
  }

  return out;
}

WilosUser [MAX_LEN]
WilosUser_listSelect_3 (WilosUser [MAX_LEN] l, int l_sz,
                        int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                        WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                        ref int out_sz)
{
  out_sz = 0;
  WilosUser [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    if (WilosUser_listSelectPred(l[i]))
    {
      out[out_sz] = l[i];
      ++out_sz;
    }
  }

  return out;
}

generator bit WilosUser_listSelectPred (WilosUser t)
{
  
  if (t == null)
    return 0;
  else
  {
    int operator = ??(3);
    if (operator == 0)
      return 1;
    else if (operator == 1)
      return t.roleId == ??;
    else if (operator == 2)
      return t.roleId <= ??;
    else if (operator == 3)
      return t.roleId < ??;
    else if (operator == 4)
      return t.roleId >= ??;
    else if (operator == 5)
      return t.roleId > ??;
    else
      assert 0;
  }
}



Role [MAX_LEN]
Role_listTop_1 (Role [MAX_LEN] l, int l_sz, 
              int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
              WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
              ref int out_sz)
{
  out_sz = Role_topPred(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
  if (out_sz <= l_sz)
    return l[0::out_sz];
  else
    return null;
}

Role [MAX_LEN]
Role_listTop_2 (Role [MAX_LEN] l, int l_sz, 
              int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
              WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
              ref int out_sz)
{
  out_sz = Role_topPred(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
  if (out_sz <= l_sz)
    return l[0::out_sz];
  else
    return null;
}

Role [MAX_LEN]
Role_listTop_3 (Role [MAX_LEN] l, int l_sz, 
              int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
              WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
              ref int out_sz)
{
  out_sz = Role_topPred(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
  if (out_sz <= l_sz)
    return l[0::out_sz];
  else
    return null;
}

generator int Role_topPred (int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                            WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
  return {| i | j | l1_sz | l2_sz |};
}

Role [MAX_LEN]
Role_listSelect_1 (Role [MAX_LEN] l, int l_sz,
                   int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                   WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                   ref int out_sz)
{
  out_sz = 0;
  Role [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    if (Role_listSelectPred(l[i]))
    {
      out[out_sz] = l[i];
      ++out_sz;
    }
  }

  return out;
}

Role [MAX_LEN]
Role_listSelect_2 (Role [MAX_LEN] l, int l_sz,
                   int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                   WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                   ref int out_sz)
{
  out_sz = 0;
  Role [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    if (Role_listSelectPred(l[i]))
    {
      out[out_sz] = l[i];
      ++out_sz;
    }
  }

  return out;
}

Role [MAX_LEN]
Role_listSelect_3 (Role [MAX_LEN] l, int l_sz,
                   int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                   WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret, 
                   ref int out_sz)
{
  out_sz = 0;
  Role [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    if (Role_listSelectPred(l[i]))
    {
      out[out_sz] = l[i];
      ++out_sz;
    }
  }

  return out;
}

generator bit Role_listSelectPred (Role t)
{
  if (t == null)
    return 0;
  else
  {
    int operator = ??;
    if (operator == 0)
      return 1;
      
    else if (operator == 1)
      return t.roleId == ??;
      /*    
    else if (operator == 2)
      return t.roleId <= ??;
    
    else if (operator == 3)
      return t.roleId < ??;
    else if (operator == 4)
      return t.roleId >= ??;
    else if (operator == 5)
      return t.roleId > ??;
      */
    else
      return 0;
    
    //return 1;
  }
}

bit CrossProduct_joinPred (WilosUser t1, Role t2)
{
  //return 1;
  return t1.roleId == t2.roleId;
  /*
  int operator = ??(3);
  if (operator == 0)
    return 1;
  else if (operator == 1)
    return t1.roleId == t2.roleId;
  else if (operator == 2)
    return t1.roleId <= t2.roleId;
  else if (operator == 3)
    return t1.roleId < t2.roleId;
  else if (operator == 4)
    return t1.roleId >= t2.roleId;
  else if (operator == 5)
    return t1.roleId > t2.roleId;
  else if (operator == 6)
    return t1.roleId != t2.roleId;
  else
    assert 0;
    */
}

CrossProduct [MAX_LEN] 
CrossProduct_listProject_1 (CrossProduct [MAX_LEN] l, int l_sz,  
                            int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2,
                            WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
  CrossProduct [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    out[i] = CrossProduct_listProjectPred(l[i]);
  }
  return out;
}

CrossProduct [MAX_LEN] 
CrossProduct_listProject_2 (CrossProduct [MAX_LEN] l, int l_sz,  
                            int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2,
                            WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
  CrossProduct [MAX_LEN] out;
  for (int i = 0; i < l_sz; ++i)
  {
    out[i] = CrossProduct_listProjectPred(l[i]);
  }
  return out;
}

CrossProduct CrossProduct_listProjectPred (CrossProduct t)
{
  CrossProduct out = new CrossProduct();
  out.roleId1 = {| t.roleId1 | t.roleId2 |};
  out.roleId2 = {| t.roleId1 | t.roleId2 |};
  return out; 
}


bit postCondition (int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2,
                   WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
  
  // select on l1
  int select_2_sz;
  WilosUser [MAX_LEN] select_2 = 
    WilosUser_listSelect_3(l1, l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                           select_2_sz);      
    //l1;
  //select_2_sz = l1_sz;
  
  int select_3_sz;
  Role [MAX_LEN] select_3 = 
    Role_listSelect_3(l2, l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                      select_3_sz);
    //l2;
  //select_3_sz = l2_sz;

  int join_l1_l2_sz;
  CrossProduct [MAX_LEN] join_l1_l2 = 
    CrossProduct_listJoin(select_2, select_2_sz, select_3, select_3_sz, 
                          CrossProduct_joinPred, join_l1_l2_sz);
  
  return CrossProduct_listEquals(ret, ret_sz, join_l1_l2, join_l1_l2_sz);
  
  /*
  int join_l1_l2_sz, select_2_sz, select_3_sz;
  return CrossProduct_listEquals(ret, ret_sz,
    CrossProduct_listJoin(
      WilosUser_listSelect_3(l1, l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, select_2_sz), 
        select_2_sz,
      Role_listSelect_3(l2, l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, select_3_sz),
        select_3_sz, CrossProduct_joinPred, join_l1_l2_sz), join_l1_l2_sz);
  */

  /* 
  int join_sz;
  return CrossProduct_listEquals(ret, ret_sz, 
          CrossProduct_listJoin(l1, l1_sz, l2, l2_sz, CrossProduct_joinPred, join_sz), join_sz);
  */
}



bit outerInvariant (int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2,
                    WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
    
  if (i <= l1_sz)
  {
    int top_l1_sz;
    WilosUser [MAX_LEN] top_l1 =
      WilosUser_listTop_2(l1, l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                          top_l1_sz);
      //WilosUser_listTop2(l1, l1_sz, i);
    //top_l1_sz = i;

    // select on top_l1
    int select_2_sz;
    WilosUser [MAX_LEN] select_2 = 
      WilosUser_listSelect_2(top_l1, top_l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                             select_2_sz);      
      //top_l1;
    //select_2_sz = top_l1_sz;
    

    int top_l2_sz;
    Role [MAX_LEN] top_l2 = 
      Role_listTop_3(l2, l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                     top_l2_sz);
      //l2;
    //top_l2_sz = l2_sz;
    
    int select_3_sz;
    Role [MAX_LEN] select_3 = 
      Role_listSelect_3(top_l2, top_l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                        select_3_sz);
      //top_l2;
    //select_3_sz = l2_sz;

    int join_l1_l2_sz;
    CrossProduct [MAX_LEN] join_l1_l2 = 
      CrossProduct_listJoin(select_2, select_2_sz, select_3, select_3_sz, 
                            CrossProduct_joinPred, join_l1_l2_sz);
    
    return CrossProduct_listEquals(ret, ret_sz, join_l1_l2, join_l1_l2_sz);
  }
  else 
    return 0;
  

  /*
  int top_l1_sz;
  int select_2_sz;
  int top_l2_sz;
  int select_3_sz;
  int join_l1_l2_sz; 

  return i <= l1_sz && CrossProduct_listEquals(ret, ret_sz,
      CrossProduct_listJoin(
        WilosUser_listSelect_2(
           WilosUser_listTop_2(l1, l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                          top_l1_sz),          
          top_l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                               select_2_sz),
         select_2_sz, 
                
       Role_listSelect_3(
          Role_listTop_3(l2, l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                     top_l2_sz),
          top_l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                        select_3_sz),
         
         select_3_sz,                                                                                   
                            CrossProduct_joinPred, join_l1_l2_sz), join_l1_l2_sz);
  */

  /* 
  int join_sz;
  return i <= l1_sz && 
      CrossProduct_listEquals(ret, ret_sz,
        CrossProduct_listJoin(WilosUser_listTop2(l1, l1_sz, i), i, l2, l2_sz, CrossProduct_joinPred, 
                              join_sz), 
          join_sz);
  */
}

bit innerInvariant (int i, int j, int l1_sz, int l2_sz, int ret_sz, WilosUser t1, Role t2, 
                    WilosUser [MAX_LEN] l1, Role [MAX_LEN] l2, CrossProduct [MAX_LEN] ret)
{
 
  bit pred_i = i < l1_sz;
  bit pred_j = j <= l2_sz;
  //bit pred_t1 = t1.roleId == l1[i].roleId;
  
  //if (pred_i && pred_j && pred_t1)
  if (pred_i && pred_j && t1.roleId == l1[i].roleId)
  {
  
    int top_l1_sz;
    WilosUser [MAX_LEN] top_l1 = 
      //WilosUser_listTop_1(l1, l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
      //                    top_l1_sz);
      WilosUser_listTop2(l1, l1_sz, i);
    top_l1_sz = i;
    
    int select_l1_sz;
    WilosUser [MAX_LEN] select_l1 = 
      //WilosUser_listSelect_1(top_l1, top_l1_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
      //                       select_l1_sz);
      top_l1;
    select_l1_sz = top_l1_sz; 
    
    int top_l2_sz;
    Role [MAX_LEN] top_l2 =
      //Role_listTop_1(l2, l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
      //               top_l2_sz);
      l2;
    top_l2_sz = l2_sz;

    int select_l2_sz;
    Role [MAX_LEN] select_l2 = 
      Role_listSelect_1(top_l2, top_l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret, 
                        select_l2_sz);
      //top_l2;
    //select_l2_sz = top_l2_sz;
    
    int join_select_l1_select_l2_sz;
    CrossProduct [MAX_LEN] join_select_l1_select_l2 = 
      CrossProduct_listJoin(select_l1, select_l1_sz, select_l2, select_l2_sz, 
                            CrossProduct_joinPred, join_select_l1_select_l2_sz);

    // project on join_l1_l2
    int project_1_sz = join_select_l1_select_l2_sz;
    CrossProduct [MAX_LEN] project_1 = 
      CrossProduct_listProject_1(join_select_l1_select_l2, join_select_l1_select_l2_sz,
                                 i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);


    // no top on t1
    // select on t1
    WilosUser select_t1 = t1;

    // top on l2
    int top_l2_2_sz;
    Role [MAX_LEN] top_l2_2 = 
      Role_listTop_2(l2, l2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret,
                     top_l2_2_sz); 
      //Role_listTop2(l2, l2_sz, j);
    //top_l2_2_sz = j;

    // select on top_l2_2
    int select_l2_2_sz;
    Role [MAX_LEN] select_l2_2 = 
      Role_listSelect_2(top_l2_2, top_l2_2_sz, i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret,
                        select_l2_2_sz); 
      //top_l2_2;
    //select_l2_2_sz = top_l2_2_sz;

    int join_t1_l2_sz;
    CrossProduct [MAX_LEN] join_t1_l2 = 
      CrossProduct_tupleJoin(select_t1, select_l2_2, select_l2_2_sz, 
                             CrossProduct_joinPred, join_t1_l2_sz);
        
    int concat_join_l1_l2_join_t1_l2_sz = join_select_l1_select_l2_sz + join_t1_l2_sz;
    CrossProduct [MAX_LEN] concat_join_l1_l2_join_t1_l2 = 
      CrossProduct_listConcat(join_select_l1_select_l2, join_select_l1_select_l2_sz, 
                              join_t1_l2, join_t1_l2_sz); 
      
    // project on concat_join_l1_l2_join_t1_l2
    int project_2_sz = concat_join_l1_l2_join_t1_l2_sz;
    CrossProduct [MAX_LEN] project_2 = 
      CrossProduct_listProject_2(concat_join_l1_l2_join_t1_l2, concat_join_l1_l2_join_t1_l2_sz,
                                 i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);


    return CrossProduct_listEquals(ret, ret_sz, concat_join_l1_l2_join_t1_l2, 
                                   concat_join_l1_l2_join_t1_l2_sz);

    //return {| CrossProduct_listEquals(ret, ret_sz, project_2, project_2_sz) | 
    //    CrossProduct_listEquals(ret, ret_sz, join_select_l1_select_l2, join_select_l1_select_l2_sz) |};
  }
  else
    return 0;
    
  /* 
  int join_sz1;
  int join_sz2;
  
  return j <= l2_sz && i < l1_sz && t1.roleId == l1[i].roleId && 
      CrossProduct_listEquals(ret, ret_sz,
          CrossProduct_listConcat(
            CrossProduct_listJoin(WilosUser_listTop2(l1, l1_sz, i), i, l2, l2_sz, 
                                  CrossProduct_joinPred, join_sz1), 
              join_sz1,
            CrossProduct_tupleJoin(t1, Role_listTop2(l2, l2_sz, j), j, CrossProduct_joinPred, join_sz2), join_sz2), 
          join_sz1 + join_sz2);
   */
}



harness void test (int i, int j, int l1_sz, int l2_sz, int ret_sz,
                   int t1_roleId, int t2_roleId,
                   int [MAX_LEN] l1_roleId, int [MAX_LEN] l2_roleId,
                   int [MAX_LEN] ret_roleId1, int [MAX_LEN] ret_roleId2)
{
  WilosUser t1 = new WilosUser();
  t1.roleId = t1_roleId;

  Role t2 = new Role();
  t2.roleId = t2_roleId;

  WilosUser [MAX_LEN] l1;
  for (int i = 0; i < MAX_LEN; ++i)
  {
    l1[i] = new WilosUser();
    l1[i].roleId = l1_roleId[i];
  }

  Role [MAX_LEN] l2;
  for (int i = 0; i < MAX_LEN; ++i)
  {
    l2[i] = new Role();
    l2[i].roleId = l2_roleId[i];
  }

  CrossProduct [MAX_LEN] ret;
  for (int i = 0; i < MAX_LEN; ++i)
  {
    ret[i] = new CrossProduct();
    ret[i].roleId1 = ret_roleId1[i];
    ret[i].roleId2 = ret_roleId2[i];
  }

  if (true && (l1_sz >= 0 && l1_sz < MAX_LEN) && (l2_sz >= 0 && l2_sz < MAX_LEN) && 
      (ret_sz >= 0 && ret_sz < MAX_LEN))
  {
     
    // outer invariant 
    if (true)
    {
      assert outerInvariant(0, j, l1_sz, l2_sz, 0, t1, t2, l1, l2, ret);
    }
    
    if (i < l1_sz && outerInvariant(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret))
    {
      assert innerInvariant(i, 0, l1_sz, l2_sz, ret_sz, l1[i], t2, l1, l2, ret);
    }
    
    if (!(i < l1_sz) && outerInvariant(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret))
    {
      assert postCondition(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
    }
    


    
    // inner invariant
        
    if (i < l1_sz && outerInvariant(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret))
    {
      assert innerInvariant(i, 0, l1_sz, l2_sz, ret_sz, l1[i], t2, l1, l2, ret);
    }
  
    
    if (i < l1_sz && outerInvariant(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret) &&
        j < l2_sz && innerInvariant(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret))
    {
      //assert innerInvariant(i, j + 1, l1_sz, l2_sz, ret_sz + 1, t1, l2[j], l1, l2,
       //                     CrossProduct_append(ret, ret_sz, CrossProduct_newTuple(t1, l2[j])));
        
      assert l2[j].roleId == t1.roleId && 
             innerInvariant(i, j + 1, l1_sz, l2_sz, ret_sz + 1, t1, l2[j], l1, l2,
                            CrossProduct_append(ret, ret_sz, CrossProduct_newTuple(t1, l2[j]))) || 
             !(l2[j].roleId == t1.roleId) && 
             innerInvariant(i, j + 1, l1_sz, l2_sz, ret_sz, t1, l2[j], l1, l2, ret);              
        
    }
    
     
     
    if (i < l1_sz && outerInvariant(i, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret) && 
        !(j < l2_sz) && innerInvariant(i, j, l1_sz, l2_sz, ret_sz, l1[i], t2, l1, l2, ret))
    {
      assert outerInvariant(i + 1, j, l1_sz, l2_sz, ret_sz, t1, t2, l1, l2, ret);
    }
    
  }
}

