int W=8;
int N=2;
int TSIZE=1<<N;
int X=2;

bit[W] remainder(bit[X*W] in)
{
	bit[W] poly=0;
	poly[W-1]=1; poly[W-2]=1; poly[W-3]=1; //CRC-8
	bit[W] ret=0;
	for(int i=0;i<X*W;i++) {
		bit fl=ret[0]^in[i];
		ret=ret<<1;
		if(fl) ret=ret^poly;
	}
	return ret;
}

bit iszero(bit[N] in)
{
	bit res=1;
	for(int i=0;i<N;i++)
		res=res & !in[i];
	return res;
}

bit[W] remainderOpt(bit[X*W] in) implements remainder
{
	bit[W] poly=0;
	poly[W-1]=1; poly[W-2]=1; poly[W-3]=1; //CRC-8
	bit[W] ret=0;
	bit[N]tmp;
	for(int i=0;i<X*W/N;i++) {
		//ret=(ret<<N)^table[in[i*N::N]^ret[0::N]]; // what I really want to write here but can't
		for(int j=0;j<N;j++)tmp[j]=in[i*N+j]^ret[j];
		ret=ret<<N;
		loop(TSIZE) {
			if(iszero(tmp^??)) {
				ret=ret^??;
			}
		}
	}
	return ret;
}

