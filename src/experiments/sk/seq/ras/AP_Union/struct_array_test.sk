pragma options "--synth ABC --cbits 7 --branchamnt 10 --inlineamnt 4 --arrayOOBPolicy assertions --keepasserts";

int dummy() { return 1; }

#define N 3

int main() implements dummy {
	// The specification, given as three examples.
	// DFS(graph) is to return the number of visited nodes
	
	Graph_AdjacencyMatrix g = createGraph();
	g = addEdge(g,0,1);
	g = addEdge(g,1,2);
	g = addEdge(g,2,0);
	assert DFS(g) == 3;  
	
	g = createGraph();
	g = addEdge(g,0,1);
	g = addEdge(g,1,0);
	assert DFS(g) == 2;

	g = createGraph();
	g = addEdge(g,1,0);
	g = addEdge(g,2,0);
	assert DFS(g) == 1;

	return 1;
}
 
//////////////////////////////////////////
// The graph, as an adjacency matrix
//////////////////////////////////////////
#define ROOT 0   /* id of the root node */
struct Node {
	bit marked;
}
struct Graph_AdjacencyMatrix {
	Node[N] nodes;  // int --> node map
	bit[N][N] am;   // adjacency matrix [from][to]
}
Graph_AdjacencyMatrix createGraph() {
	Graph_AdjacencyMatrix g = new Graph_AdjacencyMatrix();
	for (int i = 0; i < N; i++) {
		g.nodes[i] = new Node();
		g.nodes[i].marked = false;
	}
	return g;
}
Graph_AdjacencyMatrix addEdge(Graph_AdjacencyMatrix g, int from, int to) {
	g.am[from][to] = true;
	return g;
}
static bit edgeExists(Graph_AdjacencyMatrix g, int from, int to) {
	return g.am[from][to];
}
static Node node(Graph_AdjacencyMatrix g, int u) {
	return g.nodes[u];
}
int DFS(Graph_AdjacencyMatrix g) {
	return DFS_rec(g,ROOT);
}
static int DFS_rec(Graph_AdjacencyMatrix g, int u) {
	Node n = node(g,u);
	if ({| true | false | n.marked |}) 
		return ??; 
	n.marked = ??;
	int visitedCnt = ??;
	 
	for (int v = 0; v < N; v++) {
		if (edgeExists(g,{|u|v|},{|u|v|})) {
			visitedCnt += DFS_rec(g,{|u|v|});
		}
	}
	return {|u|visitedCnt|};
}

//////////////////////////////////////////


//////////////////////////////////////////
// The graph, as an adjacency list (TODO)
//////////////////////////////////////////
struct Edge {
	int from;
	int to;
}
struct Graph_List {
	int nodeCnt;
	Node[N] nodes;
	
	int edgeCnt;
	Edge[N] edges;
} 