pragma options "--bnd-cbits 3 --bnd-inline-amnt 8 --bnd-unroll-amnt 8 --bnd-heap-size 8 --slv-seed 1 --bnd-inbits 2 --slv-synth ABC --bnd-branch-amnt 3 --debug-show-phase final --fe-keep-asserts --debug-verbosity 1 --sem-array-OOB-policy assertions";

int dummy(int x) { return 1; }

#define N 8   // size of tree

struct Node { 
	int  data;
	Node left;
	Node right;
}

#define NA N-1    // max number of number of Node angels
#define BA N-1    // max number of number of bit angels

Node[N] _Node_;  // list of allocated nodes
int _n_;         // next allocated node (indexes into _Node_)  
int[NA] _rn_;     // angelic choices for Nodes 
int _nc_;        // id of next Node angel (indexes into _rn_) 
generator Node _NodeChoice_() { int t = _nc_; _nc_++; return _Node_[_rn_[t]]; } /* automatically rewritten */
#define _N (_NodeChoice_())

bit[BA] _r_; 
int _i_;
generator bit _BitChoice_() { int t = _i_; _i_++; return _r_[t]; } /* automatically rewritten */
#define _b (_BitChoice_())


generator Node newNode(int data) { /* automatically rewritten */
	Node n = new Node();
	_Node_[_n_] = n;
	_n_++;
	n.data = data;
	return n;
}

// traverse the tree inorder and return the data fields in the returned array 
generator int[N+1] inorder(Node root) { /* automatically rewritten */
	int[N+1] ret = 0;
	ret[0] = -1; //let's use -1 as a sentinel
	if (root == null) 
		return ret;
	if (root.left != null) {
		ret = inorder(root.left);
	}
	int i=0;
	while (ret[i]!=-1 && i<N) i++;
	if (i < N) {
		ret[i] = root.data;
		assert root.data!=-1;
		i++;
		ret[i] = -1;
	}
	if (root.right != null) {
		int[N+1] r = inorder(root.right);
		for (int j=0; i < N; i++) {
			ret[i]=r[j];
			j++;
		}
		ret[i]=-1;
	}
	return ret;
}

int harness (int x) implements dummy {
	// angel implementation
	_rn_ = ??; _nc_ = 0; _n_ = 0;
	_r_ = ??; _i_ = 0;
	
	int[N] input;
	for (int i=0; i<N; i++) {
		input[i] = 10-i;
	}

	//Node root = test(input);
	// Node root = insertAll(input);
	
	Node root = null;
	for (int i = 0; i < N; i++) {
		if (root == null)
			root = newNode(input[i]);
		else {
			Node nn = newNode(input[i]);
			// !!.{| left !! right |} = nn
			Node n = _N;  
			bit c = _b;  
			if (!c) n.left = nn;
			else n.right = nn;
		} 
	}
	
	int[N+1] ret = inorder(root);
	// corectness condition: sortedness
	int p = ret[0];
	for (int i = 1; i<N; i++) {
		assert p <= ret[i];
		p = ret[i];
	}
	// correctness: same elements as on the input
	for (int i = 0; i<N; i++) {
		// assert input[i] == ret[i];  // this check is valid when input is in increasing order
		assert input[i] == ret[N-i-1];  // this check is valid when input is in decreasing order
	}
	return 1;
}


generator Node insertAll(int[N] input) { /* automatically rewritten */
	Node root = null;
	for (int i = 0; i < N; i++) {
		root = insertT(root, input[i]); 
	}
	return root;
}

Node insertT(Node root, int data) { /* automatically rewritten */
	if (root == null)
		return newNode(data);
	
	Node nn = newNode(data);
	// !!.{| left !! right |} = nn
	Node n = _N;  
	bit c = _b;  
	if (!c) n.left = nn;
	else n.right = nn;
	return root;
}

generator Node test(int[N] input) { /* automatically rewritten */
	Node root = newNode(input[1]);
	Node n = newNode(input[0]);
	Node m = newNode(input[2]);
	root.left = n;
	root.right = m;
	return root;
}