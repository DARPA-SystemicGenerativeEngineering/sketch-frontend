pragma options "--seed 1 --heapsize 31 --inbits 2 --synth MINI --cbits 5 --showphase final --keepasserts --unrollamnt 31 --verbosity 1 --arrayOOBPolicy assertions";

int dummy(int x) { return 1; }

#define N 21  // size of linked list

struct Node { 
	int  data;
	Node next;
}

#define A 2*N+3     // max number of number of angels
Node[N] _Node_;  // list of allocated nodes
int _n_;         // next allocated node (indexes into _Node_  
int[A] _rn_;     // angelic choices for Nodes 
int _nc_;        // id of the Node angel
Node _NodeChoice_() { int t = _nc_; _nc_++; return _Node_[_rn_[t]]; }
#define _N (_NodeChoice_())
Node _NodeChoice2_() { int t = _nc_; _nc_++; assert _rn_[t-1]-_rn_[t] < 2; return _Node_[_rn_[t]]; }
#define _N2 (_NodeChoice2_())

Node newNode() {
	Node n = new Node();
	_Node_[_n_] = n;
	_n_++;
	return n;
}

int harness (int x) implements dummy {
	// angel implementation
	_rn_ = ??; _nc_ = 0; _n_ = 0;
	
	// allocate N nodes and remember them 
	Node[N] list;
	int j;
	for (j = 0; j<N; j++) {
		list[j]=newNode();
	}
	// create a linked list
	for (j = 0; j<N-1; j++) {
		list[j].next=list[j+1];
		list[j].data = j;
	}
	list[N-1].next=null;
	list[N-1].data=N-1;

	// angelically reverse the list 
	for (int jj = 0; jj<N; jj++) {
		Node n1 = _N;
		Node n2 = _N;
		n2.next = n1; 
	}
	Node n3 = _N;
	n3.next = null;
	
	// correctness condition: the list must be reversed
	Node n4 = list[N-1];  // this is the new head
	int k = N-1;          // for checking the data fields
	loop (N) {
		assert n4.data == k;
		k--;
		n4 = n4.next;
	}	
	assert n4 == null;
	
	return 1;
}
