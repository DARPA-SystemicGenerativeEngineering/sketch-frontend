pragma options "--cbits 4 --inlineamnt 2 --unrollamnt 17 --heapsize 16 --seed 3 --inbits 2 --synth MINI --branchamnt 3 --showphase final --keepasserts --verbosity 1 --arrayOOBPolicy assertions";

int dummy(int x) { return 1; }

#define N 16   // size of tree

struct Node { 
	int  data;
	Node left;
	Node right;
}

#define NA N-1     // max number of number of Node angels
#define BA N-1    // max number of number of bit angels

Node[N] _Node_;  // list of allocated nodes
int _n_;         // next allocated node (indexes into _Node_)  
int[NA] _rn_;     // angelic choices for Nodes 
int _nc_;        // id of next Node angel (indexes into _rn_) 
Node _NodeChoice_() { int t = _nc_; _nc_++; return _Node_[_rn_[t]]; }
#define _N (_NodeChoice_())

bit[BA] _r_; 
int _i_;
bit _BitChoice_() { int t = _i_; _i_++; return _r_[t]; }
#define _b (_BitChoice_())


Node newNode(int data) {
	Node n = new Node();
	_Node_[_n_] = n;
	_n_++;
	n.data = data;
	return n;
}

// the check routine is slower than allPresent() becasue it is recursive, causing blow up 
// in the SAT formula.
//
// traverse the tree inorder and checks data fields against desired result; 
// ir indexes into remainder of result; returns ir pointing to rest of the result
static int check(Node n, int[N+1] result, int ir) {
	if (n == null) {
		assert result[ir]==-1;  // we must be at the end of the result
		return ir;
	}
	if (n.left != null) 
		ir = check(n.left, result, ir);
	assert result[ir] == n.data;
	ir++;
	if (n.right != null)
		ir = check(n.right, result, ir);
	return ir;
}

void allPresent(Node root, int[N] input) {
	for (int i=0; i<N; i++) {
		assert find(root, input[i]);
	}
}

bit find(Node n, int d) {
	while (n!=null) {
		if (d==n.data) return 1;
		else if (d<n.data) n=n.left;
		else n=n.right;
	}
	return 0;
}

int harness (int x) implements dummy {
	// angel implementation
	_rn_ = ??; _nc_ = 0; _n_ = 0;
	_r_ = ??; _i_ = 0;
	
	int[N] input =  { 3, 9, 2, 11, 6, 5, 7, 4, 8, 16, 10, 1, 12, 13, 14, 15 } ;
	//int[N] input =  { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 } ;
	
	Node root = null;
	for (int i = 0; i < N; i++) {
		if (root == null)
			root = newNode(input[i]);
		else {
			Node nn = newNode(input[i]);
			// !!.{| left !! right |} = nn
			Node n = _N;  
			bit c = _b;  
			if (!c) n.left = nn;
			else n.right = nn;
		} 
	}
	
	// assert N == check(root, output, 0);
	allPresent(root,input);
	
	return 1;
}
