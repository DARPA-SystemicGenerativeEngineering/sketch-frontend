pragma options "--verif MINI --inbits 1 --cbits 2 --heapsize 1 --arrayOOBPolicy assertions";

#define N 4

//
// Modeling multiplication
// 
#define T bit
generator T mul(T x, T y) { /* automatically rewritten */
	// return x * y;  // T == int
	return x & y;  // T == bit
	// if (x == 0 || y == 0) return 0;  
	// if (x == 0) return 0;  
	// else return ufun_ii(x,y);
}
generator T ufun_ii(T x, T y); /* automatically rewritten */

//int[N][N] sd(int[N][N] a) implements identity {
//	return desparsify(sparsify(a));
//}
T[N] main(T[N][N] A, T[N] x) implements DeMV {
	return SpMV(sparsify(A), x, N);
}
generator int harness () { // implements one { /* automatically rewritten */
	T[N*N] a = {1,0,0,1};
	T[N] x ={1,1};
	T[N][N] dA;
	int k = 0;
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++) 
			dA[i][j] = a[k++];
			
	CSR sA = sparsify(dA);
	T[N] y = SpMV(sA,x,N);
	T[N] yy = DeMV(dA,x);
	assert y[0] == yy[0];
	//assert y[1] == yy[1];
	//assert y[2] == yy[2];
	return 1;
}  
generator int one () { return 1; } /* automatically rewritten */

struct CSR {
	T[N*N] V;
	int[N*N] C;
	int[N+1] R;
}

CSR sparsify(T[N][N] a) { /* automatically rewritten */
	CSR sm = new CSR();
	
	int idx = 0;
	sm.R[0]=idx;
	
	for (int r = 0; r < N; r++) {
		sm.R[r] = idx;
		for (int c = 0; c < N; c++) {
			if (a[r][c] != 0) {
				sm.V[idx] = a[r][c];
				sm.C[idx] = c;
				idx++;  
			}
		}
	}
	sm.R[N] = idx;
	return sm;
}

int[N][N] desparsify(CSR sm) { /* automatically rewritten */
	T[N][N] a = 0;
	for (int r = 0; r < N; r++) {
		for (int idx = sm.R[r]; idx < sm.R[r+1]; idx++) {
			a[r][sm.C[idx]] = sm.V[idx];
		}
	}
	return a;
}



//
// computes y = Ax on dense A, x, and y.
// 
T[N] DeMV(T[N][N] A, T[N] x) {
	T[N] y;
	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int c = 0; c < N; c++) {
			y[r] += mul(A[r][c],x[c]);  
		}
	} 
	return y;	
}

//
// computes y = Ax on sparse A and dense x and y.
// 
T[N] SpMV(CSR A, T[N] x, int n) { /* automatically rewritten */
	T[N] y;
	
	for (int r = 0; r < n; r++) {
		y[r] = 0;
		for (int idx = A.R[r]; idx < A.R[r+1]; idx++) {
			y[r] += mul(A.V[idx],x[A.C[idx]]);  
		}
	} 
	return y;	
}
generator int[N][N] identity(int[N][N] a) { /* automatically rewritten */
	return a;	
}
