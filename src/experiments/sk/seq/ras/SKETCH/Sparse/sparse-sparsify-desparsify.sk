pragma options "--bnd-inbits 1 --bnd-cbits 1 --bnd-heap-size 1 --slv-verif ABC --sem-array-OOB-policy assertions";

#define N 3

int[N][N] sd(int[N][N] a) implements identity {
	return desparsify(sparsify(a));
}

struct CSR {
	int[N*N] V;
	int[N*N] C;
	int[N+1] R;
}

CSR sparsify(int[N][N] a) { /* automatically rewritten */
	CSR sm = new CSR();
	
	int idx = 0;
	sm.R[0]=idx;
	
	for (int r = 0; r < N; r++) {
		sm.R[r] = {|idx|r|};
		for (int c = 0; c < N; c++) {
			if (a[{|r|c|}][{|r|c|}] != 0) {
				//sm.V[idx] = a[r][c];
				//sm.C[idx] = c;
				//idx++;  
				if (??) sm.V[idx+??] = a[{|r|c|}][{|r|c|}]; 
				else    sm.C[idx+??] = a[{|r|c|}][{|r|c|}];
				
				if (??) sm.V[idx+??] = {|r|c|}; 
				else sm.C[idx+??] =    {|r|c|};
				idx = idx+??; //idx++;    // ----- hard ----  
			}
		}
	}
	sm.R[N] = idx;
	return sm;
}

int[N][N] desparsify(CSR sm) { /* automatically rewritten */
	int[N][N] a = 0;
	for (int r = 0; r < N; r++) {
//		for (int idx = sm.R[r]; idx < sm.R[r+1]; idx++) {
//			a[r][sm.C[idx]] = sm.V[idx];
//		}
		for (int idx = sm.R[r]; idx < sm.R[r+??]; idx++) {
			a[r][sm.C[idx]] = sm.V[idx];
		}
	}
	return a;
}

int[N][N] identity(int[N][N] a) {
	return a;	
}
