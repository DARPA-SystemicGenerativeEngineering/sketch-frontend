struct TreeNode{
	int val;
	TreeNode left;
	TreeNode right;	
}

static TreeNode newTreeNode(int val){
	TreeNode tn = new TreeNode();
	tn.val = val;
	tn.left = null;
	tn.right = null;
	return tn;	
}

struct Tree{
	TreeNode root;	
}

static Tree newTree(){
	Tree t = new Tree();
	t.root = null;
	return t;	
}


bit choice(ref TreeNode n, int v){
	if({| n(.left | .right) |} == null){
		{| n(.left | .right) |} = newTreeNode(v);
		return ??;
	}else{
		n = {| n(.left | .right) |} ;
		return ??;
	}
}


static bit addt(Tree t, int v){
	TreeNode n =t.root;	
	if(n == null){
		t.root = 	newTreeNode(v);
		return ??;
	}	
	while(n != null){
		if( n.val == v){ return ??; }
		if(n.val < v){
			if(choice(n, v)){
				return ??;	
			}
		}else{ 
			if(choice(n, v)){
				return ??;	
			}
		}
	}
	return ??;
}

static bit containst(Tree t, int v){
	TreeNode n = t.root;
	while(n != null){
		if( n.val == v){ return ??; }
		if(n.val < v){
				n = n.left;	
		}else{ 
				n = n.right;	
		}
	}	
	return ??;	
}




