pragma options "--inbits 16 --cbits 5 --synth MINI --verif MINI --keepasserts --keeptmpfiles";

// This problem was posed by Satish Chandra:
//  SEND
// +MORE
// -----
// MONEY
//
// You have to assign *unique* digits to all the characters. 

int one () { return 1; }
int main () implements one {

#define def(letter) int letter = ??; assert 0<=letter && letter<=9;

// second column shows a solution that we find when M is not required to be 0.
def(S);  // 2  6  5
def(E);  // 4  4  8
def(N);  // 8  1  4
def(D);  // 5  9  9
def(M);  // 1  0  0
def(O);  // 3  7  6
def(R);  // 6  2  3
def(Y);  // 9  3  7
	
assert  S != E;
assert  S != N;
assert  S != D;
assert  S != M;
assert  S != O;
assert  S != R;
assert  S != Y;

assert  E != N;
assert  E != D;
assert  E != M;
assert  E != O;
assert  E != R;
assert  E != Y;

assert  N != D;
assert  N != M;
assert  N != O;
assert  N != R;
assert  N != Y;

assert  D != M;
assert  D != O;
assert  D != R;
assert  D != Y;

assert  M != O;
assert  M != R;
assert  M != Y;

assert O != R;
assert O != Y;

assert R != Y;

assert             1000 * S + 100 * E + 10 * N + D 
                 + 1000 * M + 100 * O + 10 * R + E 
    == 10000 * M + 1000 * O + 100 * N + 10 * E + Y;
    
//assert (D+E)%10            == Y;
//assert (N+R)%10 + (D+E)/10 == E;
//assert (E+O)%10 + (N+R)/10 == N;
//assert (S+M)%10 + (E+O)/10 == O;

//assert                   1 == M;

return 1;
}
