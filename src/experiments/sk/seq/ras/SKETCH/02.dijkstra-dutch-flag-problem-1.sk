int N = 5;

// Note that we rely on the fact that RED < WHITE < BLUE
#define RED 	1
#define WHITE 	2
#define BLUE 	3

#define swap(a,b) { int _a = (a);    \
                    int _b = (b);    \
                    int _t = in[_a]; \
                    in[_a] = in[_b]; \ 
                    in[_b] = _t; }

//#include "02.dijkstra-tests.h"

////////////////////////////////////////

// computes a correct result, but does so without 
// meeting the restrictions of using just swap(i,j)
 
int[N] spec(int[N] in) {
	int reds = 0, blues = 0, whites = 0;
	int i;
	int[N] out;
	for (i = 0; i < N; i++) {
		if (in[i] == RED) reds++;
		else if (in[i] == WHITE) whites++;
		else if (in[i] == BLUE) blues++;
	}
	i = 0;
	while (reds-- > 0)   out[i++] = RED;
	while (whites-- > 0) out[i++] = WHITE;
	while (blues-- > 0)  out[i++] = BLUE;
	return out;
}

bit equal (int[N] in1, int[N] in2) {
	for (int i = 0; i < N; i++) { 
		if (in1[i] != in2[i]) 
			return 0;
	}
	return 1;
}

////////////////////////////////////////

static void P1(int[N] buckets, int a, int b, int c)
{
	// a, b, c partition the buckets into regions 
	assert 0<=a;
	assert a<=b;
	assert b<=c;
	assert c<N;
	
	// Note: I initially had i < b, etc, but later changed these
	// to i <= a because ?? is nonnegative and so {|y|z|}+?? below
	// could not generate y-1.  This turned out to be a bug because
	// i<=a required that at least the first element was RED.  So,
	// We want to sketch the boundaries.  The hard part seems to be 
	// whether a, b, c denote last element of previous region or 
	// first element of next region.    
	
	// each region but one middle one is monochromatic 
	for (int i = 0; i < N; i++) {
		if ({| i<=a | i<a |})      assert buckets[i] == RED;
		else if ({| i<=b | i<b |}) assert buckets[i] == WHITE;
		else if ({| i<=c | i<c |}) assert true;
		else                       assert buckets[i] == BLUE;
	}
}  

// invariant that will hopefully hold in final state, too
 
static void P2(int[N] buckets, int a, int b, int c)
{
	// a, b, c partition the buckets into regions
	
	// NOTICE the -1 in b<=c-1 !!! 
	assert 0<=a && a<=b && b<=c-1 && c<N;
	
	// Note: I initially had i < b, etc, but later changed these
	// to i <= a because ?? is nonnegative and so {|y|z|}+?? below
	// could not generate y-1.  This turned out to be a bug because
	// i<=a required that at least the first element was RED.  So,
	// We want to sketch the boundaries.  The hard part seems to be 
	// whether a, b, c denote last element of previous region or 
	// first element of next region.    
	
	// each region but one middle one is monochromatic 
	for (int i = 0; i < N; i++) {
		if ({| i<=a | i<a |})
			assert buckets[i] == RED;
		if ({| a<=i | a<i |} && {| i<=c | i<c |} && {| i<=b | i<b |}) 
			assert buckets[i] == WHITE;
		if ({| c<=i | c<i |})
			assert buckets[i] == BLUE;
	}
}  








int main () 
// implements one 
{ 
	test5(); 
	return 1; 
}
int one () { return 1; }

static int test5 () 
{
	int[N] in = { WHITE };
	//int[N] out1 = spec(in);
	int[N] out2 = dutch(in);
	//assert(??==out2[0]);
	return 1;
}

int two(int[N] in) {
	return 1;
}










///////////////////////////////////////////////////////////////////
// Experiment for the lecture: 
// test when we discover that P1 actually cannot hold in final state
// 
int test_P1(int[N] x) 
//implements two 
{	
	// generate all inputs of size N==3
	int[N] in;
				
	int[3] table = {RED, WHITE, BLUE};
	int i = 0;
	
	loop(3*3*3) {
		if (0<N) in[0] = table[i%3];
		if (1<N) in[1] = table[i%(3*3)/3];
		if (2<N) in[2] = table[i%(3*3*3)/(3*3)];
		if (3<N) in[3] = table[i%(3*3*3*3)/(3*3*3)];
		if (4<N) in[4] = table[i%(3*3*3*3*3)/(3*3*3*3)];
		i++;
		
		int[N] correct = spec(in);
		int[N] out1 = dutch_P1_5(in);   // <==========
		assert equal(out1, correct);
		
		// int a = ??, b = ??, c = ??; 
		// P1(correct, a, b, c);
		// assert b==c+1;
	}
	return 1;
}

// Step 5.6: same for remaining colors
int[N] dutch_P1_6 (int[N] in) 
{
	int a = 0, b = 0, c = N-1;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff_;
	
#define e(c,x,y) (c==0?x:c==1?x+1:c==2?x-1:c==3?y:c==4?y+1:y-1)
int h1 = ??, h2 = ??, h3 = ??, h4 = ??;

	loop (N) { diff_ = c-b;
		int i = e(h1,b,c);  // {| b | c |} + ??;
		int color = in[i];
		if (color == RED) {	
			int j = a+h2;  // {| a | b | c |} + ??; 		
			if (true) swap(i,j);
			a = a+1; b = b+1; c = c; 
		} else if (color == WHITE) {
			int j = b+h3;  // {| a | b | c |} + ??; 		
			if (false) swap(i,j);
			a = a; b = b+1; c = c;  
		} else if (color == BLUE) {
			int j = c-h4;  // {| a | b | c |} + ??; 		
			if (true) swap(i,j);
			a = a; b = b; c = c-1; 
		} 
		//P1(in, a, b, c);  // comment this line out to remove the bug in step 5.6
		assert diff_-1 == c-b; 
	}		
	// the following must be commented out to resolve this sketch
	// This is what I had in the sktech when I nondet generated the trace
	// It doesn't matter whether this assert is in our slides or not;
	// Step5 resolves with it and Step 6 does not resolve even without it
	// assert b == c;  
	// FYI: assert b > c fails
	
	return in;
}

// Step 5.5: compute the bucket to read
// This step still has a solution
int[N] dutch_P1_5 (int[N] in) 
{
	int a = 0, b = 0, c = N-1;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff_;
	
	loop (N-1) { diff_ = c-b;  // this loop needs only N-1 iteration
		print2(333,444);
		int i = b;  // {| b | c |} + ??;
		int color = in[i];
		if (color == RED) {	
			int j = a;  // {| a | b | c |} + ??; // b, b+1, a+1 work		
			if (true) swap(i,j); print3(i,j,888);
			a = a+1; b = b+1; c = c;  // a=a+2, a=a do not work here
		}
		else { 
			if (??) { int k = ??; swap(i,k); print3(i,k,777); } 
			a = ??; b = ??; c = ??;
		} 
		P1(in, a, b, c);
		assert diff_-1 == c-b; 
	}		
		
	assert b == c;  // This is what I had when I nondet generated the trace
	// FYI: assert b > c fails
	
	return in;
}

// Step 5.4: compute the second element (too many solutions)
int[N] dutch_P1_4 (int[N] in) 
{
	int a = 0, b = 0, c = N-1;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff_;
	
	loop (??) { diff_ = c-b;
		int i = b;  // {| b | c |} + ??;
		int color = in[i];
		if (color == RED) {	
			int j = a;  // {| a | b | c |} + ??; 
			// a,b work here 
			// a+1, b+1 does not work, but it does when swap is guareded by if(??)
			// this was tested for N==3; n==4 too slow for my laptop 		
			if (true) swap(i,j);
			a = ??; b = ??; c = ??;
		}
		else { 
			if (??) swap(i,??);
			a = ??; b = ??; c = ??;
		} 
		P1(in, a, b, c);
		assert diff_-1 == c-b; 
	}		
		
	assert b == c;  // This is what I had when I nondet generated the trace
	// FYI: assert b > c fails
	
	return in;
}

// Step 5.3: compute the bucket to read
int[N] dutch_P1_3 (int[N] in) 
{
	int a = 0, b = 0, c = N-1;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff_;
	
	loop (??) { diff_ = c-b;
		int i = b;  // {| b | c |} + ??;
		if (??) swap(i,??);
		a = ??; b = ??; c = ??; 
		P1(in, a, b, c);
		assert diff_-1 == c-b; 
	}		
		
	assert b == c;  // This is what I had when I nondet generated the trace
	// FYI: assert b > c fails
	
	return in;
}

// Step 5.2 from slides: 
int[N] dutch_P1_2 (int[N] in) 
{
	int a = 0, b = 0, c = N-1;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff_;
	
	loop (??) { diff_ = c-b;
		if (??) swap(??,??);
		a = ??; b = ??; c = ??; 
		P1(in, a, b, c);
		assert diff_-1 == c-b; 
	}		
		
	assert b == c;  // This is what I had when I nondet generated the trace
	// FYI: assert b > c fails
	
	return in;
}

// TODO: turn this routine into Step 5.1 from slides 
int[N] dutch_P1_1 (int[N] in) 
{
	int a = 0, b = 0, c = N-1;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff_;
	
	loop (??) { diff_ = c-b;
		if (??) swap(??,??);
		a = ??; b = ??; c = ??; 
		P1(in, a, b, c);
		assert diff_-1 == c-b; 
	}		
		
	assert b == c;  // This is what I had when I nondet generated the trace
	// FYI: assert b > c fails
	
	return in;
}









///////////////////////////////////////////////
bit expr(int a, int b, int c, int N) {
	if (??) return 0==a;
	if (??) return a==b;
	if (??) return b==c;
	return c==N-1;
}

int H=11;
// static 
int[N] dutch(int[N] in) 
{
	int[H] h = ??;  // for fixed holes used in the loop(??) below
	
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff = c - b;
	
	// we'd like to declaratively give these constraints for this loop:
	//
	//    strictly monotone (up or down): c-b
	//    monotone: a, b, c
	//
	int j, a_, b_, c_, diff_;
	
	loop (7) {  // 10 added so that loop() cannot 
	             // terminate before the if below  
	    // while (c-b > 0)
	    // later changed to while (c-b>=??) with the 
	    // hole being fixed for all inputs  
		print2(c-b,10000);
	    if (c-b>=-1) {
		
		//P1(in, a, b, c);  // moved here once I realized that P1 cannot hold in final state.
		
		a_ = a; b_ = b; c_ = c; diff_ = diff;

		// pick the element to read 
		int i = b_+1;

		// are we picking the same element, as a function of c or b?
#define e(c,x,y) (c==0?x:c==1?x+1:c==2?x-1:c==3?y:c==4?y+1:y-1)
		// assert i==e(h[9], b_, c_);
		// assert i==b_+1;  // simplified, we learnt that we read b_+1

		int color = in[i];
				
		// find regions for which the invariant holds 
		// such that the mix region shrinks 
		if (color == RED) {
			a = a_+h[0];  // need a way to specify thesre holes are global
			b = b_+h[1];
			c = c_-h[2];
			j = a_;
		} 
//		else if (color == BLUE) {
//			a = a_+h[3];  // need a way to specify thesre holes are global
//			b = b_+h[4];
//			c = c_-h[5];
//			j = ??; //c_;
//			print2(j,c_);
//		} 
		else if (color == WHITE) {
			a = a_+h[6];  // need a way to specify thesre holes are global
			b = b_+h[7];
			c = c_-h[8];
			j = b_;
		} 
		else { // BLUE
			a = ??; b = ??; c = ??;  

			assert a == a_+h[3];  // need a way to specify thesre holes are global
			assert b == b_+h[4];
			assert c == c_-h[5];

			int hh=??;
			if (??) { j = c_; print2(j,c_);}
			else { j = c_+hh; print3(j,c_, hh);}
			assert j == c_;
		}

		if (??) swap(j,i);
		// P1(in, a, b, c);  // cannot hold at the end 
		assert a >= a_ && b >= b_ && c <= c_;
		
		diff = c - b;
		// pick one of the two constraints
		// (1) allow shrinking by more than 1
		// assert diff_ > diff; diff_ = diff; 
		// (2) force shrinking by 1
		assert diff_ == diff + 1; diff_--; 		 
	} // end while		
	}
	print(h);	
	// this condition should be enforced by the correctness condition, if
	// synthesized on all inputs
	
	assert diff == 0;  
	
	return in;
}

static int print2(int a, int b) { return a+b; }
static int print3(int a, int b, int c) { return a+b+c; }

int H=10;
static int[N] dutch_add_deterministic_statements_to_trace(int[N] in) 
{
	int[H] h = ??;  // for fixed holes used in the loop(??) below
	
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff = c - b;
	
	// we'd like to declaratively give these constraints for this loop:
	//
	//    strictly monotone (up or down): c-b
	//    monotone: a, b, c
	//
	int a_, b_, c_, diff_;
	
	loop (??) {
		a_ = a; b_ = b; c_ = c; diff_ = diff;
		 
		// find two pebbles to swap, optionally
		int i = ??;  // swap i with someone
		int color = in[i];
		int j = ??;
		if (??) swap(j,i);
		
		// find regions for which the invariant holds 
		// such that the mix region shrinks 
		a = ??; b = ??; c = ??; diff = c - b;
		P1(in, a, b, c);
		assert a >= a_ && b >= b_ && c <= c_;
		
		// pick one of the two constraints
		// (1) allow shrinking by more than 1
		// assert diff_ > diff; diff_ = diff; 
		// (2) force shrinking by 1
		assert diff_ == diff + 1; diff_--; 

		// are we picking the same element, as a function of c or b?
#define e(c,x,y) (c==0?x:c==1?x+1:c==2?x-1:c==3?y:c==4?y+1:y-1)
		//assert i==e(h[9], b_, c_);
		assert i==b_+1;  // we learnt that we read b_+1
		
		// are the region updates the same per color?
		// are we swapping elements same way per color? 
		if (color == RED) {
			assert a == a_+h[0];  // need a way to specify thesre holes are global
			assert b == b_+h[1];
			assert c == c_-h[2];
			assert j == a_;
		} 
		if (color == BLUE) {
			assert a == a_+h[3];  // need a way to specify thesre holes are global
			assert b == b_+h[4];
			assert c == c_-h[5];
			assert j == c_;
		} 
		if (color == WHITE) {
			assert a == a_+h[6];  // need a way to specify thesre holes are global
			assert b == b_+h[7];
			assert c == c_-h[8];
			assert j == b_;
		} 
	}		
	print(h);	
	// this condition should be enforced by the correctness condition, if
	// synthesized on all inputs
	
	assert diff == 0;  
	
	return in;
}

static int[H] print(int[H] a) { return a; }

static int[N] dutch_generates_a_trace (int[N] in) 
{
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	int diff = c - b;
	
	// we'd like to declaratively give these constraints for this loop:
	//
	//    strictly monotone (up or down): c-b
	//    monotone: a, b, c
	//
	int a_, b_, c_, diff_;
	
	loop (??) {
		a_ = a; b_ = b; c_ = c; diff_ = diff;
		 
		// find two pebbles to swap, optionally
		if (??) swap(??,??);
		
		// find regions for which the invariant holds 
		// such that the mix region shrinks 
		a = ??; b = ??; c = ??; diff = c - b;
		P1(in, a, b, c);
		// possible syntax:
		// P1(in, monotone(??), b=monotone(??), c=monotone(??))
		// assert strictlymonotone(c-b)
		
		assert a >= a_ && b >= b_ && c <= c_;
		
		// pick one of the two constraints
		
		// (1) allow shrinking by more than 1
		// assert diff_ > diff; diff_ = diff; 
		  
		// (2) force shrinking by 1
		assert diff_ == diff + 1; diff_--; 
	}		
		
	// this condition should be enforced by the correctness condition, if
	// synthesized on all inputs
	
	assert diff == 0;  
	
	return in;
}





















/////////////////////////////////////////

int test4() 
//implements one 
{
	//{ int[N] in = {WHITE, RED, BLUE, WHITE, BLUE, RED, WHITE, BLUE}; test44(in); }
	//{ int[N] in = {RED, WHITE, BLUE, RED, WHITE, BLUE, RED, WHITE}; test44(in); }
	//{ int[N] in = {BLUE, RED}; test44(in); }
	//{ int[N] in = {RED, BLUE}; test44(in); }
	//{ int[N] in = {WHITE, RED}; test44(in); }
	//{ int[N] in = {RED, WHITE}; test44(in); }
	//{ int[N] in = {RED, RED}; test44(in); }
	
	return 1;
}
int test44(int[N] in) 
implements two 
{	
	// assume all inputs are valid colors
	
	for (int i = 0; i < N; i++) {
		if (in[i] < RED || in[i] > BLUE) return 1;
	}

	int[N] out = dutch5(in);
	assert equal(out, spec(in));

	return 1;
}


// My second sketch.  See its bugs in dutch4()  
// First sketch is copied in OneNote

static int[N] dutch2 (int[N] in) 
{
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	
	while (c > b) {  // resolves when c>=b
		
		// Pick from around which boundary to read the one element.
		// We know that we read from the mixed region, from either side of it
		 
		int i = {| b | c |} + ??;

		int color = in[i];
		
		// check color and swap appropriately
		// we assume it makes sense to swap only around the boundaries
		
		if (color == RED) {
			// swap if necessary
			if (??) swap(i, a+??);
			// adjust boundaries
			a = a+??;
			b = b+??;
			c = c-??;
		} else if (color == WHITE) {
			// swap if necessary
			if (??) swap(i, b+??);
			// adjust boundaries
			a = a+??;
			b = b+??;
			c = c-??;		
		} else if (color == BLUE) { 
			// swap if necessary
			if (??) swap(i, c+??);
			// adjust boundaries
			a = a+??;
			b = b+??;
			c = c-??;	
		}
		P1(in, a, b, c);  // resolves when commented out
	}
	return in;
}

static int[N] dutch3 (int[N] in) 
{
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	
	while ({| c>b | c>=b |}) {
		
		// Pick from around which boundary to read the one element.
		// We know that we read from the mixed region, from either side of it
		 
		int i = {| b | c |} + {|0|1|-1|};

		int color = in[i];
		
		// check color and swap appropriately
		// we assume it makes sense to swap only around the boundaries
		
		if (color == RED) {
			// swap if necessary
			if (??) swap(i, {|a|b|c|}+{|0|1|-1|});
			// adjust boundaries
			a = a+??;
			b = b+??;
			c = c-??;
		} else if (color == WHITE) {
			// swap if necessary
			if (??) swap(i, {|a|b|c|}+{|0|1|-1|});
			// adjust boundaries
			a = a+??;
			b = b+??;
			c = c-??;		
		} else if (color == BLUE) { 
			// swap if necessary
			if (??) swap(i, {|a|b|c|}+{|0|1|-1|});
			// adjust boundaries
			a = a+??;
			b = b+??;
			c = c-??;	
		}
		P1(in, a, b, c);
	}
	return in;
}

static int[N] dutch4 (int[N] in) 
{
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	//P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	
	while (c>b) {  // BUG1: Was c>b.  Should be c>=b
		
		// P1(in, a, b, c);  // added in response to BUG2
		
		// Pick from around which boundary to read the one element.
		// We know that we read from the mixed region, from either side of it
		 
		int i = b;
		int color = in[i];
				
		if (color == RED) {
			swap(i, a);
			a = a+1;
			b = b+1;
		} 
		else if (color == WHITE) {
			b = b+1;
		} 
		else { 
			swap(i, c-??);
			c = c-1;	
		}
		// P1(in, a, b, c);  // BUG2: P1 could not be established at the end because then b>c and the invariant asks that b<=c  
	}
	//P2(in, a, b, c);
	return in;
}




static void foo(int[N] in, int a, int b, int c) {}

static int[N] dutch5 (int[N] in)  // two reads per step 
{
	// initialize the regions properly
	int a = ??, b = ??, c = N-??;
	//P1(in, a, b, c);
	
	// iterate until the mix region disappears  
	
	while (c-b>=??) {  // BUG1: Was c>b.  Should be c>=b
		
		P1(in, a, b, c);  // added in response to BUG2
		
		// Pick from around which boundary to read the one element.
		// We know that we read from the mixed region, from either side of it
		 
		int i = b;
		int color = in[i];
				
		if (color == RED) {
			if (??) swap(i, {|a|b|c|}+{|0|1|-1|});
			// swap(i, a);
			a = a+??;
			b = b+??;
			c = c-??;	
			//a = a+1;
			//b = b+1;
		} 
		else if (color == WHITE) {
			if (??) swap(i, {|a|b|c|}+{|0|1|-1|});
			a = a+??;
			b = b+??;
			c = c-??;	
			//b = b+1;
		} 
		else { 
			if (??) swap(i, {|a|b|c|}+{|0|1|-1|});
			// swap(i, c-??);
			a = a+??;
			b = b+??;
			c = c-??;	
			// c = c-1;	
		}
		//P1(in, a, b, c);  // BUG2: P1 could not be established at the end because then b>c and the invariant asks that b<=c  
	}
	//P2(in, a, b, c);
	return in;
}

