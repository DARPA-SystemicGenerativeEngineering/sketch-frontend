// Here we experiment with Mooly's idea of inserting a rpresentation function 
// into the dense MV kernel

pragma options "--debug-trace --debug-show-phase preproc --bnd-inbits 2 --bnd-cbits 2 --fe-force-codegen --fe-output-test --sem-array-OOB-policy assertions";

#define N 2

//
// Modeling multiplication
// 
#define T int
T mul(T x, T y) {
	return x * y;  // T == int
	// return x & y;  // T == bit
	// if (x == 0 || y == 0) return 0;  
	// if (x == 0) return 0;  
	// else return ufun_ii(x,y);
}
T ufun_ii(T x, T y);

//
//
//

//int[N][N] sd(int[N][N] a) implements identity {
//	return desparsify(sparsify(a));
//}
T[N] main(T[N][N] A, T[N] x) implements DeMV {
	return SpMV(sparsify(A), x);
}
int harness () { // implements one {
	T[N*N] a = {2,0,0,1};
	T[N] x ={3,2};
	T[N][N] dA;
	int k = 0;
	for (int i = 0; i < N; i++) 
		for (int j = 0; j < N; j++) 
			dA[i][j] = a[k++];
			
	CSR sA = sparsify(dA);
	T[N] y = SpMV(sA,x);
	T[N] yy = DeMV(dA,x);
	assert y[0] == yy[0];
	//assert y[1] == yy[1];
	//assert y[2] == yy[2];
	return 1;
}  
int one () { return 1; }

struct CSR {
	T[N*N] V;
	int[N*N] C;
	int[N+1] R;
}

static CSR sparsify(T[N][N] a) {
	CSR sm = new CSR();
	
	int idx = 0;
	sm.R[0]=idx;
	
	for (int r = 0; r < N; r++) {
		sm.R[r] = idx;
		for (int c = 0; c < N; c++) {
			if (a[r][c] != 0) {
				sm.V[idx] = a[r][c];
				sm.C[idx] = c;
				idx++;  
			}
		}
	}
	sm.R[N] = idx;
	return sm;
}

static int[N][N] desparsify(CSR sm) {
	T[N][N] a = 0;
	for (int r = 0; r < N; r++) {
		for (int idx = sm.R[r]; idx < sm.R[r+1]; idx++) {
			a[r][sm.C[idx]] = sm.V[idx];
		}
	}
	return a;
}



//
// computes y = Ax on dense A, x, and y.
// 
T[N] DeMV(T[N][N] A, T[N] x) {
	T[N] y;
	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int c = 0; c < N; c++) {
			y[r] += mul(A[r][c],x[c]);  
		}
	} 
	return y;	
}

//
// dense MV with the repre fun inserted wherever the dense array is accessed
// 
T[N] DeSpMV(T[N][N] A, T[N] x) {
	T[N] y;
	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int c = 0; c < N; c++) {
			// y[r] += mul(A[r][c],x[c]);
			T temp = repre(A,r,c);
			y[r] += mul(t,x[c]);  
		}
	} 
	return y;	
}

// to optimize the repre in the context of Dense MV, to obtain SpMV, 
// one must:
// - turn repre into a coroutine
// - make sure the coroutine returns on zero elements immediately, ie 
//   when the next non-zero element is encounetered, not after the whole row 
//   is traversed
// - realize that 0*x[c] terms need not be added to dot product
 
// 1,2) turn into a coroutine, return 0 without traversing the whole thing
// doing 1 wihtout 2 seems harder, as coroutine cannot be used
// Need to know that columns are sorted.

// CONTEXT:
// this transformation is legal if calls to repre are in increasing order on r
// and whole row is processed before next row is called
// 

// Another alternative, if the columns are not sorted
// Sktech trafo patterns like these: _3_ are meta (matching) variables 
// for (i=_; i<_; i++) 
//     for (j=_1_[r]; j<_1_[r+1];j++)
//          if (_4_==_2_[j]) return _3_[j]
// -->
// for (j=_1_[r]; j<_1_[r+1];j++)
//     return _3_[j]
 
coroutine T repre(CSR sA, int r, int c) {
	for (int idx = A.R[r]; idx < A.R[r+1]; idx++) {
		if (A.C[idx]==c) 
			return A.V[idx];
		else 
			return 0;  
	}
	return 0;  // element c,r not present in the sparse; hence it is 0 
}

// The rest is perhaps automatizable

// 3 do not add zero terms to dot product
T[N] DeSpMV(T[N][N] A, T[N] x) {
	T[N] y;
 	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int c = 0; c < N; c++) {
			T temp = repre(A,r,c);
			if (temp != 0) 
				y[r] += mul(t,x[c]);
			else 
				skip  
		}
	} 
	return y;	
}

// inline the two functions 

T[N] DeSpMV(T[N][N] A, T[N] x) {
	T[N] y;
	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int c = 0; c < N; c++) {
			{ coroutine T repre(CSR sA, int r, int c) {
				for (int idx = A.R[r]; idx < A.R[r+1]; idx++) {
					if (A.C[idx]==c) 
						temp = A.V[idx]; // return A.V[idx];
						goto P;
					else 
						temp = 0; // return 0;
						goto P;
					L:
				}
				return 0;  // element c,r not present in the sparse; hence it is 0 
			}			
			P:
			// T temp = repre(A,r,c);
			if (temp != 0) y[r] += mul(t,x[c]);
			else skip
			goto L  
		}
	} 
	return y;	
}

// Now inline
//
//			P:
//			// T temp = repre(A,r,c);
//			if (temp != 0) y[r] += mul(t,x[c]);
//			else skip
//			goto L  
//
// to where goto P is
// must remove the IF in the non-zero branch.  
// For that, we need to know that A.V[idx] is non-zero
// After that, we are done.

// return (the densely addressed) A[r][c] from the sparse matrix sA
// [[how easy is it to write this repre fun? I took the existing SpMV and
// turned it into a repre fun.  The SpMV is commented out]]    
T repre(CSR sA, int r, int c) {
//	for (int r = 0; r < N; r++) {
//		y[r] = 0;
		for (int idx = A.R[r]; idx < A.R[r+1]; idx++) {
//			y[r] += mul(A.V[idx],x[A.C[idx]]);  
			if (A.C[idx]==c) 
				return A.V[idx];  
		}
	} 	
	return 0;  // element c,r not present in the sparse; hence it is 0 
}

//
// computes y = Ax on sparse A and dense x and y.
// 
T[N] SpMV(CSR A, T[N] x) {
	T[N] y;
	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int idx = A.R[r]; idx < A.R[r+1]; idx++) {
			y[r] += mul(A.V[idx],x[A.C[idx]]);  
		}
	} 
	return y;	
}
int[N][N] identity(int[N][N] a) {
	return a;	
}
