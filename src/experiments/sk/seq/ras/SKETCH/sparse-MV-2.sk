pragma options "--showphase final --verbosity 7 --inbits 1 --cbits 3 --verif ABC --synth ABC --outputtest --outputcode --arrayOOBPolicy assertions";  

#define N 2

//
// Modeling multiplication
// 
//#define T bit
#define T int
T mul(T x, T y) {
	return x * y;  // T == int
	// return x & y;  // T == bit
	// if (x == 0 || y == 0) return 0; else return ufun_ii(x,y);
	// if (x == 0) return 0; else return ufun_ii(x,y);
}
T ufun_ii(T x, T y);

//
//
//

int[N] main(T[N][N] A, T[N] x) { // implements DeMV {
	return SpMV(sparsify(A), x, /* instr */ A);
}

struct CSR {
	T[N*N] V;
	int[N*N] C;
	int[N+1] R;
}

static CSR sparsify(T[N][N] a) {
	CSR sm = new CSR();
	
	int idx = 0;
	sm.R[0]=idx;
	
	for (int r = 0; r < N; r++) {
		sm.R[r] = idx;
		for (int c = 0; c < N; c++) {
			if (a[r][c] != 0) {
				sm.V[idx] = a[r][c];
				sm.C[idx] = c;
				idx++;  
			}
		}
	}
	sm.R[N] = idx;
	return sm;
}

static int[N][N] desparsify(CSR sm) {
	T[N][N] a = 0;
	for (int r = 0; r < N; r++) {
		for (int idx = sm.R[r]; idx < sm.R[r+1]; idx++) {
			a[r][sm.C[idx]] = sm.V[idx];
		}
	}
	return a;
}



//
// computes y = Ax on dense A, x, and y.
// 
int[N] DeMV(T[N][N] A, T[N] x) {
	int[N] y;
	
	for (int r = 0; r < N; r++) {
		y[r] = 0;
		for (int c = 0; c < N; c++) {
		 	y[r] += mul(A[r][c],x[c]);  
		}
		//y[r] = dot(A[r],x);
	} 
	return y;	
}

//
//

#define K 10
#define ARGS 	T[N] y, int r, T[N][N] dB, int[N*N] C, T[N*N] V, int[N+1] R

int one(T[N] x, T[N][N] dA, ARGS) { return 1; } 

#define assume(e) {if (!e) return 1;} 
#define I(v1,v2,e) { assert(e); v1=__states__[i++]; v2=__states__[i++]; assume(e); }

//CSR foo(CSR f) implements c { return f; }
//CSR c(CSR a) { return a; }  

int transfer (T[N] x, T[N][N] dA, ARGS) implements one {
	CSR A = sparsify(dA);
	assert consistent(A,dA);
	SpMV(A, x, dA);
	
	
	// TODO: needs work: arrays currently cannot be copied like this.
	CSR B = new CSR(); B.V = V; B.C = C; B.R = R;
	assume(consistent(B,dB));
	assume(L2_all_nonzero(B,x,y,r,dB));
	assert(L2_whole_row(B,x,y,r,dA));
	
	return 1;
}

//
// computes y = Ax on sparse A and dense x and y.
// 
static int SpMV(CSR A, T[N] x, T[N][N] dA) {
	int[N] y = 0;
	
	for (int r = 0; r < N; r++) {    
		assert L1(A,x,y,r,dA);
		y[r] = 0;
		for (int idx = A.R[r];  idx < A.R[r+1]; idx++) {
			assert L2(A,x,y,r,idx,dA);
			y[r] += mul(A.V[idx],x[A.C[idx]]);  
			assert !(idx < A.R[r+1]-1) || L2(A,x,y,r,idx+1,dA);
		}
		assert L2_all_nonzero(A,x,y,r,dA);  
		assert L2_whole_row(A,x,y,r,dA);  
		L1(A,x,y,r,dA);
	} 
	// this is our correctness condition
	assert L1(A,x,y,N,dA); // r==N
	
	return 1;	
}

//
// L1: forall i=0,r-1 . y[i] = A[i] dot x
//
static bit L1(CSR A, T[N] x, int[N] y, int r, T[N][N] dA) {
	bit t = true;
	for (int i=0; i<r; i++) {
		T[N] temp;
		for (int j = 0; j < N; j++) {
			temp[j] = dA[i][j];
		}
		t = t & y[i]==dot(x,temp); 
	}
	return t;
}

//
// L2: c=A.C[idx] and y[r]=A[r][0:c-1] dot x[0:c-1]
//
static bit L2(CSR A, T[N] x, int[N] y, int r, int idx, T[N][N] dA) {
	int partial_dot = 0;
	for (int i=0; i<A.C[idx]; i++) {
		partial_dot += dA[r][i]*x[i]; 
	}
	return y[r] == partial_dot;
}

//
// Consistency checks
// 
static bit consistent (CSR A, T[N][N] dA) {
	
	// internal consistency
	
	for (int r = 0; r < N; r++) {
		// row indices are non-decreasing
		if (! (A.R[r] <= A.R[r+1])) return false;
		// row indices point to the column/value arrays
		if (! (0<=A.R[r] && A.R[r] < N*N)) return false;
		
		int _c = -1;
		for (int ci=A.R[r]; ci<A.R[r+1]; ci++) {
			int c = A.C[ci];
			// each column is a valid index O<=c<N
			if (! (0<=N && c<N)) return false;
			// columns are strictly increasing (not true in CSR in general)
			if (! (_c<c)) return false;
			_c = c;
		}	
	}	
	
	// correspondence to the dense data structure
	
	//
	// 1) if (i,j) in A and A[i,j]=v then v!=0 and v=dA[i,j]
	//
	for (int r = 0; r < N; r++) {
		for (int ci=A.R[r]; ci<A.R[r+1]; ci++) {
			int c = A.C[ci];
			if (! (dA[r][c] == A.V[ci])) return false;
			if (! (A.V[ci] != 0)) return false;
		}
	}
	//
	// 2) if (i,j) not in A then dA[i,j] == 0
	//
	for (int r = 0; r < N; r++) {
		int _c = -1;
		for (int ci=A.R[r]; ci<A.R[r+1]; ci++) {
			int c = A.C[ci];
			for (int zc = _c+1; zc<c; zc++) {
				if (! (dA[r][zc] == 0)) return false;
			}
			_c = c;
		}
	}
	//
	// 3) if dA[r,c] != 0 then (r,c) in A and A[r,c] == dA[r,c], that is
	// there exists exactly ONE ci from [A.R[r],A.R[r+1]> s.t.
	// A.C[ci] == c.  Also, A.V[ci] == dA[r,c]
	// 
	// 4) if dA[r,c] == 0 then (r,c) is not in A, ie
	// there exists ZERO ci from [A.R[r],A.R[r+1]> s.t. A.C[ci] == c
	//
	for (int r=0; r<N; r++) {
		for (int c=0; c<N; c++) {
			if (dA[r][c] != 0) {
				int n_found = 0;
				for (int ci=A.R[r]; ci<A.R[r+1]; ci++) {
					int cc = A.C[ci];
					if (c == cc) n_found++;
					if (! (A.V[ci] != 0)) return 0;
				}
				if (! (n_found==1)) return false;
			}
			else {
				bit found = false; 
				for (int ci=A.R[r]; ci<A.R[r+1]; ci++) {
					int cc = A.C[ci];
					if (c == cc) found = true;
				}
				if (found) return false;				
			} 
		}
	} 
		
	return true; 
}

//
// L2_all_nonzero: c=A.C[A.R[r+1]-1] . y[r]=A[r][0:c] dot x[0:c]
//
static bit L2_all_nonzero(CSR A, T[N] x, int[N] y, int r, T[N][N] dA) {
	if (! (0<=r && r<N) ) return 0;
	int partial_dot = 0;
	// consitency check
	int nz = A.R[r+1]-A.R[r];
	if (nz > 0) { // non-zero row
		// consistency check
		// within each sparse row, the indices are monotonically increasing
		int old_c = -1;
		for (int i=A.R[r+1]; i<A.R[r+1]; i++) {
			if (! (old_c >= A.C[i])) return 0;
			old_c = A.C[i];
			if (! (0<=old_c && old_c<N)) return 0;
		}
		for (int i=0; i<=A.C[A.R[r+1]-1]; i++) {
			partial_dot += dA[r][i]*x[i]; 
		}
	}
	return y[r] == partial_dot;
}
//
// L2_whole_row: y[r] = A[r][0:N-1] dot x[0:N-1]
//
static bit L2_whole_row(CSR A, T[N] x, int[N] y, int r, T[N][N] dA) {
	int partial_dot = 0;
	for (int i=0; i<N; i++) {
		partial_dot += dA[r][i]*x[i]; 
	}
	return y[r] == partial_dot;
}

//



// aux stuff

int dot(T[N] a, T[N] b) {
	int s = 0;
	for (int i = 0; i < N; i++) {
		s += mul(a[i],b[i]);
	}
	return s;
}
