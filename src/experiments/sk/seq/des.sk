bit[64] DES_IP(bit[64] in) {
	int [64] p = { 
		58, 50, 42, 34, 26, 18, 10, 2,
		60, 52, 44, 36, 28, 20, 12, 4,
		62, 54, 46, 38, 30, 22, 14, 6,
		64, 56, 48, 40, 32, 24, 16, 8,
		57, 49, 41, 33, 25, 17,  9, 1,
		59, 51, 43, 35, 27, 19, 11, 3,
		61, 53, 45, 37, 29, 21, 13, 5,
		63, 55, 47, 39, 31, 23, 15, 7
	};
	bit out[64];
	
	for (int i = 0; i < 64; ++i)
		out[i]=in[p[i]];
	
	return out;
}

bit[32] doPermute(bit[32] in)
{
	return {perm} in;
}

bit[64] DES_IPopt(bit[64] in) implements DES_IP
{
	bit[64] tmp=in;
	loop({1:32})
	{
		int s={*};
		tmp=in {|} tmp<<s {|} tmp>>s;
	}
	bit[32] l,r;
	[l,r]=tmp;
	function p2=doPermute;
	return [p2(l),p2(r)];
}

bit[32] permuteOpt(bit[32] in) overrides doPermute
{
	//this is the optimized sketch of the 2nd permutation step
	//right now it doesn't have any optimizations, but it could
	return {perm} in;
}
