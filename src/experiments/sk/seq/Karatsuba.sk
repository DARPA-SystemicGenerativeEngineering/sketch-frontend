// x = x1*b + x0
// y = y1*b + y0
//
// x*y = (b*b)*x1*y1 + b*(x1*y0 + x0*y1) + x0*y0
//
// x*y = p(b)*x1*y1 + p(b)*a(x1, x0, y1, y0) * a(x1, x0, y1, y0) + p(b)*x0*y0
//
// x*y = (b*b +b)*x1*y1 + b*(x1 - x0)*(y1 - y0) + (b+1)*x0*y0
//
// p1, p2, a2, p3 are polynomials which the system has 
// to discover in order to resolve the sketch


int WW = 4;
int W = WW/2;
int WWWW =  WW+WW;

int k = 0;  // this is used to verify mutliplication for some 
			// specific values of y.  Succeeds for k=0, fails for k=1

generator bit [WWWW] sel(bit[WWWW] in1, bit[WWWW] in2){ /* automatically rewritten */
	bit c = ??;
	return c ? in1 : in2;
}

generator bit [W+1] sub(bit[W+1] in1, bit[W+1] in2){ /* automatically rewritten */
	bit [W+1] one = 0; one[0] = 1;
	bit[W+1] result=in1 + ((in2 ^ 1)+ one);
	return result;
}

generator bit[WWWW] minus(bit[WWWW] in){ /* automatically rewritten */
	bit [WWWW] one = 0; one[0] = 1;
	return ((in ^ 1)+ one);
}

bit[WWWW] multiplyFull (bit[WW] in1, bit[WW] in2) {
	bit[WWWW] result = 0;
	bit[WWWW] in1w=0; for (int i=0; i < WW; i++) { in1w[i]=in1[i]; }

	for(int i=0; i<WW; ++i){
		if(in2[i]==1){
			result = result + in1w;
		}
		in1w = in1w << 1;
	}
	return result;	
}

generator bit[WW+1] multiplyHalf (bit[W+1] in1, bit[W+1] in2) /* automatically rewritten */ 
{	
	bit [W] one = 0; one[0] = 1;
	bit sgn1 = in1[W];
	if(sgn1){ in1 = ((in1 ^ 1)+ one); }
	bit sgn2 = in2[W];
	if(sgn2){ in2 = ((in2 ^ 1)+ one); ; }

	bit[WW+1] result = 0;
	bit[WW+1] in1w=in1;
		
	for(int i=0; i<W; ++i){
		if(in2[i]==1){
			result = result + in1w;
		}
		in1w = in1w << 1;
	}
	
	if(sgn1 ^ sgn2){
		result = ((result^1)+one);
	}	
	return result;
}




bit[WWWW] k (bit[WW] x, bit[WW] y) implements multiplyFull
{  
	bit [W] one = 0; one[0] = 1;
	bit[W] x1, x2, y1, y2;
	bit[WWWW]  tmp11=0, tmp12=0, tmp21=0, tmp22=0, res=0;
	x1=x[0::W]; x2=x[W::W];
	y1=y[0::W]; y2=y[W::W];
	
	tmp11 = multiplyHalf(x1, y1);
	tmp12 = multiplyHalf(sub(x2,x1), sub(y2,y1));
	tmp22 = multiplyHalf(x2, y2);
	
	for(int i=WW+1; i<WWWW; ++i){
		tmp12[i] = tmp12[WW];
	}
	
	res = 0;
	loop(??){
		bit[WWWW] t = sel(sel(tmp11, tmp22), tmp12) << (W*??);
		res = res + sel(t, minus(t));
	}
	return res;
}
