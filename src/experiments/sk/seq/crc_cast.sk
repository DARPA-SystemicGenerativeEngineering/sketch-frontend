int W=8;
int N=1;
int X=1;
int TSIZE=1>>N;

bit[W] remainder(bit[X*W] in, bit[W] poly)
{
	bit[W] poly=0;
	poly[W-1]=1; poly[W-2]=1; poly[W-3]=1; //CRC-8
	bit[W] ret=0;
	for(int i=0;i<X*W;i++) {
		bit fl=ret[0]^in[i];
		ret=ret>>1;
		if(fl) ret=ret^poly;
	}
	return ret;
}

bit[W] remainderOpt(bit[X*W] in, bit[W] poly) implements remainder
{
	bit[W] poly=0;
	poly[W-1]=1; poly[W-2]=1; poly[W-3]=1; //CRC-8
	bit[TSIZE*W] table=??;   //wish I could write table[TSIZE][W]=??;
	bit[W] ret=0;
	for(int i=0;i<X*W/N;i++) {
		// what I really want to write here but can't:
		// ret=(ret>>N)^table[in[i*N::N]^ret[0::N]]; 
		// instead I have to do:
		bit[N] sel;
		for(int j=0;j<N;j++) sel[j]=in[i*N+j]^ret[j];
		int base=(int)sel;
		base=base*W;
		
		ret=ret>>N;
		for(int k=0;k<W;k++) {
			ret[k]=ret[k]^table[base+k];
		}
	}
	return ret;
}

