int N = 6;
int No2 = N/2;

int[N] sort(int[N] input){
	int[N] output=input;
	int[N] done = 0;
	int k=0;
	for(int i=0; i<N; ++i){
		for(int j=i+1; j<N; ++j){
			if( output[j]< output[i]){
				int tmp = output[j];
				output[j] = output[i];
				output[i] = tmp;
			}
		}
	}
	return output;
}


generator int[No2] sortNover2(int[No2] input){ /* automatically rewritten */
	int[No2] output=input;
	int[No2] done = 0;
	int k=0;
	for(int i=0; i<No2; ++i){
		for(int j=i+1; j<No2; ++j){
			if( output[j]< output[i]){
				int tmp = output[j];
				output[j] = output[i];
				output[i] = tmp;
			}
		}
	}
	return output;
}



int[N] MergeSort(int[N] input)implements sort{
	int[N] output;
	int[No2] firstHalf = input[0::No2];

	int[No2] secondHalf = input[No2::No2];
		
	firstHalf = sortNover2(firstHalf);
	secondHalf = sortNover2(secondHalf);
	int x=0;
	int y=0;
	for(int i=0; i<N; ++i){
		if(x < No2){
			if(y<No2){
				if(firstHalf[x] < secondHalf[y]){
					output[i] = firstHalf[x]; x = x+1;		
				}else{
					output[i] = secondHalf[y]; y = y+1;
				}								
			}else{
				output[i] = firstHalf[x]; x = x+1;		
			}	
		}else{
			output[i] = secondHalf[y]; y = y+1;
		}		
	}	
	return output;
}


