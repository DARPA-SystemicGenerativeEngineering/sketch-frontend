int W = 32;

bit[W] Drot(bit[W] in, int r){
	bit[W] tmp = in<<r;
	bit[W] tmp2 = in>>(W-r);
	bit[W] out=0;
	int i =0;
	for(i=0; i<W; ++i){
		out[i] = (i<r)?tmp2[i]: tmp[i];
	}
	return out;
}

bit[32] MixColumnsSK(bit[32] in) implements MixColumns{
	bit [32] t1 = (in << {*} );
	bit [32] m1 = (in>>{*}) & {*};
	loop(2){
		m1 = (m1<<{*}) | m1;
	}	
	bit [32] o1 = (t1 & {*}) ^ ((in) &{*})^(m1& {*});
	bit [32] o2 = (t1 & {*}) ^ ((in) &{*})^(m1& {*});
	bit [32] o3 = (t1 & {*}) ^ ((in) &{*})^(m1& {*});
	return o1 ^ Drot(o2, {*}*8) ^ Drot(o3, {*}*8)^Drot(o3, {*}*8) ;
}


bit[8] GFM01(bit[8] in){
	return in;
}

bit[8] GFM03(bit[8] input){

    bit[9] in={0,0,0,0,0,0,0,0,0};

    for(int i=0; i<8; ++i)
      in[i+1] = input[i];

    for(int i=0; i<8; ++i)
      in[i] = in[i] ^ input[i];

    //Note that multiplication times 02 is just shift by one.

    //But now comes the fun part, we have to reduce.
    // by x^8+x^4+x^3+x+1
    //But since the new poly is only of degree
    // 8, we simply subtract it, but only
    // if in[8] is equal to one.

    bit[9] modpoly = {1,1,0,1,1,0,0,0,1};

    if( in[8] == 1 ){
      for(int k=0; k<8; ++k)
        in[k] = ( in[k] ^ modpoly[k] );
    }
    bit [8] out;
	for(int i=0; i<8; ++i){
		out[i] = in[i];
	}
	return out;
}

bit[8] GFM02(bit[8] input){
    bit[9] in={0,0,0,0,0,0,0,0,0};
    for(int i=0; i<8; ++i)
      in[i+1] = input[i];
    //Note that multiplication times 02 is just shift by one.

    //But now comes the fun part, we have to reduce.
    // by x^8+x^4+x^3+x+1
    //But since the new poly is only of degree
    // 8, we simply subtract it.


    bit[9] modpoly = {1,1,0,1,1,0,0,0,1};


    for(int k=0; k<8; ++k){
      if( in[8] == 1 ){
        in[k] = ( in[k] ^ modpoly[k] );
      }
    }
    bit [8] out;
	for(int i=0; i<8; ++i){
		out[i] = in[i];
	}
	return out;
}

bit[8] row1Fil(bit[32] input){
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM02(in1);
  in2 = GFM03(in2);
  in3 = GFM01(in3);
  in4 = GFM01(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}

bit[8] row2Fil(bit[32] input){
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM01(in1);
  in2 = GFM02(in2);
  in3 = GFM03(in3);
  in4 = GFM01(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}



bit[8] row3Fil(bit[32] input){
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM01(in1);
  in2 = GFM01(in2);
  in3 = GFM02(in3);
  in4 = GFM03(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}


bit[8] row4Fil(bit[32] input){
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM03(in1);
  in2 = GFM01(in2);
  in3 = GFM01(in3);
  in4 = GFM02(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}


bit [32] MixColumns(bit[32] input){
	bit [8] o1 = row1Fil(input);
	bit [8] o2 = row2Fil(input);
	bit [8] o3 = row3Fil(input);
	bit [8] o4 = row4Fil(input);
	bit [32] output;
	for(int i=0; i<8; ++i){
		output[i] = o1[i];
		output[i+8] = o2[i];
		output[i+16] = o3[i];
		output[i+24] = o4[i];
	}
	return output;
}


