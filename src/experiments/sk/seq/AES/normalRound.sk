int Nb = 4;
int W = Nb*Nb*8;
int Nr = 14;


/*******************************************************************************
********************************************************************************
*	Specification for AES.
********************************************************************************
*******************************************************************************/



generator bit[W] Cypher(bit[W] in, bit[W*(Nr+1)] keys){ /* automatically rewritten */
	bit[W] state;
	state = in;
	state = state^keys[0::W];
	for(int i=1; i<Nr; ++i){
		state = normalRound(state, keys[(i*W)::W]);
	}
	state = ByteSub(state);
	state = ShiftRows(state);
	state = state ^ keys[(Nr*W)::W];
	return state;
}


bit[W] normalRound(bit[W] in, bit[W] rkey){
  bit [W] tmp1 = ByteSub(in);
  bit [W] tmp2 = ShiftRows(tmp1);
  bit [W] tmp3 = MixColumns(tmp2);
  return tmp3 ^ rkey;
}

bit[W] ByteSub(bit[W] in){
	bit[W] result;
	for(int i=0; i<W/8; ++i){
		bit [8] word = in[i*8::8];		
		word = ByteSubInd(word);
		result[(i*8)::8] = word;
	}
	return result;
}



bit[W] ShiftRows(bit[W] in){
    int [4] shift = {0,1,2,3};
    bit[W] Sin;
    bit[W] Sout;
    int k=0;
    for(int c=0; c<Nb; ++c){
      for(int r=0; r<Nb; ++r){ 
        Sin[8*(r+ Nb*c)::8 ] = in[k::8]; k = k+8;		
      }
    }
    for(int c=0; c<Nb; ++c){
      for(int r=0; r<Nb; ++r){      
		int newc = (c+shift[r]) % Nb;
		Sout[8*(r+ Nb*c)::8]=Sin[8*(r + Nb*newc)::8 ];
      }
    }
    return Sout;
}

generator bit[8] intToBit8(int v){ /* automatically rewritten */
	bit[8] output;
	for(int i=0; i<8; ++i){
		output[i] = (v % 2) > 0;
		v = v/2;
	}
	return output;
}


generator bit[8] ByteSubInd(bit[8] in){ /* automatically rewritten */
  int[256] SBTable = {0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
		      0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
		      0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
		      0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
		      0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
		      0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
		      0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
		      0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
		      0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
		      0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
		      0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
		      0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
		      0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
		      0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
		      0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
		      0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
	int x = SBTable[(int) in];
	return intToBit8( x );
}

generator bit[W] MixColumns(bit[W] input){ /* automatically rewritten */
	bit[W] output;
	for(int i=0; i<Nb; ++i){
		bit[32] word;
		for(int j=0; j<32; ++j){
			word[j] = input[i*32+j];
		}
		word = MixColumnsWord(word);
		for(int j=0; j<32; ++j){
			output[i*32+j] = word[j];
		}
	}
	return output;
}

generator bit [32] MixColumnsWord(bit[32] input){ /* automatically rewritten */
	bit [8] o1 = row1Fil(input);
	bit [8] o2 = row2Fil(input);
	bit [8] o3 = row3Fil(input);
	bit [8] o4 = row4Fil(input);
	bit [32] output;
	for(int i=0; i<8; ++i){
		output[i] = o1[i];
		output[i+8] = o2[i];
		output[i+16] = o3[i];
		output[i+24] = o4[i];
	}
	return output;
}



generator bit[8] GFM01(bit[8] in){ /* automatically rewritten */
	return in;
}

generator bit[8] GFM03(bit[8] input){ /* automatically rewritten */

    bit[9] in={0,0,0,0,0,0,0,0,0};

    for(int i=0; i<8; ++i)
      in[i+1] = input[i];
    for(int i=0; i<8; ++i)
      in[i] = in[i] ^ input[i];

    //Note that multiplication times 02 is just shift by one.

    //But now comes the fun part, we have to reduce.
    // by x^8+x^4+x^3+x+1
    //But since the new poly is only of degree
    // 8, we simply subtract it, but only
    // if in[8] is equal to one.

    bit[9] modpoly = {1,1,0,1,1,0,0,0,1};

    if( in[8] == 1 ){
      for(int k=0; k<8; ++k)
        in[k] = ( in[k] ^ modpoly[k] );
    }
    bit [8] out;
	for(int i=0; i<8; ++i){
		out[i] = in[i];
	}
	return out;
}

generator bit[8] GFM02(bit[8] input){ /* automatically rewritten */
    bit[9] in={0,0,0,0,0,0,0,0,0};
    for(int i=0; i<8; ++i)
      in[i+1] = input[i];
    //Note that multiplication times 02 is just shift by one.

    //But now comes the fun part, we have to reduce.
    // by x^8+x^4+x^3+x+1
    //But since the new poly is only of degree
    // 8, we simply subtract it.


    bit[9] modpoly = {1,1,0,1,1,0,0,0,1};


    for(int k=0; k<8; ++k){
      if( in[8] == 1 ){
        in[k] = ( in[k] ^ modpoly[k] );
      }
    }
    bit [8] out;
	for(int i=0; i<8; ++i){
		out[i] = in[i];
	}
	return out;
}

generator bit[8] row1Fil(bit[32] input){ /* automatically rewritten */
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM02(in1);
  in2 = GFM03(in2);
  in3 = GFM01(in3);
  in4 = GFM01(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}

generator bit[8] row2Fil(bit[32] input){ /* automatically rewritten */
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM01(in1);
  in2 = GFM02(in2);
  in3 = GFM03(in3);
  in4 = GFM01(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}



generator bit[8] row3Fil(bit[32] input){ /* automatically rewritten */
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM01(in1);
  in2 = GFM01(in2);
  in3 = GFM02(in3);
  in4 = GFM03(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}


generator bit[8] row4Fil(bit[32] input){ /* automatically rewritten */
  bit[8] in1;
  bit[8] in2;
  bit[8] in3;
  bit[8] in4;
  for(int i=0; i<8; ++i){
  	in1[i] = input[i];
  	in2[i] = input[i+8];
  	in3[i] = input[i+16];
  	in4[i] = input[i+24];
  }
  in1 = GFM03(in1);
  in2 = GFM01(in2);
  in3 = GFM01(in3);
  in4 = GFM02(in4);
  return in1 ^ in2 ^ in3 ^ in4;
}


/*******************************************************************************
********************************************************************************
*	Sketch for AES.
********************************************************************************
*******************************************************************************/

generator bit[W] CypherOpt(bit[W] in, bit[W*(Nr+1)] keys){ /* automatically rewritten */
	bit[W] state;
	state = in;
	state = state^keys[0::W];
	for(int i=1; i<Nr; ++i){
		state = normalRoundsk(state, keys[(i*W)::W]);
	}
	state = ByteSubSK(state);
	state = ShiftRowsSK(state);
	state = state ^ keys[(Nr*W)::W];
	return state;
}




bit[W] ShiftRowsSK(bit[W] in) implements ShiftRows{
    bit[W] Sout;
    int i=0;
    loop(4){
    	/* The operator x = a {|} b; resolves to the following statement { m = ??; x = (a & m) | (a & ~m); } 
    	 * In other words it selects some bits from a and some bits from b, and the selection is determined by the solver. */
	    Sout[(i*32)::32] =  in[(0*32)::32] {|} in[(1*32)::32] {|} in[(2*32)::32] {|} in[(3*32)::32];
	    i = i+1;
    }
    return Sout;
}


bit[W] normalRoundsk(bit[W] in, bit[W] rkey) implements normalRound{
  /* The synthesizer replaces the holes below with array initializers.
   * Note that these table initializers are 32768 bits long.
   * 
   * */
  bit [32*256] T0 = ??;
  bit [32*256] T1 = ??;
  bit [32*256] T2 = ??;
  bit [32*256] T3 = ??;
	bit[W] output;
  bit[32] mask = {1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
  bit[32] word0 = in[(0*32)::32];
  bit[32] word1 = in[(1*32)::32];
  bit[32] word2 = in[(2*32)::32];
  bit[32] word3 = in[(3*32)::32];
  int[16] ch = {0,1,2,3,1,2,3,0,2,3,0,1,3,0,1,2};
  for(int i=0; i<4; ++i){	
  	bit[32] inv0 = sel(word0, word1, word2, word3, ch[i*4]) &  mask;        //in[(i*32)::8];
  	bit[32] inv1 = (sel(word0, word1, word2, word3, ch[i*4+1]) >> 8) & mask;  //in[(i*32+8)::8];
  	bit[32] inv2 = (sel(word0, word1, word2, word3, ch[i*4+2]) >> 16) & mask; //in[(i*32+2*8)::8];
  	bit[32] inv3 = (sel(word0, word1, word2, word3, ch[i*4+3]) >> 24) & mask; //in[(i*32+3*8)::8];
  	int i0 = (int) inv0[0::8];
  	int i1 = (int) inv1[0::8];
  	int i2 = (int) inv2[0::8];
  	int i3 = (int) inv3[0::8];
  	output[i*32::32] = T0[(i0*32)::32] ^ T1[(i1*32)::32] ^ T2[(i2*32)::32]^T3[(i3*32)::32];
  	output[i*32::32] = output[i*32::32] ^ rkey[(i*32)::32];
  }
  return output;
}

generator bit[32] sel(bit[32] w1, bit[32] w2, bit[32] w3, bit[32] w4, int i){ /* automatically rewritten */
	bit[32] ret;
	if( i<2 ){
		if(i==0){
			ret = w1;
		}else{
			ret = w2;
		}
	}else{
		if(i==2){
			ret = w3;
		}else{
			ret = w4;
		}
	}
	return ret;
}


bit[W] ByteSubSK(bit[W] in) implements ByteSub{	
	bit [32*256] T = ??;
	bit [W] result;
		bit[32] mask = {1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	int i=0;	
	loop(Nb){
		bit [32] word = in[i*32::32];		
		bit[32] inv0 = word &  mask;        //in[(i*32)::8];
	  	bit[32] inv1 = (word >> 8) & mask;  //in[(i*32+8)::8];
	  	bit[32] inv2 = (word >> 16) & mask; //in[(i*32+2*8)::8];
	  	bit[32] inv3 = (word >> 24) & mask; //in[(i*32+3*8)::8];
	  	int i0 = (int) inv0[0::8];
	  	int i1 = (int) inv1[0::8];
	  	int i2 = (int) inv2[0::8];
	  	int i3 = (int) inv3[0::8];
		result[i*32::32] = T[i0*32::32] {|} T[i1*32::32] {|} T[i2*32::32] {|} T[i3*32::32];
		i = i+1;
	}
	return result;
}
