int W = 32;

generator bit[W] Drot(bit[W] in, int r){ /* automatically rewritten */
	bit[W] tmp = in<<r;
	bit[W] tmp2 = in>>(W-r);
	bit[W] out=0;
	int i =0;
	for(i=0; i<W; ++i){
		out[i] = (i<r)?tmp2[i]: tmp[i];
	}
	return out;
}

bit[32] MixColumnsSK(bit[32] in) implements MixColumns{
	bit [32] t1 = (in << {*} );
	bit [32] m1 = (in>>{*}) & {*};
	loop(2){
		m1 = (m1<<{*}) | m1;
	}	
	bit [32] o1 = (t1 & {*}) ^ ((in) &{*})^(m1& {*});
	bit [32] o2 = (t1 & {*}) ^ ((in) &{*})^(m1& {*});
	bit [32] o3 = (t1 & {*}) ^ ((in) &{*})^(m1& {*});
	return o1 ^ Drot(o2, {*}*8) ^ Drot(o3, {*}*8)^Drot(o3, {*}*8) ;
}
