int W=8;

bit[W] remainder(bit[W] in, bit[W] poly)
{
	bit[W] poly=0;
	poly[W-1]=1; poly[W-2]=1; poly[W-3]=1; //CRC-8
	bit[W] ret=0;
	for(int i=0;i<W;i++) {
		bit fl=ret[0]^in[i];
		ret=ret<<1;
		if(fl) ret=ret^poly;
	}
	return ret;
}

bit[W] remainderOpt(bit[W] in, bit[W] poly) implements remainder
{
	bit[W] poly=0;
	poly[W-1]=1; poly[W-2]=1; poly[W-3]=1; //CRC-8
	bit[W] ret=0;
	for(int i=0;i<W;i++) {
		bit fl=ret[0]^in[i];
		ret=ret<<1;
		if(fl) ret=ret^poly;
	}
	return ret;
}
