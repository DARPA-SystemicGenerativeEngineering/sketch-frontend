int L = 3;
int W = 8;  /* FIXME should be an exponent of L. */

/* 
 * Exponentiation.
 */
generator int
exp (int b, int e) /* automatically rewritten */
{
    int a = 1;

    loop (e)
	a = a * b;

    return a;
}

/*
 * Casting from integer to bit-vector (currently not supported by the language).
 */
generator bit[W]
intToBit (int v) /* automatically rewritten */
{
    bit[W] output;

    for (int i = 0; i < W; ++i) {
	output[i] = (v % 2) > 0;
	v = v / 2;
    }

    return output;
}

/*
 * Template for linear combination with single variable.
 */
generator int
tem_linear (int a, int x, int b) /* automatically rewritten */
{
    return (a * x +  b);
}

/*
 * Template for linear combination with two variables.
 */
generator int
tem_linear2 (int a, int x, int b, int y, int c) /* automatically rewritten */
{
    return tem_linear (a, x, 0) + tem_linear (b, y, c);
}

/*
 * Non-deterministic sign inverter.
 */
generator int
any_sign (int a) /* automatically rewritten */
{
    return (?? ? a : -a);
}

/*
 * Shift amount generator, returning an 2^O(i+l).
 */
generator int
shift (int i, int l, int a, int b, int c) /* automatically rewritten */
{
    int s;

    s = exp (2, tem_linear2 (a, i, b, l, c) /* i */);
    return s;
}

/* 
 * Bit-mask generator of the form (0^{n}1^{n})^{2^l/2n}, where n is
 * correlated with the value of the iteration counter, i.
 */
generator bit[W]
filter (int i, int l, int a1, int b1, int a2, int b2, int a3, int b3, int c3) /* automatically rewritten */
{
    bit[W] m;
    int s;

    s = exp (2, tem_linear (a1, l, b1) /* l - 1 */);
    m = intToBit (exp (2, tem_linear (a2, s, b2) /* s */) - 1);
    loop (tem_linear2 (a3, i, b3, l, c3) /* l - i - 1 */) {
	s = s / 2;
	m = m ^ (m >> s);
    }

    return m;
}

/*
 * Sketch: in place computation in logarithmic number of steps.
 */
int
sk_count (bit[W] a) implements count
{
    bit[W] m = { 0 };
    int s = 0;
    int i;

    int a0 = any_sign (??), b0 = any_sign (??), c0 = any_sign (??),
	a1 = any_sign (??), b1 = any_sign (??),
	a2 = any_sign (??), b2 = any_sign (??),
	a3 = any_sign (??), b3 = any_sign (??), c3 = any_sign (??);

    i = 0;
    loop (tem_linear (??, L, ??) /* L */) {
	s = shift (i, L, a0, b0, c0);
	m = filter (i, L, a1, b1, a2, b2, a3, b3, c3);
	a = (a & m) + ((a << s) & m);
	i++;
    }

    return (int) a;
}

/*
 * Spec: linear counting of one-bits.
 */
int
count (bit[W] a)
{
    int ret = 0;

    for (int i = 0; i < W; i++)
	ret = ret + a[(i)];

    return ret;
}

