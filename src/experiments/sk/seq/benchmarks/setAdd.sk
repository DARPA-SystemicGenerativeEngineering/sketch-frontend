#define $swap(__type, v1, v2)                   \
    {                                           \
        __type t = v1;                          \
        v1 = v2;                                \
        v2 = t;                                 \
    }

#define $oneof2(e1, e2)                         \
    (?? ? (e1) : (e2))

#define $choose2assn(lhs1, lhs2, rhs)           \
    if (??) {                                   \
        lhs1 = rhs;                             \
    } else {                                    \
        lhs2 = rhs;                             \
    }

int NULL = -1;

#define $0(block)                               \
    if (pc[me] == 0) {                          \
        block;                                  \
    }

#define $(n, block)                             \
    else if (pc[me] == n) {                     \
        block;                                  \
    }

#define goto(stmt)  pc[me] = stmt

#define lockSet(mem, block)											\
	if(locks[mem] == -1 || locks[mem] == me){					\
		locks[mem] = me;										\
		block; 													\
	}else{														\
		thrState_waiting[me] = 1;								\
		thrState_waitingOn[me] = mem;							\
	}															
	
#define unlock(mem)												\
	if( locks[mem] == me ){										\
		locks[mem] = -1;										\
	}else{														\
		assert false;											\
	}															
	
	
#define lockTest(mem, block ) 									\
    if(locks[mem] == -1 || locks[mem] == me){					\
		 block;													\
	}else{														\
		thrState_waiting[me] = 1;								\
		thrState_waitingOn[me] = mem;							\
	}



int N = 35;
int MEMSIZE = 8;
int NTHREADS = 2;
int ENDPC = 9;


bit alwaysTrue (bit[N] in) {
    return 1;
}


generator bit scheduleThr(bit[N] schedule, bit[NTHREADS] thrState_waiting, int[NTHREADS] thrState_waitingOn, int[MEMSIZE] locks, int[NTHREADS] pc){ /* automatically rewritten */
	if(schedule[t]){
	//It's thread 1's turn, but first, check that it can actually run;
		if(pc[1] >= ENDPC) return 0;
		if(thrState_waiting[1]){
			//Thread was waiting, on a lock. Then, we must check to see if the lock has been released.			
			int mloc = thrState_waitingOn[1];
			assert locks[mloc] != 1;
			if(locks[mloc] != -1) return 0; // if lock hasn't been released, yield to the other thread.		
		}
		return 1;
	}else{
		if(pc[0] >= ENDPC) return 1;
		if(thrState_waiting[0]){
			//Thread was waiting, on a lock. Then, we must check to see if the lock has been released.
			int mloc = thrState_waitingOn[0];
			assert locks[mloc] != 0;
			if(locks[mloc] != -1) return 1; // if lock hasn't been released, yield to the other thread.	
		}
		return 0;
	}
}


bit setAddTest(bit[N] schedule) implements alwaysTrue{
	int[NTHREADS] key = {2,3}; 
	int[MEMSIZE] mem = {
		0 , 2,
		5 , -1,
		-1, -1,
		-1, -1};
	
	int malloc = 4;
	int[NTHREADS] pc = 0;
	int[NTHREADS] curr = 0;
	int[NTHREADS] pred = 0;
	int[NTHREADS] ne = 0;
	int[MEMSIZE] locks = {-1, -1, -1, -1, -1, -1, -1, -1};
	bit[NTHREADS] thrState_waiting = 0;
	int[NTHREADS] thrState_waitingOn = 0;
	int me = 0;
	for (int t = 0; t < N; ++t) {
		bit me = scheduleThr(schedule, thrState_waiting, thrState_waitingOn, locks, pc);
		thrState_waiting[me] = 0;	
		$0({
			ne[me] = malloc; 
			malloc = malloc+2;
			mem[ne[me]] = key[me];
			mem[ne[me]+1] = NULL;			
			goto(1);
		})
		$(1, {
			curr[me] = 0;
			pred[me] = NULL; 
			goto(2); 
		})
		/*while(curr.key < key){ */
		$(2, {
			if( mem[curr[me]] < key[me]){ //3
				goto(3);
			}else{
				goto(5);	
			}
		})
		$(3, {
			pred[me] = curr[me];
			goto(4);
		})
		$(4, {
			lockTest(curr[me] + 1,
				{ curr[me] = mem[curr[me] + 1]; goto(2);}
			)
		})
		/*}*/
		$(5, {
			lockSet(pred[me]+1, goto(6));
		})
		$(6, {
			if(mem[pred[me]+1] == curr[me]){
				goto(7);
			}else{
				unlock(pred[me]+1);
				goto(1);
			}
		})
		$(7, {
			mem[ne[me]+1] = curr[me];
			goto(8);
		})
		$(8, {
			mem[pred[me]+1] = ne[me];
			unlock(pred[me]+1);
			goto(9);
		})
		 /*$(9, halt)*/
	}
	
	return verify(mem, pc);
}


generator bit verify(int[MEMSIZE] mem, int[NTHREADS] pc){ /* automatically rewritten */
	return pc[0] == 9 && pc[1] == 9 && 
	mem[0] == 0 && mem[mem[1]] == 2 && mem[ mem[mem[1]+1] ] == 3 && mem[mem[ mem[mem[1]+1]+1 ]] == 5;
	
}




