




int NULL = -1;



int N = 35;
int NTHREADS = 2;
int MEMSIZE = 12;


bit alwaysTrue (bit[N] in) {
    return 1;
}


bit verify (int prevHead,
            int[NTHREADS] popped,
            int[NTHREADS] pc,
            int[MEMSIZE] mem) {
    return

        ((prevHead == 6) && (mem[prevHead + 2] == 9))


        &&
        ((popped[0] == 1 && popped[1] == 2)
         || (popped[1] == 1 && popped[0] == 2))

        &&
        (pc[0] == 11 && pc[1] == 11)

        ;

}

bit dequeueTest (bit[N] schedule) implements alwaysTrue {
    int[MEMSIZE] mem = {
        -1, 0, 3,
         1, 0, 6,
         2, 0, 9,
        -1, 0, -1
    };


    int prevHead = 0;


    int[NTHREADS] pc = 0;
    int[NTHREADS] myNext = 0;
    int[NTHREADS] myStored = 0;


    int[NTHREADS] popped = 0;

    for (int t = 0; t < N; ++t) {
        bit me = (schedule[t] && pc[1] < 11 ) || pc[0] >= 11;

        if (pc[me] == 0) { myNext[me] = mem[prevHead + 2]; pc[me] = 1;; }



            else if (pc[me] == 1) { pc[me] = (myNext[me] != NULL) ? 2 : 4;; }

            else if (pc[me] == 2) { { int taken = mem[myNext[me] + 1]; if (taken == 1) { pc[me] = 3; } else { mem[myNext[me] + 1] = 1; pc[me] = 4; } }; }







            else if (pc[me] == 3) { myNext[me] = mem[myNext[me] + 2]; pc[me] = 1;; }




        else if (pc[me] == 4) { pc[me] = (myNext[me] == NULL) ? 11 : 5;; }


        else if (pc[me] == 5) { myStored[me] = mem[myNext[me]]; pc[me] = 6;; }




            else if (pc[me] == 6) { prevHead = myNext[me]; pc[me] = 7;; }


            else if (pc[me] == 7) { myNext[me] = mem[myNext[me] + 2]; pc[me] = 8;; }



            else if (pc[me] == 8) { pc[me] = (myNext[me] == NULL) ? 10 : 9;; }

            else if (pc[me] == 9) { pc[me] = (mem[myNext[me] + 1] == 0) ? 10 : 6;; }


        else if (pc[me] == 10) { popped[me] = myStored[me]; pc[me] = 11;; }




    }

    return verify (prevHead, popped, pc, mem);
}
