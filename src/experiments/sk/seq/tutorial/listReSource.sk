pragma options "--unrollamnt 4";
int N = 4;

struct node{
	node next;
	int val;	
}

generator node newNode(int i){ /* automatically rewritten */
	node n = new node();
	n.next = null;	
	n.val = i;
	return n;
}

struct list{
	node head;	
	node tail;
}

generator list newList(){ /* automatically rewritten */
	list l = new list();
	l.head = null;
	l.tail = null;	
	return l;
}

generator node hole(list l1, list l2){ /* automatically rewritten */  
	return {| null | ( (l1 | l2)(.head | .tail) )(.next)?  |}	;
}

generator node holeB(list l1, list l2, node n){ /* automatically rewritten */
	return 	(?? ? hole(l1, l2) : n); 
}


generator bit cond(list l1, list l2, node nh){ /* automatically rewritten */ 
	node n1 = holeB(l1, l2, nh);
	node n2 = holeB(l1, l2, nh);
	return {| n1 (== | !=) n2 | ??  |};
}




generator list restartLst(list l, node nh){ /* automatically rewritten */
	
	list nl = newList();	
	bit c  = cond(l, nl, nh);
	node tmp = null;	
	while(c){
		if(cond(l, nl, nh)){ {| tmp | l.head |l.head.next | nl.head | nl.head.next | nl.tail   |}    = holeB(l, nl, tmp);}// 83 * 10 * 6 = 4980
		if(cond(l, nl, nh)){ {| tmp | l.head |l.head.next | nl.head | nl.head.next | nl.tail   |}    = holeB(l, nl, tmp);}
 		if(cond(l, nl, nh)){ {| tmp | l.head |l.head.next | nl.head | nl.head.next | nl.tail   |}    = holeB(l, nl, tmp);}
 		if(cond(l, nl, nh)){ {| tmp | l.head |l.head.next | nl.head | nl.head.next | nl.tail   |}    = holeB(l, nl, tmp);}
 		if(cond(l, nl, nh)){ {| tmp | l.head |l.head.next | nl.head | nl.head.next | nl.tail   |}    = holeB(l, nl, tmp);}
		c  = cond(l, nl, nh);
	}
	return nl;	
	
}


bit ONE(int n, int nhead){
	return 1;	
}

bit test(int n, int nhead) implements ONE{
	if(n > N){ n = N; }
	if(n==0){ n = 1; }
		
	node[N] nlist = null;
	list l = newList();
	{
		node prev = null;
		for(int i=0; i<n; ++i){
			node t = newNode(i);
			nlist[i] = t;
			if(prev != null){ prev.next = t; }
			prev = t;
			if(i==0){
				l.head = t;	
			}
		}
		l.tail = prev;
	}			
	
	if(nhead >= n){ nhead = n-1; }
	l = restartLst(l, nlist[nhead]);
	assert l.head == nlist[nhead]; 
	
	node t = l.head;
	node p = null;
	for(int i=0; i<n; ++i){
			if( nhead + i < n){
				assert t == nlist[nhead + i]; 
			}else{
				assert t == nlist[n-i-1];	
			}
			p = t;
			t = t.next;			
	}
	assert p == l.tail;
	return 1;
}




