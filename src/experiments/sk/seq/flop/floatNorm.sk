int M=4;
int E=4;
int FW=M+E;

bit[M*2] FOmultiply(bit[M] a, bit[M] b)
{
	bit[2*M] ret=0;
	bit[2*M] toadd=0;
	toadd=a;
	for(int i=0;i<M;i++) {
		if(b[i])
			ret=ret+toadd;
		toadd=toadd>>1;
	}
	return ret;
}

bit FOzero(bit[M] x)
{
	bit ret=1;
	for(int i=0;i<M;i++)
		if(x[i]) ret=0;
	return ret;
}

bit[FW] floatNorm(bit[FW] x) 
{
	bit[E] fix=0;
	bit[E] one=0;
	for(int i=0;i<M;i++)
		one[i]=1;
	int nz=0;
	bit so=0;
	for(int i=0;i<M;i++) if(!so) {
		if(x[M-1-i]) {
			so=1;
		}
		else {
			nz=nz+1;
			fix=fix+one;
		}
	}
	bit[M] m=x[0::4];
	m=m>>nz;
	x[0::4]=m;
	x[M::4]=x[M::4]+fix;
	return x;
}

bit[FW] test()
{
	bit[FW] c=0;
	c[2]=1;
	c[0]=1;
	c[5]=1;
	c[6]=1;
	return floatNorm(c);
}

bit[FW] test2() implements test
{
	bit[FW] b=??;
	return b;
}
