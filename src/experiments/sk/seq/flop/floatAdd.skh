#include "test/flop/floatCommon.skh"

bit[E] FOnegateE(bit[E] x)
{
	bit[E] ret;
	for(int i=0;i<E;i++)
		ret[i]=!x[i];
	return ret;
}

bit[E] FOsubtractE(bit[E] e1, bit[E] e2)
{
	bit[E] ret=FOnegateE(e2);
	ret=ret+e1;
	bit[E] one=0;
	one[0]=1;
	return ret+one;
}

bit[M+1] FOtwocomp(bit[M+1] x)
{
	bit[M+1] ret;
	for(int i=0;i<M+1;i++)
		ret[i]=!x[i];
	bit[M+1] one=0;
	one[0]=1;
	return ret+one;
}

bit floatIsZero(bit[FW] x)
{
	return !x[M-1];
}

bit floatAbsLess(bit[FW] a, bit[FW] b)
{
    bit ret=0;
	bit eq=1;
	if(!a[M-1]) //a==0
		ret=1;
	else {
	    for(int i=M+E-1;i>=0;i--) {
			if(eq && a[i]!=b[i]) {
				ret=b[i];
				eq=0;
			}
	    }
    }
    return ret;
}

bit[FW] FOadd(bit[FW] a, bit[FW] b)
{
	/* we assume a>=b */
	bit[FW] ret=0;
	bit[E] one=0;
	one[0]=1;
	bit[E] minusone=0;
	for(int i=0;i<E;i++)
		minusone[i]=1;
	
	bit difsign=a[SB]^b[SB];
	bit[E] e1=a[M::E];
	bit[E] e2=b[M::E];
	bit[E] edif=FOsubtractE(e1,e2);
	bit over=0;
	for(int i=log_M;i<E;i++) {
		if(edif[i]) 
			over=1;
	}
	int sh=0;
	int t=1;
	for(int i=0;i<log_M;i++) {
		if(edif[i])
			sh=sh+t;
		t=t*2;
	}
	if(over || sh>=M) //the 2nd number is too small (insignificant)
		ret=a;
	else {
		bit[M+1] m1=0;
		bit[M+1] m2=0;
		m1[0::M]=a[0::M];
		m2[0::M]=b[0::M];
		m2=m2<<sh;
		if(a[SB]^b[SB]) m2=FOtwocomp(m2);
		m1=m1+m2;
		for(int i=0;i<M;i++) {
			if(!m1[M]) {
				m1=m1>>1;
				e1=e1+minusone;
			}
		}
		ret[0::M]=m1[1::M];
		ret[M::E]=e1+one;
	}
	ret[SB]=a[SB];
	return ret;
}

bit[FW] floatAdd(bit[FW] a, bit[FW] b) 
{
	bit[FW] ret=0;

	if(floatIsZero(a))
		ret=b;
	else if(floatIsZero(b))
		ret=a;
	else if(floatAbsLess(a,b)) {
		ret=FOadd(b,a);
	}
	else {
		/* a>=b */
		ret=FOadd(a,b);
	}
	return ret;
}
