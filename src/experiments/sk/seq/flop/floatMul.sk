int M=4;
int E=4;
int FW=M+E;

bit[M*2] FOmultiply(bit[M] a, bit[M] b)
{
	bit[2*M] ret=0;
	bit[2*M] toadd=0;
	toadd=a;
	for(int i=0;i<M;i++) {
		if(b[i])
			ret=ret+toadd;
		toadd=toadd>>1;
	}
	return ret;
}

bit FOzero(bit[M] x)
{
	bit ret=1;
	for(int i=0;i<M;i++)
		if(x[i]) ret=0;
	return ret;
}

bit[FW] FOnormalize2(bit[2*M] m, bit[E] e) 
{
	bit[E] fix=0;
	fix[2]=1; //fix=M(=4)
	bit[E] neg_one=0;
	for(int i=0;i<E;i++)
		neg_one[i]=1;
	int nz=0;
	bit so=0;
	for(int i=0;i<2*M;i++) if(!so) {
		if(m[7-i]) {
			so=1;
		}
		else {
			nz=nz+1;
			fix=fix+neg_one;
		}
	}
	bit[FW] ret=0;
	m=m>>nz;
	ret[0::4]=m[M::4];
	ret[M::4]=e+fix;
	return ret;
}

bit[FW] floatMul(bit[FW] a, bit[FW] b) 
{
	bit[M*2] mmul=FOmultiply(a[0::4],b[0::4]);
	bit[E] e=a[M::4];
	e=e+b[M::4];
	return FOnormalize2(mmul,e);
}

bit[FW] test()
{
	bit[FW] c=0;
	c[2]=1;
	c[3]=1;
	c[5]=1;
	c[6]=1;
	return c;
}

bit[FW] test2() implements test
{
	bit[FW] a=0;
	a[1]=1;
	a[2]=1;
	a[5]=1;
	bit[FW] b=??;
	return floatMul(a,b);
}
