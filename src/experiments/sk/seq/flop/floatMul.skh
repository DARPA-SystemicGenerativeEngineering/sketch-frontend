#include "test/flop/floatCommon.skh"

bit[M*2] FOmultiply(bit[M] a, bit[M] b)
{
	bit[2*M] ret=0;
	bit[2*M] toadd=0;
	toadd=a;
	for(int i=0;i<M;i++) {
		if(b[i])
			ret=ret+toadd;
		toadd=toadd>>1;
	}
	return ret;
}

bit[FW] floatMul(bit[FW] a, bit[FW] b) 
{
	bit[FW] ret=0;
	bit[E] one=0; 
	one[0]=1;

	bit[M*2] mmul=FOmultiply(a[0::M],b[0::M]);
	bit[E] e=a[M::E];
	e=e+b[M::E];    //add exponents
	e[E-1]=!e[E-1]; //add bias, the fast way
	
	if(mmul[2*M-1]) {
		ret[0::M]=mmul[M::M];
		ret[M::E]=e+one;
	}
	else {
		ret[0::M]=mmul[M-1::M];
		ret[M::E]=e;
	}
	ret[SB]=a[SB]^b[SB];
	return ret;
}
