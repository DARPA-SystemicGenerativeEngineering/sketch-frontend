int Win=64;
int Wout=32;
int S = 4;
int K = Wout/S;
int TS = 1<<K;
bit[Wout] crcCoreSK(bit[Wout] in, bit[Wout] state) implements crcCore{	
	bit[TS*Wout] T0 = ??;
	bit[TS*Wout] T1 = ??;
	bit[TS*Wout] T2 = ??;
	bit[TS*Wout] T3 = ??;
	bit[Wout] ret= in;
	int idx;
	int i;
	{i=0;
	idx = (int)(state[i*K::K]);
	ret = 	T0[(Wout*idx)::Wout] ^ ret;
	}
	{i=1;
	idx = (int)(state[i*K::K]);
	ret = 	T1[(Wout*idx)::Wout] ^ ret;
	}
	{i=2;
	idx = (int)(state[i*K::K]);
	ret = 	T2[(Wout*idx)::Wout] ^ ret;
	}
	{i=3;
	idx = (int)(state[i*K::K]);
	ret = 	T3[(Wout*idx)::Wout] ^ ret;
	}
	return ret;
}


bit[Wout] crcCore(bit[Wout] in, bit[Wout] state){
	bit[Wout] poly=0;
	poly[3] = 1; poly[20] = 1; poly[Wout-1]=1; poly[Wout-2]=1; poly[Wout-3]=1; //CRC-8
	bit[Wout] one = 0; one[0] = 1;
	bit[Wout] ret= state;
	for(int i=0; i<Wout; i++){
		bit f1 = ret[Wout-1];
		ret = ret << 1;
		ret[0] = ret[0] | in[Wout-1-i];
		if( f1 ) ret = ret ^ poly;
	}
	return ret;
}

generator bit[Wout] remainderSK(bit[Win] in) /* automatically rewritten */
{
	bit[Wout] ret=0;
	int T = Win / Wout;	
	for(int j=0; j<T; ++j){
		ret = crcCore(in[j*Wout::Wout], ret);		
	}
	return ret;
}
