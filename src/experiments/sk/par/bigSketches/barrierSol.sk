

int N = 2;
int T = 3;

struct barrier{
	int count;	
	bit current;
	bit[N] bits;
}

generator barrier newBarrier(){ /* automatically rewritten */
	barrier b = new barrier();	
	b.count = N;
	b.bits = 0;	
	b.current = 0;
	return b;
}


generator void next(barrier b, int thread){ /* automatically rewritten */
	bit s = b.bits[thread];
	s = !s;
	b.bits[thread] = s;
	int cv = 0;
	atomic{
		cv = b.count;
		b.count = b.count - 1;	
	}
	
	if(cv == 1){
		b.count = N;
		b.current = s;
	}else{
		atomic(b.current == s){
			
		}
	}
	
}
bit test(){
	return 1;	
}


generator int left(int t){ /* automatically rewritten */
	int rv = 0;
	rv = t - 1;
	if( rv < 0){ rv = rv + N; }
	return rv;	
}

generator int right(int t){ /* automatically rewritten */
	int rv = 0;
	rv = t + 1;
	if( rv >= N){ rv = rv - N; }
	return rv;	
}

bit sketch() implements test{
	
	bit[N][T] grid = 0;
	barrier b = newBarrier();
	fork(int thread; N){
		for(int i=0; i<T; ++i){
			if(i > 0){
				assert grid[i-1][left(thread)] && grid[i-1][right(thread)]; 	
			}		
			grid[i][thread] = 1;
			next(b, thread);
		}		
	}
	return 1;
}