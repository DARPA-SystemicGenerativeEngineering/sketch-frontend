int LOW = -1;
int HIGH = 10;
int MAXSZ = HIGH - LOW - 1;

struct Node{
	int val;
	Node next;
}

generator Node newNode(int i){ /* automatically rewritten */
	Node n = null;
	atomic{ 
		n = new Node();
	}
	assert i> LOW && i < HIGH;
	n.val = i;
	n.next = null;	
	return n;
}

/*private */
generator Node newLowNode(){ /* automatically rewritten */
	Node n = null;
	n = new Node();
	n.val = LOW;
	n.next = null;	
	return n;
}

/*private */
generator Node newHighNode(){ /* automatically rewritten */
	Node n = null;
	n = new Node();
	n.val = HIGH;
	n.next = null;	
	return n;
}

struct Set{
	Node head;
	Node tail;	
}

generator Set newSet(){ /* automatically rewritten */
	Set s = new Set();
	s.head = newLowNode();
	s.tail = newHighNode();
	s.head.next = s.tail;
	return s;
}


generator void setAddSeq(Set s, int i){ /* automatically rewritten */
	Node n = newNode(i);
	Node cur = s.head; 
	Node pred = null;
	for(int i=0; i<MAXSZ; i++){
		if(cur.val < i){
			pred = cur;
			cur = cur.next;
		}
	}
	
	pred.next = n;
	n.next = cur;
}

generator int[MAXSZ] toArray(Set s){ /* automatically rewritten */
	int[MAXSZ] rv = 0;
	Node cur = s.head; 
	for(int i=0; i<MAXSZ; i++){
		if(cur != null){
		  rv[i] = cur.val;
		  cur = cur.next;
		}
	}
	return rv;
}





