struct Set {
    Node head;
    Node tail;
}

struct Node {
    int key;
    bit marked;
    Node next;
}

Set newSet (int negInf, int posInf) { /* automatically rewritten */
    Set S = new Set ();
    S.tail = newNode (posInf, 0, null);
    S.head = newNode (negInf, 0, S.tail);
    return S;
}

Node newNode (int key, bit marked, Node next) { /* automatically rewritten */
    Node n = new Node ();
    n.key = key;
    n.marked = marked;
    n.next = next;
    return n;
}

bit validate (Node pred, Node cur) { /* automatically rewritten */
    return pred.marked == 0 && cur.marked == 0 && pred.next == cur;
}

bit isValidSet (Set S, int negInf, int posInf, int maxlen) { /* automatically rewritten */
    assert S.head != null;
    assert S.head.key == negInf;
    assert S.tail != null;
    assert S.tail.next == null;
    assert S.tail.key == posInf;

    Node n = S.head;
    for (int i = 0; i < maxlen; ++i) {
        if (n != null) {
            if (n.next == null) {
                assert n == S.tail;
                n = null;
            } else {
                assert n.key < n.next.key;
                n = n.next;
            }
        }
    }

    return 1;
}

bit isEmptySet (Set S) { /* automatically rewritten */
    assert S.tail.next == null;
    return S.head.next == S.tail;
}
