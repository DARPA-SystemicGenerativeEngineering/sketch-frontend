#define LOC {| (n | next | pred)(.next)? |}

void add (List L, int key) { /* automatically rewritten */
    Node n = newNode (key, null, 0);
    Node next = null, pred = null;

    bit outerMore = 1, innerMore = 1;
    bit wasSwapped = 0;
    for (int i = 0; i < 2; ++i) {
        if (outerMore) {
            next = L.head;
            pred = null;

            innerMore = 1;
            for (int j = 0; j < 5; ++j) {
                if (innerMore) {
                    if ({| (key | next.key | prev.key) (< | <= | > |>= ) (key | next.key | prev.key) |} ) {
                    	reorder{
                    		CAS (wasSwapped, LOC, LOC, LOC);
                        	LOC = LOC;                        
                    	}
                        innerMore = 0;
                        outerMore = !wasSwapped;
                    } else {
                        pred = next;
                        next = next.next;
                    }
                }
            }
        }
    }
    assert wasSwapped;
}