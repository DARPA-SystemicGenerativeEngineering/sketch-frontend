Node genNode (Node n1, Node n2, Node n3) {
    Node g = null;
    int _which = { * 2 };
    assert 0 <= _which <= 2;
    if (0 == _which) {  g = n1;  }
    if (1 == _which) {  g = n2;  }
    if (2 == _which) {  g = n3;  }
    return ?? ? g : g.next;
}

bit genComparison (Node n1, Node n2, Node n3) {
    Node g1 = genNode (n1, n2, n3), g2 = genNode (n1, n2, n3);
    return ?? && (?? ? g1 == g2 : g1 != g2);
}

static find (Set S, int key, ref Node prev, ref Node cur) {
    cur = S.head
    lock (cur);
    for (int i = 0; i < NNODES; ++i) {
        if (cur.val < key) {
            Node tprev = prev;
            reorder {
                if (genComparison (cur, prev, null)) {
                    Node tmp = genNode (cur, prev, tprev);
                    lock (tmp);
                }
                if (prev != null) {
                    Node tmp = genNode (cur, prev, tprev);
                    unlock (tmp);
                }
                prev = cur;
                cur = cur.next;
            }
        }
    }
}
