bit T () { return 1; }
bit main () implements T {
    assert NITEMS % 2 == 0;

    Queue q = newQueue ();
    int dqCount = 0;

    enqueue (q, newItem (NTHREADS+1, NITEMS+1));
    Item x = dequeue (q);
    assert x != null && x.tid == NTHREADS+1 && x.id == NITEMS+1;

    fork (int i; NTHREADS) {
        int[NTHREADS] lastId = 0;

        for (int j = 0; j < NITEMS; ++j) {
            if (j % 2 == 0) {
                enqueue (q, newItem (i, j+1));
            } else {
                Item it = dequeue (q);
                if (it != null) {
                    assert it.id > lastId[it.tid];
                    lastId[it.tid] = it.id;
                    atomic { dqCount = dqCount + 1; }
                }
            }
        }
    }

    assert isValidQueue (q, NNODES);

    int[NTHREADS] lastId = 0;
    bit done = 0;
    for (int i = 0; i < NNODES; ++i) {
        if (!done) {
            Item it = dequeue (q);
            if (it == null) {
                done = 1;
            } else {
                assert it.id > lastId[it.tid];
                lastId[it.tid] = it.id;
                dqCount = dqCount + 1;
            }
        }
    }
    assert done;

    assert dqCount == (NTHREADS*NITEMS)/2;

    assert isValidQueue (q, NNODES);
    assert isEmptyQueue (q, NNODES);

    return 1;
}
