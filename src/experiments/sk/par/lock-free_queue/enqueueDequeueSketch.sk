struct Queue {
    Node tail;
    Node prevHead;
}

struct Node {
    int val;
    Node next;
    bit taken;
}

void enqueue (Queue q, int val) {
    Node n = new Node ();
    n.val = val;
    n.taken = 0;
    n.next = null;

    Node oldTail = null;
    // oldTail = AtomicSwap ({| q.tail|n |}, {| n|q.tail |});
    atomic {
        oldTail = ?? ? q.tail : n;
        if (??)  q.tail = n;
        else     n = q.tail;
    }
    oldTail.next = n;
}

int dequeue (Queue q) {
    Node tmp = null;
    int wasTaken = 1;

    for (int i = 0; wasTaken != 0; ++i) {
        anyorder {
            tmp = ?? ? q.prevHead :
                       (?? ? q.prevHead.next : q.prevHead.next.next);
            if (null == tmp)  return -1;

            q.prevHead = ?? ? tmp :
                              (?? ? tmp.next :
                                    (?? ? q.prevHead : q.prevHead.next));
            if (tmp.taken != 1) {
                // wasTaken = AtomicSwap (tmp.taken, 1);
                atomic {
                    wasTaken = tmp.taken;
                    tmp.taken = 1;
                }
            }
        }
    }

    return tmp.val;
}

bit alwaysTrue () {
    return 1;
}

bit verify (Queue q, int[2] popped) {
    Node next = q.prevHead;
    for (int i = 0; next != null; ++i) {
        assert next.taken == 1;
        next = next.next;
    }

    assert (popped[0] == 1 && popped[1] == 2)
           || (popped[0] == 2 && popped[1] == 1);

    return 1;
}

bit dequeueTest () implements alwaysTrue {
    Queue q = new Queue ();
    q.prevHead = new Node ();
    q.prevHead.val = -1;
    q.prevHead.taken = 1;
    q.prevHead.next = null;
    q.tail = q.prevHead;

    enqueue (q, 1);
    enqueue (q, 2);

    int[2] popped = 0;

    ploop (int i; 2) {
        popped[i] = dequeue (q);
    }

    return verify (q, popped);
}
