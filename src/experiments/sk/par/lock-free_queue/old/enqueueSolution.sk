struct Queue {
    Node tail;
    Node head;
}

struct Node {
    int val;
    Node next;
    bit taken;
}

void enqueue (Queue q, int val) {
    Node n = new Node ();
    n.val = val;
    n.taken = 0;
    n.next = null;

    Node oldTail = null;
    // What this is doing:
    //   oldTail = AtomicSwap (q.tail, n);
    atomic {
        oldTail = q.tail;
        q.tail = n;
    }
    oldTail.next = n;
}

bit verify (Queue q) {
    Node head = q.head;
    assert head != null;
    Node e1 = head.next;
    assert e1 != null;
    Node e2 = e1.next;
    assert e2 != null;
    Node tail = q.tail;
    assert tail != null;

    assert (e1.val == 1 && e2.val == 2)
           || (e1.val == 2 && e2.val == 1);
    assert tail == e2;
    assert tail.next == null;

    return 1;
}

bit alwaysTrue () { return 1; }

bit main () implements alwaysTrue {
    Queue q = new Queue ();
    q.head = new Node ();
    q.head.val = -1;
    q.head.taken = 1;
    q.head.next = null;
    q.tail = q.head;

    fork (int i; 2) {
        enqueue (q, i+1);
    }

    return verify (q);
}