#include "../primitives.skh"
#include "list.skh"

void add (List L, int key) {
    Node n = newNode (key, null, 0);
    Node next = null, pred = null;

    bit outerMore = 1, innerMore = 1;
    bit wasSwapped = 0;
    for (int i = 0; i < 2; ++i) {
        if (outerMore) {
            next = L.head;
            pred = null;

            innerMore = 1;
            for (int j = 0; j < 5; ++j) {
                if (innerMore) {
                    if (key < next.key) {
                        n.next = next;
                        CAS (wasSwapped, pred.next, next, n);
                        innerMore = 0;
                        outerMore = !wasSwapped;
                    } else {
                        pred = next;
                        next = next.next;
                    }
                }
            }
        }
    }
    assert wasSwapped;
}

bit verify (List L) {
    assertValidList (L);
    assert find (L, 1);
    assert find (L, 2);
    return 1;
}

bit verifier () { return 1; }
bit main () implements verifier {
    List L = newList ();

    fork (int i; 2) {
        add (L, i+1);
    }

    return verify (L);
}
