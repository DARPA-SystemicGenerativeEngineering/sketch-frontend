struct Object {
    int tid;
    int id;
}

struct QueueEntry {
    QueueEntry next;
    Object stored;
    bit taken;
}

struct Queue {
    QueueEntry prevHead;
    QueueEntry tail;
}

generator Object newObject (int tid, int id) { /* automatically rewritten */
    Object o = new Object ();
    o.tid = tid;
    o.id = id;
    return o;
}

generator QueueEntry newQueueEntry (QueueEntry next, Object stored, bit taken) { /* automatically rewritten */
    QueueEntry qe = new QueueEntry ();
    qe.next = next;
    qe.stored = stored;
    qe.taken = taken;
    return qe;
}

generator Queue newQueue () { /* automatically rewritten */
    Queue q = new Queue ();
    q.prevHead = newQueueEntry (null, null, 1);
    q.tail = q.prevHead;
    return q;
}

/**
 * Checks these structural properties of 'q':
 *
 * - the head is not null
 * - the head is taken
 * - the tail is equal to the head, or reachable from the head
 * - the tail has no successor
 * - there are at most 'maxlen' nodes in the queue (including the head and tail)
 *   (this is a cheap cycle detector)
 * - no 'taken' nodes appear after untaken ones
 */
bit isValidQueue (Queue q) { /* automatically rewritten */
    assert q.prevHead != null;
    assert q.prevHead.taken;

    if (q.tail == q.prevHead) {
        assert q.prevHead.next == null;
        return 1;
    }

    QueueEntry n = q.prevHead;
    bit sawUntaken = 0;
    while (n != null) {
        if (sawUntaken) {
            assert 0 == n.taken;
        } else if (0 == n.taken) {
            sawUntaken = 1;
        }
        if (n.next == null) {
            assert n == q.tail;
            n = null;
        } else {
            assert n.next != q.prevHead;
            n = n.next;
        }
    }

    return n == null;   // the loop "terminated"
}

/** Assumes isValidQueue (q). */
bit isEmptyQueue (Queue q) { /* automatically rewritten */
    QueueEntry n = q.prevHead;
    while (n != null) {
        if (0 == n.taken) {
            return 0;
        }
        n = n.next;
    }
    return 1;
}