include "../../generators.skh";

bit disableAssert = 0;
pragma options "--bnd-inbits 4 --bnd-inline-amnt 2 --bnd-unroll-amnt 16 --bnd-cbits 3 ";

include "../../ilog_model_old_cegis.skh";

// compute the nearest upper k such that 2**k = a

int N = 1;

harness void closestTwoPower(int[N] a){

	int[N] b;
	for(int i=0; i<N; i++){
	if(a[i] == 0) a[i] = 1;
	}

	int result = 0;
	for(int i=0; i<N; i++){
	int q = linexp(2,{a[i],??});
	int exp = log(q);
	// int exp = log(linexp(2, {a[i], ??}));
	if(disableAssert) return;
	b[i] = linexp(2, {exp, ??});
	// result += pow(2, b[i]);
	}	
	
	for(int i=0; i<N ; i++){
		bit more = true;
		int t = log(a[i]);
		if(disableAssert) return;
		for(int j=0; j<= t + 1; ++j){
			if(pow(2, j)>=a[i] && more){
				   //assert b[i] == j;
				   guardAssertion(b[i] == j);
				   more = false;
		        } 
		}
			
	}

}

void guardAssertion(bit b){
	if(!disableAssert){
		assert b;
	}
}
