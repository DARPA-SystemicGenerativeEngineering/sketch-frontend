include "options.skh";


//derivative computation for a polynomial represented by coefficient list
int[2*n] mult(int[n] x, int[n] y){
    int[2*n] out = 0;
    for(int i=0; i<n; ++i){
        for(int j=0; j<n; ++j){            
            int tmp = y[i] * x[j];
            tmp = out[j + i] + tmp;
            out[j + i] = tmp % BASE;
            out[j + i + 1] = out[j + i + 1] + (tmp / BASE); 
        }           
    }    
    int[2*n] rv = out;
    int[n] x1 = x;
    int[n] x2 = y;   
	bit b1 =true;//x1 == 0
	for(int i =0;i<n;i++){
		if(b1==true && x1[i] != 0) b1=false;
	}

	bit b2 =true;//x2 == 0
	for(int i =0;i<n;i++){
		if(b2==true && x2[i] != 0) b2=false;
	}

	if(b1==true || b2==true){
		//rv == 0
		for(int i =0;i<2*n;i++){
			assert(rv[i] == 0);
		}
	}
    return out;
}
int[n] toBase(int z){
	//write z in base BASE
	int[n] out =0;
	int sum =z;
	for (int i=0;i<n;i++){
		out[i] = sum % BASE;
		sum = sum/BASE;
	}
	return out;
}


harness void main(int[n][k] p){
	int[2*n][k] out1 = 0;
	for(int i=0;i<k-1;i++){
		out1[i] = mult(toBase(i+1),p[i+1]);
	}
	int[2*n][k] out2 = 0;
	for(int i=??;{|i  (< | <= | > | >=) (??*k (+ | -) ??) |};i++){
		out2[i] = mult(p[{| ??*i (+ | -) ?? |}],toBase({| ??*i (+ | -) ?? |}));
	}

	assert(out1 == out2);
}
