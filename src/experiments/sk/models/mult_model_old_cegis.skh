

int[2*n] muluf(int[n] x1, int[n] x2);


int[2*n] mmul(int[n] x1, int[n] x2){
	// changing values modulo BASE?
	bit b=true;
	bit done = false;
	for(int i=n-1;i>=0;i--){
		if(!done){
			if(x1[i] > x2[i]){ b=false; done = true;}
			if(x1[i] < x2[i]){ b=true; done = true;}
		}
	}//b is true iff x1 <= x2
	int[n] xa;
	int[n] xb;
	if(b==true){
		xa = x1;
		xb = x2;
	}
	else{
		xa = x2;
		xb = x1;
	}
	int [2*n] rv = muluf(xa,xb);

	bit b1 =true;//x1 == 0
	for(int i =0;i<n;i++){
		if(b1==true && x1[i] != 0) b1=false;
	}

	bit b2 =true;//x2 == 0
	for(int i =0;i<n;i++){
		if(b2==true && x2[i] != 0) b2=false;
	}

	if(b1==true || b2==true){
		//rv == 0
		for(int i =0;i<2*n;i++){
			//assert(rv[i] == 0);
			disableAssertion(rv[i] == 0);
			if(disableAssert) return 0;
		}
	}
	return rv;
}

void disableAssertion(bit b){
	if(!b){
		disableAssert = 1;
	}
}
