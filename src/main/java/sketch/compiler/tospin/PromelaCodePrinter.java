/**
 *
 */
package streamit.frontend.tospin;

import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import streamit.frontend.nodes.ExprConstInt;
import streamit.frontend.nodes.ExprConstant;
import streamit.frontend.nodes.ExprFunCall;
import streamit.frontend.nodes.ExprVar;
import streamit.frontend.nodes.Expression;
import streamit.frontend.nodes.FEContext;
import streamit.frontend.nodes.FENode;
import streamit.frontend.nodes.FieldDecl;
import streamit.frontend.nodes.Function;
import streamit.frontend.nodes.Parameter;
import streamit.frontend.nodes.SJRoundRobin;
import streamit.frontend.nodes.Statement;
import streamit.frontend.nodes.StmtAdd;
import streamit.frontend.nodes.StmtAnyOrderBlock;
import streamit.frontend.nodes.StmtAssert;
import streamit.frontend.nodes.StmtAssign;
import streamit.frontend.nodes.StmtAtomicBlock;
import streamit.frontend.nodes.StmtBlock;
import streamit.frontend.nodes.StmtBody;
import streamit.frontend.nodes.StmtBreak;
import streamit.frontend.nodes.StmtContinue;
import streamit.frontend.nodes.StmtDoWhile;
import streamit.frontend.nodes.StmtEmpty;
import streamit.frontend.nodes.StmtEnqueue;
import streamit.frontend.nodes.StmtExpr;
import streamit.frontend.nodes.StmtFor;
import streamit.frontend.nodes.StmtIfThen;
import streamit.frontend.nodes.StmtJoin;
import streamit.frontend.nodes.StmtLoop;
import streamit.frontend.nodes.StmtPloop;
import streamit.frontend.nodes.StmtPush;
import streamit.frontend.nodes.StmtReturn;
import streamit.frontend.nodes.StmtSendMessage;
import streamit.frontend.nodes.StmtSplit;
import streamit.frontend.nodes.StmtVarDecl;
import streamit.frontend.nodes.StmtWhile;
import streamit.frontend.nodes.StreamSpec;
import streamit.frontend.nodes.TempVarGen;
import streamit.frontend.nodes.Type;
import streamit.frontend.nodes.TypeArray;
import streamit.frontend.passes.CodePrinter;

/**
 * @author Chris Jones
 */
public class PromelaCodePrinter extends CodePrinter {
	protected boolean sawInit = false;
	protected TempVarGen vargen;
	protected String syncChan;

	public PromelaCodePrinter (TempVarGen vargen) {
		this (System.out, vargen);
	}

	public PromelaCodePrinter (OutputStream os, TempVarGen _vargen) {
		super (os);
		vargen = _vargen;
	}

	protected void printPrelude () {
		syncChan = vargen.nextVar ("_proc_sync_");

		printLine ("/**");
		printLine (" *------------------------------------------------------");
		printLine (" * Automatically generated by the SKETCH compiler.");
		printLine (" *------------------------------------------------------");
		printLine (" */");
		printLine ("#define null (-1)");
		printLine ("mtype = { done };");
		printLine ("chan "+ syncChan +" = [2] of { mtype };");
		printLine ("");
	}

	protected String declToString (Type t, String name) {
		if (t.isArray ()) {
			TypeArray ta = (TypeArray) t;
			return ta.getBase () +" "+ name +"["+ ta.getLength () +"]";
		} else
			return t +" "+ name;
	}

	protected String paramsToString (List<Parameter> params) {
		String pms = "";
		for (Parameter p : params) {
			if (pms.length () > 0)
				pms += "; ";
			pms += declToString (p.getType (), p.getName ());
		}
		return pms;
	}

	protected void printVarDecl (Type t, String name, Expression init) {
		String decl = declToString (t, name);

		if (null != init)
			printLine (decl +" = "+ init +";");
		else
			printLine (decl +";");
	}

	public Object visitStreamSpec (StreamSpec ss) {
		printPrelude ();

		// Declare the globals
		for (FENode n : (List<FENode>) ss.getVars ())
			n.accept (this);
		printLine ("");

		for (Function f : (List<Function>) ss.getFuncs ()) {
			if (Function.FUNC_ASYNC == f.getCls ())
				emitProcess (f);
			else {
				f.assertTrue (!sawInit, "sorry, only one 'main()' function allowed");
				sawInit = true;
				emitInit (f);
			}
		}

		return null;
	}

	protected Object emitProcess (Function func) {
		func.assertTrue (null == func.getSpecification (),
						 "internal error: sketches should be gone");

		printLine ("proctype "+ func.getName () +"(int __this; "+ paramsToString (func.getParams ()) + ")");
		printLine ("{");
		func.getBody ().accept (this);
		++indent; printLine (syncChan +" ! done;  /* return */"); --indent;
		printLine ("}");
		printLine ("");
		out.flush();

		return func;
	}

	protected Object emitInit (Function func) {
		printLine ("init");
		printLine ("{");

		++indent;
		// The params to "init()" should actually be locals to the function
		for (Parameter p : func.getParams ()) {
			printTab ();
			printLine (declToString (p.getType (), p.getName ()) + ";");
		}
		--indent;

		printIndentedStatement (func.getBody ());
		printLine ("}");
		printLine ("");
		out.flush();

		return func;
	}

	public Object visitExprFunCall (ExprFunCall call) {
		String params = "";
		for (Expression e : call.getParams ()) {
			if (0 < params.length ())
				params += ", ";
			params += e;
		}
		printLine ("run "+ call.getName () +" ("+ params +");");
		return null;
	}

	public Object visitFieldDecl (FieldDecl fd) {
		for (int i = 0; i < fd.getNumFields (); ++i)
			printVarDecl (fd.getType (i), fd.getName (i), fd.getInit (i));
		return null;
	}

	public Object visitStmtFor(StmtFor stmt)
	{
		List<Statement> newStmts =
			new ArrayList<Statement> (((StmtBlock) stmt.getBody ()).getStmts ());
		newStmts.add (stmt.getIncr ());
		StmtBlock newBody = new StmtBlock (stmt.getBody ().getCx (), newStmts);

		stmt.getInit ().accept (this);
		printLine ("do");
		printLine (":: !("+ stmt.getCond () +") -> break");
		printLine (":: else");
		newBody.accept (this);
		printLine ("od;");
		return stmt;
	}

	@Override
	public Object visitStmtIfThen(StmtIfThen stmt)
	{
		printLine ("if");
		printLine ("::"+ stmt.getCond () +" -> ");
		stmt.getCons ().accept (this);
		printLine (":: else");
		if (null != stmt.getAlt ()) {
			stmt.getAlt ().accept (this);
		} else {
			printTab (); printLine ("skip;");
		}
		printLine ("fi;");
		return stmt;
	}

	@Override
	public Object visitStmtWhile(StmtWhile stmt)
	{
		printLine ("do");
		printLine (":: !("+ stmt.getCond () +") -> break;");
		printLine (":: else");
    	stmt.getBody().accept (this);
    	printLine ("od;");
		return stmt;
	}

	@Override
	public Object visitStmtDoWhile(StmtDoWhile stmt)
	{
		FEContext cx = stmt.getCx ();
		String first = vargen.nextVar ("do_while_first_iter");
		List<Statement> newStmts =
			new ArrayList<Statement> (((StmtBlock) stmt.getBody ()).getStmts ());
		newStmts.add (new StmtAssign (cx, new ExprVar (cx, first),
									  ExprConstant.createConstant (cx, "0")));
		StmtBlock newBody = new StmtBlock (stmt.getBody ().getCx (), newStmts);

		printLine ("hidden bool "+ first +" = 1;");
		printLine ("do");
		printLine (":: !first && !("+ stmt.getCond () +") -> break;");
		printLine (":: else");
		newBody.accept (this);
		printLine ("od");

		return stmt;
	}

	@Override
	public Object visitStmtLoop(StmtLoop stmt)
	{
		return assertEliminated (stmt);
	}
	@Override
	public Object visitStmtPloop(StmtPloop stmt)
	{
		//return assertEliminated (stmt);
		return null;
	}

	@Override
	public Object visitStmtBlock(StmtBlock stmt)
	{
		printLine("{");
		indent++;
		super.visitStmtBlock(stmt);
		indent--;
		printLine("}");
		return stmt;
	}

	@Override
	public Object visitStmtAdd(StmtAdd stmt)
	{
		return assertEliminated (stmt);
	}

	@Override
	public Object visitStmtAssert(StmtAssert stmt)
	{
		printLine(stmt.toString() +";");
		return super.visitStmtAssert(stmt);
	}

	@Override
	public Object visitStmtAssign(StmtAssign stmt)
	{
		printLine(stmt.toString()  + ';');
		return super.visitStmtAssign(stmt);
	}

	@Override
	public Object visitStmtBody(StmtBody stmt)
	{
		printLine(stmt.toString());
		return super.visitStmtBody(stmt);
	}

	@Override
	public Object visitStmtBreak(StmtBreak stmt)
	{
		printLine(stmt.toString());
		return super.visitStmtBreak(stmt);
	}

	@Override
	public Object visitStmtContinue(StmtContinue stmt)
	{
		printLine(stmt.toString());
		return super.visitStmtContinue(stmt);
	}

	@Override
	public Object visitStmtEmpty(StmtEmpty stmt)
	{
		printLine(stmt.toString());
		return super.visitStmtEmpty(stmt);
	}

	@Override
	public Object visitStmtEnqueue(StmtEnqueue stmt)
	{
		return assertEliminated (stmt);
	}

	@Override
	public Object visitStmtExpr(StmtExpr stmt)
	{
		Expression expr = stmt.getExpression ();
		if (expr instanceof ExprFunCall)
			expr.accept (this);
		else if (!(expr instanceof ExprConstInt))
			printLine(stmt.toString());
		return null;
	}

	@Override
	public Object visitStmtJoin(StmtJoin stmt)
	{
		printLine (syncChan +" ? done;  /* join */");
		return null;
	}

	@Override
	public Object visitStmtPush(StmtPush stmt)
	{
		return assertEliminated (stmt);
	}

	@Override
	public Object visitStmtReturn(StmtReturn stmt)
	{
		return assertEliminated (stmt);
	}

	@Override
	public Object visitStmtSendMessage(StmtSendMessage stmt)
	{
		return assertEliminated (stmt);
	}

	@Override
	public Object visitStmtSplit(StmtSplit stmt)
	{
		return assertEliminated (stmt);
	}

	@Override
	public Object visitStmtVarDecl(StmtVarDecl stmt)
	{
		for (int i = 0; i < stmt.getNumVars (); ++i)
			printVarDecl (stmt.getType (i), stmt.getName (i), stmt.getInit (i));
		return null;
	}

	public Object visitStmtAnyOrderBlock(StmtAnyOrderBlock block){
		return assertEliminated (block);
	}

	public Object visitStmtAtomicBlock(StmtAtomicBlock block){
		printLine("atomic");
		visitStmtBlock (block);
		return block;
	}


	protected Object assertEliminated (FENode node) {
		node.assertTrue (false, "internal error; I should have been eliminated.");
		return null;
	}
}
