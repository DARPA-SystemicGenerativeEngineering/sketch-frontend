// $ANTLR 2.7.7 (2006-11-01): "StreamItParserFE.g" -> "StreamItParserFE.java"$

package sketch.compiler.parser;

import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Vector;

import sketch.compiler.Directive;
import sketch.compiler.ast.core.FEContext;
import sketch.compiler.ast.core.FieldDecl;
import sketch.compiler.ast.core.Function;
import sketch.compiler.ast.core.Parameter;
import sketch.compiler.ast.core.Program;
import sketch.compiler.ast.core.SplitterJoiner;
import sketch.compiler.ast.core.StreamSpec;
import sketch.compiler.ast.core.StreamType;

import sketch.compiler.ast.core.exprs.*;
import sketch.compiler.ast.core.stmts.*;
import sketch.compiler.ast.core.typs.*;
import sketch.compiler.ast.cuda.exprs.*;
import sketch.compiler.ast.cuda.stmts.*;
import sketch.compiler.ast.cuda.typs.*;

import sketch.compiler.ast.promela.stmts.StmtFork;
import sketch.compiler.main.seq.SequentialSketchOptions;
import sketch.compiler.passes.streamit_old.SJDuplicate;
import sketch.compiler.passes.streamit_old.SJRoundRobin;
import sketch.compiler.passes.streamit_old.SJWeightedRR;
import static sketch.util.DebugOut.assertFalse;

public interface StreamItParserFETokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int TK_atomic = 4;
	int TK_fork = 5;
	int TK_insert = 6;
	int TK_into = 7;
	int TK_loop = 8;
	int TK_repeat = 9;
	int TK_minrepeat = 10;
	int TK_new = 11;
	int TK_null = 12;
	int TK_reorder = 13;
	int TK_boolean = 14;
	int TK_float = 15;
	int TK_bit = 16;
	int TK_int = 17;
	int TK_void = 18;
	int TK_double = 19;
	int TK_complex = 20;
	int TK_struct = 21;
	int TK_ref = 22;
	int TK_if = 23;
	int TK_else = 24;
	int TK_while = 25;
	int TK_for = 26;
	int TK_switch = 27;
	int TK_case = 28;
	int TK_default = 29;
	int TK_break = 30;
	int TK_do = 31;
	int TK_continue = 32;
	int TK_return = 33;
	int TK_true = 34;
	int TK_false = 35;
	int TK_parfor = 36;
	int TK_until = 37;
	int TK_by = 38;
	int TK_implements = 39;
	int TK_assert = 40;
	int TK_h_assert = 41;
	int TK_generator = 42;
	int TK_harness = 43;
	int TK_library = 44;
	int TK_printfcn = 45;
	int TK_device = 46;
	int TK_global = 47;
	int TK_serial = 48;
	int TK_include = 49;
	int TK_pragma = 50;
	int ARROW = 51;
	int LARROW = 52;
	int WS = 53;
	int LINERESET = 54;
	int SL_COMMENT = 55;
	int ML_COMMENT = 56;
	int LPAREN = 57;
	int RPAREN = 58;
	int LCURLY = 59;
	int RCURLY = 60;
	int LSQUARE = 61;
	int RSQUARE = 62;
	int PLUS = 63;
	int PLUS_EQUALS = 64;
	int INCREMENT = 65;
	int MINUS = 66;
	int MINUS_EQUALS = 67;
	int DECREMENT = 68;
	int STAR = 69;
	int STAR_EQUALS = 70;
	int DIV = 71;
	int DIV_EQUALS = 72;
	int MOD = 73;
	int LOGIC_AND = 74;
	int LOGIC_OR = 75;
	int BITWISE_AND = 76;
	int BITWISE_OR = 77;
	int BITWISE_XOR = 78;
	int ASSIGN = 79;
	int DEF_ASSIGN = 80;
	int EQUAL = 81;
	int NOT_EQUAL = 82;
	int LESS_THAN = 83;
	int LESS_EQUAL = 84;
	int MORE_THAN = 85;
	int MORE_EQUAL = 86;
	int QUESTION = 87;
	int COLON = 88;
	int SEMI = 89;
	int COMMA = 90;
	int DOT = 91;
	int BANG = 92;
	int LSHIFT = 93;
	int RSHIFT = 94;
	int NDVAL = 95;
	int NDVAL2 = 96;
	int SELECT = 97;
	int REGEN = 98;
	int CHAR_LITERAL = 99;
	int STRING_LITERAL = 100;
	int ESC = 101;
	int DIGIT = 102;
	int HQUAN = 103;
	int NUMBER = 104;
	int ID = 105;
	int TK_pipeline = 106;
	int TK_splitjoin = 107;
	int TK_feedbackloop = 108;
	int TK_sbox = 109;
	int TK_roundrobin = 110;
	int TK_duplicate = 111;
	int TK_portal = 112;
	int TK_handler = 113;
	int TK_pi = 114;
}
