pragma options "--spmd-max-nproc 3 --bnd-inbits 2 --bnd-cbits 2 --bnd-unroll-amnt 16 --bnd-inline-amnt 3 --bnd-arr1d-size 8 --bnd-arr-size 64 --be:ufunSymmetry  --beopt:simplifycex NOSIM --beopt:simiters 100 --be:lightverif"; //  --be:showDAG

int SPMD_MAX_NPROC = 5;
int SPMD_MAX_BUF_LEN = 1;
include "spmd.skh";

assume P>0 && P<=3;
assume W%P==0 && W>1 && W<=6;
assume H>1 && H<=3;

struct LState {
	int height;
	int width;
	float[width+2 <: 8][height <: 3] arr;
}

LState movein(global int H, global int W, global float[W][H] ga) {
	int w = W/spmdnproc;
	float[w+2][H] la;
	for (int t=0; t<H; ++t) {
		for (int x=0; x<w; ++x) {
			la[t][x+1] = ga[t][spmdpid*w + x];
		}
	}
	LState s = new LState(height=H, width=w, arr=la);
	return s;
}

void moveout(global int H, global int W, ref global float[W][H] ga, LState s) {
	int base = s.width*spmdpid;
	for (int t=0; t<H; ++t) {
		for (int x=0; x<s.width; ++x) {
			ga[t][base+x] = s.arr[t][1 + x];
		}
	}
}

void spec(global int P, global int H, global int W, ref global float[W][H] A) {
    for(int t=1; t<H; ++t) {
    		A[t][0] = A[t-1][W-1] + A[t-1][1];
    		A[t][W-1] = A[t-1][W-2] + A[t-1][0];
        for(int x=1; x<W-1; ++x){
            A[t][x] = A[t-1][x-1] + A[t-1][x+1];
        }   
    }
}

void exchange(global int t, ref LState s) {
	int r;
	float [1] sbuf;
	float [1] rbuf;
	
	generator int index() {
		return ??(1)*s.width + ?? * {| 1 | -1 |};
	}
	
	generator int pid() {
		return ??(1)*spmdnproc+??(1)*spmdpid + ??*{| 1 | -1 |};
	}

	loop(2) {
		sbuf[0] = s.arr[t][index()];
		r = (spmdpid==pid()) ? pid() : pid();
		spmdtransfer(1, 1, sbuf, r, 1, rbuf);
		s.arr[t][index()] = rbuf[0];
	}
}

void sk(global int P, global int H, global int W, ref global float[W][H] A) implements spec {
	spmdfork(P) {
		LState s;
		s = movein(H, W, A);
		spmdbarrier();

//		global int t = 1;
//		while (t < H) {
		for (global int t = 1; t<H; ++t) {
			exchange(t-1, s);
			
			for (int x=0; x<s.width; ++x) {
				s.arr[t][1+x] = s.arr[t-1][x] + s.arr[t-1][x+2];
			}
//			++t;
		}
		spmdbarrier();
		moveout(H, W, A, s);
	}
}