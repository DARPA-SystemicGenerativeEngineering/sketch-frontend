pragma options "--bnd-inbits 4 --bnd-cbits 3 --bnd-unroll-amnt 9 --bnd-inline-amnt 2 --beopt:-bndwrand 50  --bnd-arr-size 8 --be:ufunSymmetry  --beopt:simplifycex NOSIM"; //  --be:showDAG

float[n+T+T%2][T] specCenter(int n, int T, float[n+T+T%2][T] in) {    
	float[n+T+T%2][T] out = in;
	if ( (n>T*2) && (T>1 && T<4) ){
        for(int t=1; t<T; ++t){
            for(int i=(T+1)/2+t; i<(T+1)/2+n-t; ++i){
                out[t][i] = out[t-1][i-1] + out[t-1][i+1];
            }   
        }
    }
	return out;
}

float[n+T+T%2][T] fastCenter(int n, int T, float[n+T+T%2][T] in) implements specCenter {
	float[n+T+T%2][T] out = in;
	if ( (n>T*2) && (T>1 && T<4) ){
		repeat(2){
		    for(int s=(??(2)-1)*N + (??(2)-1)*T; s<(??(2)-1)*N + (??(2)-1)*T; ++s){
		        for(int t= (??(2)-1)*(s/2) +((??(2)-1)*N + (??(2)-1)*T+(??-2)); t<(??(2)-1)*(s/2) +((??(2)-1)*N + (??(2)-1)*T+(??-2)); ++t){
		            int i = (T+1)/2+s-t;
		            assert t> 0 && t < T; assert i > 0 && i < N;
	                out[t][i] = out[t-1][i-1] + out[t-1][i+1];
		        }           
		    }
		}
	}
	return out;
}

/*
stencil float[N][T] specCenter(int N, int T, float[N][T] in){    
    float[N][T] out = in;
    if(N>=4 && T >= 3 && N > T*2){
        for(int t=1; t<T; ++t){
            for(int i=t; i<N-t; ++i){
                out[t][i] = out[t-1][i-1] + out[t-1][i+1];
            }   
        }
    }
    return out; 
}

generator void stenGen(fun sten, int N, int T){
    repeat(2){
        for(int s=(??(2)-1)*N + (??(2)-1)*T; s<(??(2)-1)*N + (??(2)-1)*T; ++s){
            for(int t= (??(2)-1)*(s/2) +((??(2)-1)*N + (??(2)-1)*T+(??-2)); t<(??(2)-1)*(s/2) +((??(2)-1)*N + (??(2)-1)*T+(??-2)); ++t){
                int i = s-t;
                assert t> 0 && t < T; assert i > 0 && i < N;
                sten(t, i); 
            }           
        }  
    }
}


stencil float[N][T] fastCenter(int N, int T, float[N][T] in) implements specCenter {
    float[N][T] out = in;
    if(N>=4 && T >= 3 && N > T*2){
        generator void sten(int t, int i){
            out[t][i] = out[t-1][i-1] + out[t-1][i+1];
        }
        stenGen(sten, N, T);
//        for (int s=2; s<T*2; ++s) {
//                for (int t=1; t<s/2; ++t) {
//            		int i = s-t;
//        			out[t][i] = out[t-1][i-1] + out[t-1][i+1];
//        		}
//        }
//        for (int s=T*2; s<N; ++s) {
//        		for (int t=1; t<T; ++t) {
//        			int i = s-t;
//        			out[t][i] = out[t-1][i-1] + out[t-1][i+1];
//        		}
//        }
    }
    return out; 
}
*/