pragma options "-p preproc --bnd-inbits 3 --bnd-cbits 3 --bnd-unroll-amnt 9 --bnd-inline-amnt 3 --beopt:-bndwrand 50  --bnd-arr-size 16 --be:ufunSymmetry  --beopt:simplifycex NOSIM --beopt:simiters 10"; //  --be:showDAG

void specCenter(int n, int T, ref float[n+T+T%2][T] A){    
    if ( (n>(T-1)*2) && (T>1 /*&& T<4*/) ){
        for(int t=1; t<T; ++t){
            for(int i=(T+1)/2+t; i<(T+1)/2+n-t; ++i){
                A[t][i] = A[t-1][i-1] + A[t-1][i+1];
            }   
        }
    }
}

generator int pos_neg() {
	if (??(1)) {
		return 1;
	} else {
		return -1;
	}
	//return ??-1;
}

generator int signed() {
	return ??*pos_neg();
}

generator int legen2(int x, int y) {
	return ??*x+??*y;
}

generator int legen3(int x, int y, int z) {
	return ??*x + ??*y + ??*z;
}

generator int legen4(int x, int y, int z, int w) {
	return ??*x + ??*y + ??*z + ??*w;
}

generator int legen5(int x, int y, int z, int w, int u) {
	return ??*x + ??*y + ??*z + ??*w + ??*u;
}


void fastCenter(int n, int T, ref float[n+T+T%2][T] A) {
//	generator void sten(int t, int i) {
//		A[t][i] = A[t-1][i-1]+A[t-1][i+1];
//	}
	if (	(n>(T-1)*2) && (T>1 /*&& T<4*/) ){
//		repeat(2){
//			for (int s=legen3(n, T, T%2)+signed(); s<legen3(n, T, T%2)+signed(); ++s) {
//				for (int t=1; t<legen5(n, T, T%2, s, s%2)+signed(); ++t) {
//					sten(t, legen5(n, T, T%2, s-t, (s-t)%2)+signed());
//				}
//			}
//		}
		int start1 = legen2(n, T) + signed();
		int end1 = legen2(n, T) + signed();
		for (int j=start1 /*1*/; j<end1 /*(T-2)*2+1*/; ++j) {
			for (int t=1; t<(j+1)/2+1; ++t) {
				int i = (T+1)/2 + j-t+1;  // 0
				A[t][i] = A[t-1][i-1] + A[t-1][i+1];
			}
		}
		int start2 = legen3(n, T, (T+1)/2) + signed();
		int end2 = legen3(n, T, (T+1)/2) + signed();
	    for(int j= 2*(T-2)+1  /*2*(T-2)+1 = 2*T-3*/; j<n-1 /*n-1*/; ++j){
	    		for(int t=1; t<T; ++t){
	            int i = (T+1)/2 + j-t + 1;  // 1
                A[t][i] = A[t-1][i-1] + A[t-1][i+1];
	        }           
	    }
	}
}


stencil float[n+T+T%2][T] specCenterSten(int n, int T, float[n+T+T%2][T] in) {    
	float[n+T+T%2][T] out = in;
	specCenter(n, T, out);
	return out;
}

stencil float[n+T+T%2][T] fastCenterSten(int n, int T, float[n+T+T%2][T] in) implements specCenterSten {    
	float[n+T+T%2][T] out = in;
	fastCenter(n, T, out);
	return out;
}
