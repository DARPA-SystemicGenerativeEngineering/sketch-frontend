#define SPMD_MAX_BUF_LEN 64
#include "spmd.h"

#define N_INT 4
// number of internal points in each direction
#define P 2
// Processors in each direction

float sten(float left, float right, float top, float bottom);

void pass(int N, ref float [N][N] u, bit red)
{
    for(int i=1; i<N-1; i++)
	for(int j=1+(i+red)%2; j<N-1; j=j+2)
	    u[i][j] = sten(u[i][j-1], u[i][j+1], u[i-1][j], u[i+1][j]);
}


void rb_iteration(ref float[N_INT+2][N_INT+2] gu)
{
    pass(N_INT+2, gu, true);
    pass(N_INT+2, gu, false);
}

void rb_iteration_spmd(ref float [N_INT+2][N_INT+2] gu) implements rb_iteration
{
    int n = N_INT / P;
    int N = n+2;

    spmdinfo info = spmdinit(P*P, n);

    spmdfork(rank; P*P) {
        int px = rank % P;
        int py = rank / P;
        bit iamred = n%2==0 || (px+py)%2==0;

        int left = (px == 0) ? -1 : rank - 1;
        int right = (px == P-1) ? -1 : rank + 1;
        int top = (py == 0) ? -1 : rank - P;
        int bottom = (py == P-1) ? -1 : rank + P;

        float [N][N] u;
        float [n] buff_send;
        float [n] buff_recv;

        // move in
        for (int i=0; i<N; ++i) {
            for (int j=0; j<N; ++j) {
                u[i][j] = gu[n*py + i][n*px + j];
            }
        }

        pass(N, u, iamred);

        // communicate
        spmdtransfer(info, n, u[1][1::n], (top>=0), top, u[N-1][1::n], (bottom>=0));
        if (left>=0) {
            for (int i=0; i<n; ++i) {
                buff_send[i] = u[i+1][1];
            }
        }
        spmdtransfer(info, n, buff_send, (left>=0), left, buff_recv, (right>=0));
        if (right>=0) {
            for (int i=0; i<n; ++i) {
                u[i+1][N-1] = buff_recv[i];
            }
        }

        spmdtransfer(info, n, u[n][1::n], (bottom>=0), bottom, u[0][1::n], (top>=0));

        if (right>=0) {
            for (int i=0; i<n; ++i) {
                buff_send[i] = u[i+1][n];
            }
        }
        spmdtransfer(info, n, buff_send, (right>=0), right, buff_recv, (left>=0));
        if (left>=0) {
            for (int i=0; i<n; ++i) {
                u[i+1][0] = buff_recv[i];
            }
        }

        pass(N, u, !iamred);

        // move out
        for (int i=1; i<N-1; ++i) {
            for (int j=1; j<N-1; ++j) {
                gu[n*py + i][n*px + j] = u[i][j];
            }
        }
    }
}
