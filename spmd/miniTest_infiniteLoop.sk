
void allproc_exchange (int _spmdnproc, global float[1][1] info_18_buf_s17, ref  int[1] s_19_width_s18, ref  float[4][2][1] s_19_arr_s19)/*rexample1.sk:46*/
{
//   float[1][1] sbuf_1a;
//   float[1][1] rbuf_1b;
//   int[1] r_1c;
//  for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
//  {
//    sbuf_1a[_spmdpid][0] = s_19_arr_s19[_spmdpid][0][0];
//    r_1c[_spmdpid] = (_spmdpid == 0 ? _spmdnproc - 1 : _spmdpid - 1);
//    assert ((r_1c[_spmdpid]) == 0); //Assert at rexample1.sk:51 (-7813722429262402783)
//    assert ((sbuf_1a[_spmdpid][0]) == (s_19_arr_s19[_spmdpid][0][0])); //Assert at rexample1.sk:52 (5478281515610880307)
//  }
//  allproc_spmdtransfer(_spmdnproc, info_18_buf_s17, 1, sbuf_1a, {1}, r_1c, rbuf_1b, {1});

//  for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
//  {
//    assert ((rbuf_1b[_spmdpid][0]) == (sbuf_1a[_spmdpid][0])); //rexample1.sk:54   0010
//    assert ((rbuf_1b[_spmdpid][0]) == (s_19_arr_s19[_spmdpid][0][0])); //Assert at rexample1.sk:55 (-8654939965068633018)
//    s_19_arr_s19[_spmdpid][0][3] = s_19_arr_s19[_spmdpid][0][0];
//    sbuf_1a[_spmdpid][0] = s_19_arr_s19[_spmdpid][0][2];
//    assert (_spmdpid < 1); //start must < size
//    assert ((s_19_width_s18[_spmdpid]) == 2); //Assert at rexample1.sk:59 (1875121226174660216)
//    r_1c[_spmdpid] = (_spmdpid == (_spmdnproc - 1) ? 0 : _spmdpid + 1);
//    assert ((r_1c[_spmdpid]) == 0); //Assert at rexample1.sk:61 (3347685294239927171)
//  }
  s_19_arr_s19[0][0][3] = s_19_arr_s19[0][0][1];
  s_19_arr_s19[0][0][0] = s_19_arr_s19[0][0][2];
//  assert s_19_arr_s19[0][0][0] == s_19_arr_s19[0][0][3];
//
//  allproc_spmdtransfer(_spmdnproc, info_18_buf_s17, 1, sbuf_1a, {1}, r_1c, rbuf_1b, {1});
//  for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
//  {
//    assert ((rbuf_1b[_spmdpid][0]) == (sbuf_1a[_spmdpid][0])); //Assert at rexample1.sk:63 (-1067030240941676433)
//    assert ((rbuf_1b[_spmdpid][0]) == (s_19_arr_s19[_spmdpid][0][2])); //Assert at rexample1.sk:64 (-6432509307492986677)
//    s_19_arr_s19[_spmdpid][0][0] = rbuf_1b[_spmdpid][0];
//  }
  
}
/*rexample1.sk:24*/

void allproc_spmdtransfer (int _spmdnproc, global float[1][1] info_25_buf_s20, int size_26,  float[size_26][1] src_buff_27,  bit[1] scond_28,  int[1] recipient_29, ref  float[size_26][1] dest_buff_2a,  bit[1] rcond_2b)/*rexample1.sk:24*/
{
  for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
  {
    int i_2c;
    for(i_2c = 0; i_2c < size_26; i_2c = i_2c + 1)
    {
      info_25_buf_s20[recipient_29[_spmdpid]][i_2c] = src_buff_27[_spmdpid][i_2c];
    }
  }
  for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
  {
    if(rcond_2b[_spmdpid])/*rexample1.sk:33*/
    {
      int i_2d;
      for(i_2d = 0; i_2d < size_26; i_2d = i_2d + 1)
      {
        dest_buff_2a[_spmdpid][i_2d] = info_25_buf_s20[_spmdpid][i_2d];
      }
    }
  }
}
/*rexample1.sk:68*/

void forkproc_sk (int P_0, int W_1, ref float[W_1][2] A_2)  implements spec/*rexample1.sk:68*/
{
  if((((P_0 > 0) && (P_0 <= 1)) && ((W_1 % P_0) == 0)) && (W_1 == 2))/*rexample1.sk:69*/
  {
    global float[1][1] info_3_buf_s11;
    float[1][1] info_s1_4_buf_s12;
    spmdinit(P_0, 1, info_s1_4_buf_s12);
    info_3_buf_s11 = info_s1_4_buf_s12;
    {
      int _spmdnproc;
      _spmdnproc = P_0;
      assert (_spmdnproc <= 1); //Assert at rexample1.sk:71 (5635832091843592592)
      {
         int[1] s_5_width_s13;
         float[4][2][1] s_5_arr_s14;
        for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
        {
          int s_s3_6_width_s15;
          float[4][2] s_s3_6_arr_s16;
          someproc_movein(_spmdnproc, _spmdpid, W_1, A_2, s_s3_6_width_s15, s_s3_6_arr_s16);
          assert (_spmdpid < 1); //start must < size
          s_5_width_s13[_spmdpid] = s_s3_6_width_s15;
          s_5_arr_s14[_spmdpid] = s_s3_6_arr_s16;
        }
        allproc_exchange(_spmdnproc, info_3_buf_s11, s_5_width_s13, s_5_arr_s14);
        for(int _spmdpid = 0; _spmdpid < _spmdnproc; _spmdpid = _spmdpid + 1)
        {
          assert ((s_5_arr_s14[_spmdpid][0][0]) == (s_5_arr_s14[_spmdpid][0][2])); //Assert at rexample1.sk:78 (1986958269142517576)
          assert ((s_5_arr_s14[_spmdpid][0][3]) == (s_5_arr_s14[_spmdpid][0][0])); //Assert at rexample1.sk:79 (-7727650857765041087)
          int x_7;
          assert (_spmdpid < 1); //start must < size
          for(x_7 = 0; x_7 < (s_5_width_s13[_spmdpid]); x_7 = x_7 + 1)
          {
            s_5_arr_s14[_spmdpid][1][1 + x_7] = (s_5_arr_s14[_spmdpid][0][x_7]) + (s_5_arr_s14[_spmdpid][0][x_7 + 2]);
          }
          assert ((s_5_arr_s14[_spmdpid][1][1]) == ((s_5_arr_s14[_spmdpid][0][0]) + (s_5_arr_s14[_spmdpid][0][2]))); //Assert at rexample1.sk:84 (9165386328714641573)
          assert ((s_5_arr_s14[_spmdpid][1][2]) == ((s_5_arr_s14[_spmdpid][0][1]) + (s_5_arr_s14[_spmdpid][0][3]))); //Assert at rexample1.sk:85 (5258042332628214791)
          assert (_spmdpid < 1); //start must < size
          someproc_moveout(_spmdnproc, _spmdpid, W_1, A_2, s_5_width_s13[_spmdpid], s_5_arr_s14[_spmdpid]);
        }
      }
    }
  }
}
/*rexample1.sk:11*/


void someproc_movein (int _spmdnproc, int _spmdpid, int W_f, float[W_f][2] ga_10, ref int _out_11_width_s21, ref float[4][2] _out_11_arr_s22)/*rexample1.sk:11*/
{
  int w_12;
  w_12 = W_f / _spmdnproc;
  float[w_12 + 2][2] la_13;
  int t_14;
  for(t_14 = 0; t_14 < 2; t_14 = t_14 + 1)
  {
    int x_17;
    for(x_17 = 0; x_17 < w_12; x_17 = x_17 + 1)
    {
      la_13[t_14][x_17 + 1] = ga_10[t_14][(_spmdpid * w_12) + x_17];
    }
  }
  _out_11_width_s21 = w_12;
  assert (2 <= 2); //Assert at rexample1.sk:13 (8750538372009380365)
  assert ((w_12 + 2) <= 4); //Assert at rexample1.sk:13 (-2764035562578441257)
  for(int iter_s23 = 0; iter_s23 < 2; iter_s23 = iter_s23 + 1)
    for(int iter_s24 = 0; iter_s24 < (w_12 + 2); iter_s24 = iter_s24 + 1)
      _out_11_arr_s22[iter_s23][iter_s24] = la_13[iter_s23][iter_s24];
  return;
}
/*rexample1.sk:23*/

void someproc_moveout (int _spmdnproc, int _spmdpid, int W_1d, ref float[W_1d][2] ga_1e, int s_1f_width_s25, float[4][2] s_1f_arr_s26)/*rexample1.sk:23*/
{
  int base_20;
  base_20 = s_1f_width_s25 * _spmdpid;
  int t_21;
  for(t_21 = 0; t_21 < 2; t_21 = t_21 + 1)
  {
    int x_24;
    for(x_24 = 0; x_24 < s_1f_width_s25; x_24 = x_24 + 1)
    {
      ga_1e[t_21][base_20 + x_24] = s_1f_arr_s26[t_21][1 + x_24];
    }
  }
}
/*rexample1.sk:32*/

void spec (int P_8, int W_9, ref float[W_9][2] A_a)/*rexample1.sk:32*/
{
  if((((P_8 > 0) && (P_8 <= 1)) && ((W_9 % P_8) == 0)) && (W_9 == 2))/*rexample1.sk:33*/
  {
    A_a[1][0] = (A_a[0][W_9 - 1]) + (A_a[0][1]);
    A_a[1][W_9 - 1] = (A_a[0][W_9 - 2]) + (A_a[0][0]);
    int x_b;
    for(x_b = 1; x_b < (W_9 - 1); x_b = x_b + 1)
    {
      A_a[1][x_b] = (A_a[0][x_b - 1]) + (A_a[0][x_b + 1]);
    }
    assert ((A_a[1][0]) == ((A_a[0][1]) + (A_a[0][1]))); //rexample1.sk:41   aaa
    assert ((A_a[1][1]) == ((A_a[0][0]) + (A_a[0][0]))); //rexample1.sk:42   bbb
  }
}
/*rexample1.sk:16*/

void spmdinit (int nproc_c, int maxlen_d, ref float[1][1] _out_e_buf_s4)/*rexample1.sk:16*/
{
  assert (maxlen_d <= 1); //Assert at rexample1.sk:18 (-6892362918866704122)
  assert (nproc_c <= 1); //Assert at rexample1.sk:19 (3945271407518684179)
  return;
}