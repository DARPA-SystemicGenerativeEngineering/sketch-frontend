#define SPMD_MAX_BUF_LEN (8)
#include "spmd.skh"

//include "generators.skh";

float sten(float left, float right, float top, float bottom);

float rb_spec(int N_INT, int i, int j, int t)
{
    if (i == 0 || j == 0 || i == N_INT+1 || j == N_INT+1 || t == 0) {
        return 0;
    } else if ((i+j+t)%2 == 0) {
        return rb_spec(N_INT, i, j, t-1);
    } else {
        return sten( rb_spec(N_INT, i, j-1, t-1), rb_spec(N_INT, i, j+1, t-1), rb_spec(N_INT, i-1, j, t-1), rb_spec(N_INT, i+1, j, t-1) );
    }
}


void forLoop(fun body, int low, int high){
    if(low < high){
        body(low);
        forLoop(body, low+1, high);
    }
}

void forLoopS(fun body, int low, int high, int step) {
    if(low < high){
        body(low);
        forLoop(body, low+step, high);
    }
}


void pass(int n, ref float [n+2 <: 4][n+2 <: 4] u, bit red)
{
	generator void t1(int i) {
		generator void t2(int j) {
			u[i][j] = sten(u[i][j-1], u[i][j+1], u[i-1][j], u[i+1][j]);
		}
		forLoopS(t2, 1+(i+red)%2, n+1, 2);
	}
	forLoop(t1, 1, n+1);
//    for(int i=1; i<=n; ++i)
//	for(int j=1+(i+red)%2; j<=n; j+=2)
//	    u[i][j] = sten(u[i][j-1], u[i][j+1], u[i-1][j], u[i+1][j]);
}


harness void check(int N_INT, int P, int T)
{
    if(N_INT>0 && N_INT<=2 && P>1 && P <= 2 && P<=N_INT && N_INT%P == 0 && T < 2){
        rb_spmd(N_INT, P, T);
    }
}

void communicate(global spmdinfo info, global int P, global int n, ref float[n+2 <: 4][n+2 <: 4] u, int rank)
{
    float [n <: 2] buff_send;
    float [n <: 2] buff_recv;
    int p = rank / P;
    int q = rank % P;
    int left = (q == 0) ? -1 : rank - 1;
    int right = (q == P-1) ? -1 : rank + 1;
    int top = (p == 0) ? -1 : rank - P;
    int bottom = (p == P-1) ? -1 : rank + P;

    spmdtransfer(info, n, u[1][1::n], (top>=0), top, u[n+1][1::n], (bottom>=0));

    generator void t1(int i) {
    		buff_send[i] = u[i+1][1];
    }    
    if (left>=0) {
//        for (int i=0; i<n; ++i) {
//            buff_send[i] = u[i+1][1];
//        }
    		forLoop(t1, 0, n);
    }
    spmdtransfer(info, n, buff_send, (left>=0), left, buff_recv, (right>=0));
    generator void t2(int i) {
    		u[i+1][n+1] = buff_recv[i];
    }
    if (right>=0) {
//        for (int i=0; i<n; ++i) {
//            u[i+1][n+1] = buff_recv[i];
//        }
    		forLoop(t2, 0, n);
    }

    spmdtransfer(info, n, u[n][1::n], (bottom>=0), bottom, u[0][1::n], (top>=0));


    generator void t3(int i) {
		buff_send[i] = u[i+1][n];
    } 
    if (right>=0) {
//        for (int i=0; i<n; ++i) {
//            buff_send[i] = u[i+1][n];
//        }
    		forLoop(t3, 0, n);
    }
    spmdtransfer(info, n, buff_send, (right>=0), right, buff_recv, (left>=0));
    generator void t4(int i) {
		u[i+1][0] = buff_recv[i]	;
    }
    if (left>=0) {
//        for (int i=0; i<n; ++i) {
//            u[i+1][0] = buff_recv[i];
//        }
    		forLoop(t4, 0, n);
    }
}

void rb_spmd(int N_INT, int P, int halfT)
{
    int T = halfT*2;
    int n = N_INT/P;
    int N = n+2;

    spmdinfo info = spmdinit(P*P, n);
    spmdfork(rank; P*P) {
        float [N <: 4][N <: 4] u;

        int p = rank / P;
        int q = rank % P;

        bit iamred = n%2==0 || (p+q)%2==0;
        //bit iamred = n%2==0 || expr(3, {p, q, 2}, 2, {MOD, PLUS}) == 0; //(p+q)%2 == 0;
        
        int t=1;
//        generator void iter(int t) {
            communicate(info, P, n, u, rank);
            pass(n, u, iamred);
            communicate(info, P, n, u, rank);
            pass(n, u, !iamred);
//        }
//        forLoop(iter, 0, halfT+1);
//        while (t<=halfT) {
//            communicate(info, P, n, u, rank);
//            pass2(n, u, iamred);
//            communicate(info, P, n, u, rank);
//            pass2(n, u, !iamred);
//            ++t;
//        }
        
        generator void t1(int i) {
        		generator void t2(int j) {
                int gi = p*n + i;
                int gj = q*n + j;
                assert u[i][j] == rb_spec(N_INT, gi, gj, T);
        		}
        		forLoop(t2, 1, n+1);
        }
        forLoop(t1, 1, n+1);

//        for (int i=1; i<=n; ++i) {
//            for (int j=1; j<=n; ++j) {
//                int gi = p*n + i;
//                int gj = q*n + j;
//                assert u[i][j] == rb_spec(N_INT, gi, gj, T);
//            }
//        }
    }
}

