pragma options "--bnd-inbits 3 --bnd-cbits 2 --bnd-unroll-amnt 9 --bnd-inline-amnt 2 --beopt:-bndwrand 50  --bnd-arr-size 16 --be:ufunSymmetry  --beopt:simplifycex NOSIM --beopt:simiters 10"; //  --be:showDAG

#define SPMD_MAX_BUF_LEN 16
#include "spmd2.skh"

// length of ghost region: (T+1)/2; (T+1)/2 * 2 = T+T%2
void move_in(global int N, global int T, global float[N][T] ga, global int n, ref float[n+T+T%2][T] la) {
	for (int t=0; t<T; ++t) {
		for (int i=0; i<n; ++i) {
			la[t][i+(T+1)/2] = ga[t][spmdpid*n + i];
		}
	}
}

void move_out(global int N, global int T, ref global float[N][T] ga, global int n, float[n+T+T%2][T] la) {
	for (int t=0; t<T; ++t) {
		for (int i=0; i<n; ++i) {
			ga[t][spmdpid*n + i] = la[t][i+(T+1)/2];
		}
	}
}

/*
stencil float[N][T] specInit(int np, int N, int T) {
	float[N][T] out = 0.0;
    if( (np>0 && np<=4) && (N%np==0) && (T>1 && T<4) ){
		for (int i=0; i<N; ++i) {
			out[0][i] = 1.0;
		}
    }
	return out;
}

stencil float[N][T] fastInit(int np, int N, int T) implements specInit {
	float[N][T] out = 0.0;
    if( (np>0 && np<=4) && (N%np==0) && (T>1 && T<4) ){
	    	global int n = N/np;
		spmdfork(np) {
			float[n][T] A = 0.0;
			for (int i=0; i<n; ++i) {
				A[0][i] = 1.0;
			}
			move_out(N, T, out, n, A);
		}
    }
	return out;
}
*/

stencil float[N][T] specCompute(int np, int N, int T, float[N][T] in) {
	float[N][T] out = in;
    if( (np==1) && (N%np==0) && (T>1 && T<4) && (N>T*2) ){
	    	for (int t=1; t<T; ++t) {
			out[t][0] = out[t-1][N-1] + out[t-1][1];
			out[t][N-1] = out[t-1][N-2] + out[t-1][0];
			for (int i=1; i<N-1; ++i) {
				out[t][i] = out[t-1][i-1] + out[t-1][i+1];
			}
		}
    }
	return out;
}

void fastLeft(global spmdinfo info, global int np, global int n, global int T, ref float[n+T+T%2][T] A) {
	float[T-1] send_buf;
	for (int i=0; i<T-1; ++i) {
		send_buf[i] = A[i/2][(T+1)/2+n-1-i/2-i%2];
	}
	
	float[T-1] recv_buf;
	int r = (spmdpid==np-1) ? 0 : spmdpid+1;
	
	spmdtransfer(info, T-1, send_buf, 1, r, recv_buf, 1);
	for (int i=0; i<T-1; ++i) {
		A[i/2][(T+1)/2-1-i/2-i%2] = recv_buf[i];
	}
	
	for (int s=0; s<T-1; ++s) {
		for (int t=s/2+1; t<T; ++t) {
			int i = (T+1)/2-s+t-1;
			A[t][i] = A[t-1][i-1]+A[t-1][i+1];
		}
	}
}

void fastRight(global spmdinfo info, global int np, global int n, global int T, ref float[n+T+T%2][T] A) {
	float[T-1] send_buf;
	for (int i=0; i<T-1; ++i) {
		send_buf[i] = A[i/2][(T+1)/2+i/2+i%2];
	}
	
	float[T-1] recv_buf;
	int r = (spmdpid==0) ? np-1 : spmdpid-1;
	
	spmdtransfer(info, T-1, send_buf, 1, r, recv_buf, 1);
	
	for (int i=0; i<T-1; ++i) {
		A[i/2][(T+1)/2+n+i/2+i%2] = recv_buf[i];
	}
	
	for (int s=0; s<T-1; ++s) {
		for (int t=s/2+1; t<T; ++t) {
			int i = n+(T+1)/2+s-t;
			A[t][i] = A[t-1][i-1] + A[t-1][i+1];
		}
	}
}

void specCenter(int n, int T, ref float[n+T+T%2][T] out){    
    if ( (n>T*2) && (T>1 && T<4) ){
        for(int t=1; t<T; ++t){
            for(int i=(T+1)/2+t; i<(T+1)/2+n-t; ++i){
                out[t][i] = out[t-1][i-1] + out[t-1][i+1];
            }   
        }
    }
}

stencil float[N][T] fastCompute(int np, int N, int T, float[N][T] in) implements specCompute {
	float[N][T] out = in;
    if( (np == 1) && (N%np==0) && (T>1 && T<4) && (N>T*2) ){
    		global int n = N/np;
    		global spmdinfo info = spmdinit(np, T);
		spmdfork(np) {
			float[n+T+T%2][T] A;
			move_in(N, T, out, n, A);
			specCenter(n, T, A);
			fastLeft(info, np, n, T, A);
			fastRight(info, np, n, T, A);
			move_out(N, T, out, n, A);
		}
    }
    return out;
}



/*
stencil float[N][T] specNext(int np, int N, int T, float[N][T] in) {
    float[N][T] out = in;
    if( (np>0 && np<=4) && (N%np==0) && (T>1 && T<4) ){
        out[0] = out[T-1];
    }
    return out; 
}

stencil float[N][T] fastNext(int np, int N, int T, float[N][T] in) implements specNext {
	float[N][T] out = in;
    if( (np>0 && np<=4) && (N%np==0) && (T>1 && T<4) ){
		global int n = N/np;
    		spmdfork(np) {
        		float[n][T] A;
    			move_in(N, T, out, n, A);
    			A[0] = A[T+1-??];
    			move_out(N, T, out, n, A);
    		}
    }
    return out;
}
*/