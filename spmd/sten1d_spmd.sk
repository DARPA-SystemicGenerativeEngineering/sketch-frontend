pragma options "-p preproc --bnd-inbits 3 --bnd-cbits 3 --bnd-unroll-amnt 3 --bnd-inline-amnt 3 --beopt:-bndwrand 50  --bnd-arr-size 16 --be:ufunSymmetry  --beopt:simplifycex NOSIM --beopt:simiters 20"; //  --be:showDAG

#define SPMD_MAX_BUF_LEN 16
#include "spmd2.skh"

int K = 1;

// length of ghost region: (T+1)/2*K
void movein(int rank, global int N, global int T, global float[N][T] ga, global int n, ref float[n+(T+1)/2*K*2][T] la) {
	for (int t=0; t<T; ++t) {
		for (int x=0; x<n; ++x) {
			la[t][x+(T+1)/2*K] = ga[t][rank*n + x];  // this is OK, can be solved symbolically
		}
	}
}

void moveout(int rank, global int N, global int T, ref global float[N][T] ga, global int n, float[n+(T+1)/2*K*2][T] la) {
	for (int t=0; t<T; ++t) {
		int s0 = rank*n;
		int t0 = rank*n+n;
		for (int x=s0; x<t0; ++x) {
			ga[t][x] = la[t][x-rank*n+(T+1)/2*K];  // this cannot be solved symbolically. underconstrained.
		}
	}
}

stencil float[N][T] compute(int np, int N, int T, float[N][T] in) {
	float[N][T] out = in;
    if( (np<=3) && (N%np==0) && (T>=3) && ((N/np)>=(T-1)*2*K+1)){
	    	for (int t=1; t<T; ++t) {
			for (int x=0; x<N; ++x) {
				out[t][x] = out[t-1][(x+N-K)%N] + out[t-1][(x+K)%N];
			}
		}
    }
	return out;
}

void fastLeft(global spmdinfo info, global int np, global int n, global int T, ref float[n+(T+1)/2*K*2][T] A) {
	float[(T-1)*K] send_buf;
	for (int i=0; i<(T-1)*K; ++i) {
		send_buf[i] = A[i/(K*2)][(T+1)/2*K+n -1 - (i/(K*2)*K + i%(K*2))];   // OK
	}
	
	float[(T-1)*K] recv_buf;
	int r = (spmdpid== (np-1) ) ? 0 : spmdpid+1;
	
	// size = (T-1)*K, will be computed NP times, but that's OK, because NP is small (<=4)
	spmdtransfer(info, (T-1)*K, send_buf, 1, r, recv_buf, 1);
	for (int t=0; t<T/2; ++t) {
		for (int j=0; j<2*K; ++j) {
			if (2*K*t+j < (T-1)*K) {
				int x = (T+1)/2*K -1 - (t*K+j);
				A[t][x] = send_buf[t*(2*K)+j];
			}
		}
	}
//	for (int i=0; i<(T-1)*K; ++i) {
//		A[i/(K*2)][(T+1)/2*K - 1 - (i/(K*2)*K + i%(K*2))] = recv_buf[i];  // not OK. will 
//	}
	
	for (int j=0; j<K*(T-1); ++j) {
		int bottom = j/(2*K) +1;
		for (int t=bottom; t<T; ++t) {
			int x = (T+1)/2*K - 1 - j + t*K;
			A[t][x] = A[t-1][x-K]+A[t-1][x+K];
		}
	}
}

void fastRight(global spmdinfo info, global int np, global int n, global int T, ref float[n+(T+1)/2*K*2][T] A) {
	float[(T-1)*K] send_buf;
	for (int i=0; i<(T-1)*K; ++i) {
		send_buf[i] = A[i/(K*2)][(T+1)/2*K + (i/(K*2)*K + i%(K*2))];
	}
	
	float[(T-1)*K] recv_buf;
	int r = (spmdpid== 0 ) ? np-1 : spmdpid-1;
	
	spmdtransfer(info, (T-1)*K, send_buf, 1, r, recv_buf, 1);
//	for (int i=0; i<(T-1)*K; ++i) {
//		A[i/(K*2)][(T+1)/2*K +n + (i/(K*2)*K + i%(K*2))] = recv_buf[i];
//	}
	for (int t=0; t<T/2; ++t) {
		for (int j=0; j<2*K; ++j) {
			if (2*K*t+j < (T-1)*K) {
				int x = (T+1)/2*K + n + (t*K+j);
				A[t][x] = send_buf[t*(2*K)+j];
			}
		}
	}
	
	for (int j=0; j<K*(T-1); ++j) {
		int bottom = j/(2*K) +1;
		for (int t=bottom; t<T; ++t) {
			int x = (T+1)/2*K +n + j - t*K;
			A[t][x] = A[t-1][x-K]+A[t-1][x+K];
		}
	}
}

void trapezoid(int n, int T, int L, ref float[n+L*2][T] A){    
    if ( (T>=3) && (n>=(T-1)*2*K+1) ){
        for(int t=1; t<T; ++t){
            for(int j=t*K; j<n-t*K; ++j){
            		int x = L+j;
                A[t][x] = A[t-1][x-K] + A[t-1][x+K];
            }   
        }
    }
}

stencil float[N][T] computeFast(int np, int N, int T, float[N][T] in) implements compute {
	float[N][T] out = in;
    if( (np<=3) && (N%np==0) && (T>=3) && ((N/np)>=(T-1)*2*K+1)){
    		global int n = N/np;
    		global spmdinfo info = spmdinit(np, T);
		spmdfork(np) {
			float[n+(T+1)/2*K*2][T] A;
			movein(spmdpid, N, T, out, n, A);
			trapezoid(n, T, (T+1)/2*K, A);
			fastLeft(info, np, n, T, A);
			fastRight(info, np, n, T, A);
			moveout(spmdpid, N, T, out, n, A);
		}
    }
    return out;
}