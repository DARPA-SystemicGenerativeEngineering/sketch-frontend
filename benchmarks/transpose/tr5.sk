pragma options "-V20 --spmd-max-nproc 3 --bnd-inbits 2 --bnd-cbits 1 --beopt:bndwrand 1000 --bnd-unroll-amnt 18 --bnd-inline-amnt 3 --bnd-arr1d-size 3 --bnd-arr-size 36 --be:ufunSymmetry --be:nosim --beopt:simplifycex NOSIM --beopt:simiters 100 --be:lightverif"; //  --be:showDAG

int SPMD_MAX_NPROC = 3;
int SPMD_MAX_BUF_LEN = 32;
include "spmd.skh";

struct LState {
	int ntdivnp;		// total cells per node
	double[ntdivnp] a;
}


LState movein(global int nproc, int pid, global int nt, global double[nt] ga) {
	global int ntdivnp = nt/nproc;
	double[ntdivnp] a;
	int base = ntdivnp*pid;
	assert ntdivnp<=8;
	for (int i=0; i<ntdivnp; ++i) {
		a[i] = ga[base+i];
	}
	LState ls = new LState(ntdivnp=ntdivnp, a=a);
	return ls;
}

void moveout(global int nproc, int pid, global int nt, ref global double[nt] ga, LState ls) {
	int base = ls.ntdivnp*pid;
	for (int i=0; i<ls.ntdivnp; ++i) {
		ga[base+i] = ls.a[i];
	}
}

// logically the array is double[nx][ny][nz], i.e. nx is the most minor dimension.
// cells with same (y, z) but increasing x will occupy a contiguous region (of length nx) in memory
// we use a by-plane partition, so every node owns entire x and y axes, but portion of z axes
// after transpose, the new array result will have different dimensions: (x,y,z) => (z,x,y)
void spec(global int P, global int nx, global int ny, global int nz, global double[nx*ny*nz] a, ref global double[nx*ny*nz] result) {
	assume P>0 & P<=SPMD_MAX_NPROC : "P";
	assume P == 3;
	//assume nx%P==0;
	assume ny%P==0;
	assume nz%P==0;

	assume nx==3;
	assume ny==3;
	assume nz==3;
	
	// we don't use block now
    for(int y=0; y<ny; ++y) {
    		for (int x=0; x<nx; ++x) {
    			for (int z=0; z<nz; ++z) {
    				result[y*(nx*nz) + x*(nz) + z] = a[z*(nx*ny) + y*(nx) + x];
    			}
    		}
    }
}


// n1 = nx*ny, n2 = nz/spmdproc
// [n1][n2] => [n2][n1]
void transpose_local(global int n1, global int n2, double[n1*n2] a, ref double[n1*n2] b) {
	for (int i=0; i<n2; ++i) {
		for (int j=0; j<n1; ++j) {
			b[j*n2 + i] = a[i*n1 + j]; 
		}
	}
}

// n1=nx*ny/np, n2=nz
// [nz/np][nx][ny/np][np] => [nz][nx][ny/np]
void transpose_finish(global int n1, global int n2, double[n1*n2] a, ref double[n1*n2] b) {
	for (int p=0; p<spmdnproc; ++p) {
		int ioff = p*n2/spmdnproc;
		for (int j=0; j<n1; ++j) {
			for (int i=0; i<n2/spmdnproc; ++i) {
				b[j*n2 + i+ioff] = a[p*(n1*n2/spmdnproc) + j*n2/spmdnproc + i];
			}
		}
	}
}

// transpose a to b
void transpose_xy_z(global int nx, global int ny, global int nz, LState a, ref LState b) {
	transpose_local(nx*ny, nz/spmdnproc, a.a, b.a);
	global int size = a.ntdivnp;
	spmdalltoall(size, b.a, a.a);
	transpose_finish(nx*ny/spmdnproc, nz, a.a, b.a);
}


void sk(global int P, global int nx, global int ny, global int nz, global double[nx*ny*nz] a, ref global double[nx*ny*nz] result) implements spec {
	global int nt = nx*ny*nz;
	spmdfork(P) {
		LState la;
		la = movein(P, spmdpid, nt, a);
		LState lr;
		lr = movein(P, spmdpid, nt, result);
		spmdbarrier();
		transpose_xy_z(nx, ny, nz, la, lr);
		spmdbarrier();
		moveout(P, spmdpid, nt, result, lr);
	}
}